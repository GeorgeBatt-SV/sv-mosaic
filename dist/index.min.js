'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var jsvalidator = _interopDefault(require('jsvalidator'));
var styled = _interopDefault(require('styled-components'));
var Button$2 = _interopDefault(require('@material-ui/core/Button'));
var IconButton = _interopDefault(require('@material-ui/core/IconButton'));
var Popover = _interopDefault(require('@material-ui/core/Popover'));
var Popper = _interopDefault(require('@material-ui/core/Popper'));
var MUIMenu = _interopDefault(require('@material-ui/core/Menu'));
var MUIMenuItem = _interopDefault(require('@material-ui/core/MenuItem'));
var ExpandMoreIcon = _interopDefault(require('@material-ui/icons/ExpandMore'));
var ViewQuiltIcon = _interopDefault(require('@material-ui/icons/ViewQuilt'));
var MUIDrawer = _interopDefault(require('@material-ui/core/Drawer'));
var CreateIcon = _interopDefault(require('@material-ui/icons/Create'));
var CloseIcon = _interopDefault(require('@material-ui/icons/Close'));
var i18next = _interopDefault(require('i18next'));
var reactI18next = require('react-i18next');
var TextField = _interopDefault(require('@material-ui/core/TextField'));
var FormGroup = _interopDefault(require('@material-ui/core/FormGroup'));
var FormControl = _interopDefault(require('@material-ui/core/FormControl'));
var FormControlLabel = _interopDefault(require('@material-ui/core/FormControlLabel'));
var Switch = _interopDefault(require('@material-ui/core/Switch'));
var ChevronRightIcon = _interopDefault(require('@material-ui/icons/ChevronRight'));
var ChevronLeftIcon = _interopDefault(require('@material-ui/icons/ChevronLeft'));
var lodash = require('lodash');
var List = _interopDefault(require('@material-ui/core/List'));
var ListItem = _interopDefault(require('@material-ui/core/ListItem'));
var ListItemIcon = _interopDefault(require('@material-ui/core/ListItemIcon'));
var MUICheckbox = _interopDefault(require('@material-ui/core/Checkbox'));
var GridOnIcon = _interopDefault(require('@material-ui/icons/GridOn'));
var FormatListBulletedIcon = _interopDefault(require('@material-ui/icons/FormatListBulleted'));
var ArrowDownwardIcon = _interopDefault(require('@material-ui/icons/ArrowDownward'));
var ArrowUpwardIcon = _interopDefault(require('@material-ui/icons/ArrowUpward'));
var SettingsIcon = _interopDefault(require('@material-ui/icons/Settings'));
var MoreHorizIcon = _interopDefault(require('@material-ui/icons/MoreHoriz'));
var Chip = _interopDefault(require('@material-ui/core/Chip'));
var InputBase = _interopDefault(require('@material-ui/core/InputBase'));
var SearchIcon = _interopDefault(require('@material-ui/icons/Search'));
var HelpIcon = _interopDefault(require('@material-ui/icons/Help'));
var CircularProgress = _interopDefault(require('@material-ui/core/CircularProgress'));
var reactIs = _interopDefault(require('react-is'));
var Typography = _interopDefault(require('@material-ui/core/Typography'));
var styles$4 = require('@material-ui/core/styles');
var Toolbar = _interopDefault(require('@material-ui/core/Toolbar'));
var DialogActions = _interopDefault(require('@material-ui/core/DialogActions'));
var DialogContent = _interopDefault(require('@material-ui/core/DialogContent'));
var Dialog$1 = _interopDefault(require('@material-ui/core/Dialog'));
var InputAdornment = _interopDefault(require('@material-ui/core/InputAdornment'));
var SvgIcon = _interopDefault(require('@material-ui/core/SvgIcon'));
var reactTransitionGroup = require('react-transition-group');
require('@material-ui/core/Grid');
require('@material-ui/core/Tab');
require('@material-ui/core/Tabs');
var Paper = _interopDefault(require('@material-ui/core/Paper'));
var KeyboardBackspaceIcon = _interopDefault(require('@material-ui/icons/KeyboardBackspace'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var theme = {
  h1: "\n\t\tfont-size: 20px;\n\t\tfont-weight: 500;\n\t",
  h2: "\n\t\tfont-size: 14px;\n\t\tfont-weight: normal;\n\t",
  iconFontSize: "24px",
  fontWeight: {
    normal: 400,
    semiBold: 500,
    bold: 700
  },
  colors: {
    black: "#0A1323",
    blue: "#0070F2",
    blueHover: "rgba(0, 89, 191, 1)",
    blueActive: "rgba(0, 71, 153, 1)",
    red: "#b10000",
    redHover: "rgba(138, 0, 0, 1)",
    redActive: "rgba(110, 0, 0, 1)",
    gray100: "#FAFAFA",
    gray200: "#F0F2F5",
    gray300: "#D7D8DC",
    gray400: "#9D9FA7",
    gray500: "#848791",
    gray600: "#6B6F7C",
    gray700: "#3B424E",
    gray800: "#0A1323"
  },
  borders: {
    lightGray: "1px solid rgba(0, 0, 0, .05)",
    gray: "1px solid rgba(0, 0, 0, .15)"
  },
  fontFamily: "-apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Ubuntu, Arial, sans-serif",
  animations: {
    backgroundMs: "250ms"
  }
};

var MenuBaseContext = React.createContext(null);
function MenuBase(props) {
  return /*#__PURE__*/React.createElement(MUIMenu, {
    anchorEl: props.anchorEl,
    open: props.open,
    onClose: props.onClose
  }, /*#__PURE__*/React.createElement(MenuBaseContext.Provider, {
    value: {
      onClose: props.onClose
    }
  }, props.children));
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tfont-size: 14px;\n\tcolor: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var Styled = styled.span(_templateObject(), theme.fontFamily, theme.colors.black);
function BodyText(props) {
  var children = props.children,
      _props$attrs = props.attrs,
      attrs = _props$attrs === void 0 ? {} : _props$attrs,
      remaining = _objectWithoutProperties(props, ["children", "attrs"]);

  return /*#__PURE__*/React.createElement(Styled, _extends({}, attrs, remaining), children);
}

function _templateObject$1() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tfont-size: 20px;\n\tfont-weight: normal;\n\tletter-spacing: -.5px;\n\tcolor: ", ";\n\tmargin-top: 0px;\n\tmargin-bottom: .67em;\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var Styled$1 = styled.h1(_templateObject$1(), theme.fontFamily, theme.colors.black);
function H1(props) {
  var children = props.children,
      _props$attrs = props.attrs,
      attrs = _props$attrs === void 0 ? {} : _props$attrs,
      remaining = _objectWithoutProperties(props, ["children", "attrs"]);

  return /*#__PURE__*/React.createElement(Styled$1, _extends({}, attrs, remaining), children);
}

function _templateObject$2() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tfont-size: 14px;\n\tfont-weight: bold;\n\tcolor: ", ";\n\tmargin-top: 0px;\n\tmargin-bottom: 1em;\n"]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}
var Styled$2 = styled.h3(_templateObject$2(), theme.fontFamily, theme.colors.black);
function H3(props) {
  var children = props.children,
      _props$attrs = props.attrs,
      attrs = _props$attrs === void 0 ? {} : _props$attrs,
      remaining = _objectWithoutProperties(props, ["children", "attrs"]);

  return /*#__PURE__*/React.createElement(Styled$2, _extends({}, attrs, remaining), children);
}

function P(props) {
  return /*#__PURE__*/React.createElement(BodyText, _extends({
    as: "p"
  }, props));
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n\t\t& svg {\n\t\t\tcolor: ", ";\n\t\t}\n\t"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n\t\t& svg {\n\t\t\tcolor: ", ";\n\t\t}\n\t"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: inline-flex;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$3() {
  var data = _taggedTemplateLiteral(["\n\tmin-width: 150px;\n\n\t&.MuiMenuItem-root {\n\t\tmin-height: 42px;\n\t}\n\n\t& > .icon {\n\t\tmargin-right: 10px;\n\t}\n\n\t& > .icon > svg {\n\t\tfont-size: ", ";\n\t}\n\n\t& > .menuLabel {\n\t\tfont-family: ", ";\n\t}\n"]);

  _templateObject$3 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledMenuItem = styled(MUIMenuItem)(_templateObject$3(), theme.iconFontSize, theme.fontFamily);
var StyledIcon = styled.div(_templateObject2());
var iconTypes = {
  blue: styled(StyledIcon)(_templateObject3(), theme.colors.blue),
  red: styled(StyledIcon)(_templateObject4(), theme.colors.red)
};
function MenuItem(props) {
  var Icon = props.mIcon;
  var MyIcon = props.color !== undefined ? iconTypes[props.color] : StyledIcon;
  var attrs = props.attrs || {};
  return /*#__PURE__*/React.createElement(StyledMenuItem, _extends({}, attrs, {
    onClick: props.onClick,
    disabled: props.disabled,
    selected: props.selected
  }), props.mIcon && /*#__PURE__*/React.createElement(MyIcon, {
    className: "icon"
  }, /*#__PURE__*/React.createElement(Icon, null)), /*#__PURE__*/React.createElement(BodyText, {
    className: "menuLabel"
  }, props.label));
}

function Menu(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "items",
      type: "array",
      schema: {
        type: "object",
        schema: [{
          name: "label",
          type: "string"
        }, {
          name: "color",
          type: "string",
          "enum": ["blue", "red", "black"]
        }, {
          name: "mIcon",
          type: "object"
        }, {
          name: "disabled",
          type: "boolean"
        }, {
          name: "selected",
          type: "boolean"
        }, {
          name: "onClick",
          type: "function"
        }, {
          name: "attrs",
          type: "object"
        }],
        allowExtraKeys: false
      }
    }, {
      name: "anchorEl",
      type: "object"
    }, {
      name: "open",
      type: "boolean",
      required: true
    }, {
      name: "onClose",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });
  var menuItems = props.items.map(function (item, i) {
    var onClick = function onClick() {
      item.onClick();
      props.onClose();
    };

    return /*#__PURE__*/React__default.createElement(MenuItem, _extends({
      key: i
    }, item, {
      onClick: onClick
    }));
  });
  return /*#__PURE__*/React__default.createElement(MenuBase, {
    anchorEl: props.anchorEl,
    open: props.open,
    onClose: props.onClose
  }, menuItems);
}

function _templateObject13() {
  var data = _taggedTemplateLiteral(["\n\tz-index: 100;\n\tbackground: ", ";\n\tpadding: 4px 8px;\n\tmargin-top: 4px;\n\tborder-radius: 4px;\n\tcolor: white;\n\tfont-family: ", ";\n\tfont-size: 12px;\n\tmargin: 12px 0px;\n\tmax-width: 200px;\n"]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tbackground: ", ";\n\t\t\tcolor:  ", ";\n\t\t}\n\t\t& > button:hover {\n\t\t\tbackground: ", ";\n\t\t}\n\t\t& > button:active,\n\t\t& > button:focus {\n\t\t\tbackground: ", ";\n\t\t}\n\t"]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tbackground: ", ";\n\t\t\tcolor: white;\n\t\t}\n\t\t& > button:hover {\n\t\t\tbackground: ", ";\n\t\t}\n\t\t& > button:active,\n\t\t& > button:focus {\n\t\t\tbackground: ", ";\n\t\t}\n\t"]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tbackground: ", "12;\n\t\t\tcolor: ", ";\n\t\t}\n\t\t& > button:hover {\n\t\t\tbackground: ", "24;\n\t\t}\n\t\t& > button:active,\n\t\t& > button:focus {\n\t\t\tbackground: ", "32;\n\t\t}\n\t"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tbackground: ", ";\n\t\t\tcolor: white;\n\t\t}\n\t\t& > button:hover {\n\t\t\tbackground: ", ";\n\t\t}\n\t\t& > button:active,\n\t\t& > button:focus {\n\t\t\tbackground: ", ";\n\t\t}\n\t"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button:hover {\n\t\t\tbox-shadow: 0 2px 3px ", "12;\n\t\t}\n\n\t\t& > button:active,\n\t\t& > button:focus {\n\t\t\tbox-shadow: 0 1px 2px ", "24;\n\t\t}\n\t"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button:hover {\n\t\t\tbox-shadow: 0 2px 3px ", "12;\n\t\t}\n\n\t\t& > button:active,\n\t\t& > button:focus {\n\t\t\tbox-shadow: 0 1px 2px ", "24;\n\t\t}\n\t"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button:hover {\n\t\t\tbox-shadow: 0 2px 3px ", "12;\n\t\t}\n\n\t\t& > button:active,\n\t\t& > button:focus {\n\t\t\tbox-shadow: 0 1px 2px ", "24;\n\t\t}\n\t"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n\t& > button {\n\t\tcolor: ", ";\n\t\tborder-color: ", ";\n\t}\n\n\t& > button:hover {\n\t\tbackground: ", "12;\n\t}\n\n\t& > button:active,\n\t& > button:focus {\n\t\tbackground: ", "24;\n\t}\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$1() {
  var data = _taggedTemplateLiteral(["\n\t& > button {\n\t\tcolor: ", ";\n\t\tborder-color: ", ";\n\t}\n\n\t& > button:hover {\n\t\tbackground: ", ";\n\t}\n\n\t& > button:active,\n\t& > button:focus {\n\t\tbackground: ", ";\n\t}\n"]);

  _templateObject4$1 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$1() {
  var data = _taggedTemplateLiteral(["\n\t& > button {\n\t\tcolor: ", ";\n\t\tborder-color: ", ";\n\t}\n\n\t& > button:hover {\n\t\tbackground: ", "12;\n\t}\n\n\t& > button:active,\n\t& > button:focus {\n\t\tbackground: ", "24;\n\t}\n"]);

  _templateObject3$1 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$1() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tpadding: 10px;\n"]);

  _templateObject2$1 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$4() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: inline-block;\n\n\t&.fullWidth {\n\t\tdisplay: block;\n\t}\n\n\t& > button {\n\t\tfont-family: ", ";\n\t\ttext-transform: none;\n\t\tfont-size: 14px;\n\t\tfont-weight: ", ";\n\t\tmin-width: auto;\n\t}\n\t\n\t&.normalButton > button {\n\t\tbox-shadow: none;\n\t}\n\t\n\t&.normalButton > button > span > .icon {\n\t\tfont-size: 20px;\n\t}\n\n\t&.normalButton.size_small > button {\n\t\tpadding: 3px 12px;\n\t}\n\n\t&.normalButton.size_large > button {\n\t\tpadding: 9px 24px;\n\t}\n\n\t&.normalButton.size_small.variant_outlined > button {\n\t\tpadding-top: 2px;\n\t\tpadding-bottom: 2px;\n\t}\n\n\t&.normalButton.size_large.variant_outlined > button {\n\t\tpadding-top: 8px;\n\t\tpadding-bottom: 8px;\n\t}\n\t\n\t&.normalButton.size_small > button .icon_left {\n\t\tmargin-right: 4px;\n\t\tmargin-left: -4px;\n\t}\n\t\n\t&.normalButton.size_small > button .icon_right {\n\t\tmargin-left: 4px;\n\t\tmargin-right: -4px;\n\t}\n\n\t&.normalButton.size_medium > button .icon_left {\n\t\tmargin-right: 4px;\n\t\tmargin-left: -4px;\n\t}\n\n\t&.normalButton.size_medium > button .icon_right {\n\t\tmargin-left: 4px;\n\t\tmargin-right: -4px;\n\t}\n\t\n\t&.normalButton.size_large > button .icon_left {\n\t\tmargin-right: 7px;\n\t\tmargin-left: -7px;\n\t}\n\t\n\t&.normalButton.size_large > button .icon_right {\n\t\tmargin-left: 7px;\n\t\tmargin-right: -7px;\n\t}\n\n\t&.iconButton svg {\n\t\tfont-size: ", ";\n\t}\n\t\n\t&.iconButton.size_small > button {\n\t\tpadding: 3px;\n\t}\n\n\t&.iconButton.size_medium > button {\n\t\tpadding: 6px;\n\t\tfont-size: 15px;\n\t}\n\n\t&.iconButton.size_large > button {\n\t\tpadding: 9px;\n\t}\n"]);

  _templateObject$4 = function _templateObject() {
    return data;
  };

  return data;
}
// Buttons should be 30/36/42 in height for small/medium/large in ALL variants
// The styling of text, outlined, and icon are shared. Contained are different because they usually need to get darker on hover/active than the primary color
var ButtonWrapper = styled.span(_templateObject$4(), theme.fontFamily, theme.fontWeight.semiBold, theme.iconFontSize);
var PopoverWrapper = styled.div(_templateObject2$1(), theme.fontFamily);
var RedOnWhite = styled(ButtonWrapper)(_templateObject3$1(), theme.colors.red, theme.colors.red, theme.colors.red, theme.colors.red);
var BlackOnWhite = styled(ButtonWrapper)(_templateObject4$1(), theme.colors.black, theme.colors.gray400, theme.colors.gray200, theme.colors.gray300);
var BlueOnWhite = styled(ButtonWrapper)(_templateObject5(), theme.colors.blue, theme.colors.blue, theme.colors.blue, theme.colors.blue);
var types = {
  blue_outlined: styled(BlueOnWhite)(_templateObject6(), theme.colors.blue, theme.colors.blue),
  red_outlined: styled(RedOnWhite)(_templateObject7(), theme.colors.red, theme.colors.red),
  black_outlined: styled(BlackOnWhite)(_templateObject8(), theme.colors.black, theme.colors.black),
  blue_contained: styled(ButtonWrapper)(_templateObject9(), theme.colors.blue, theme.colors.blueHover, theme.colors.blueActive),
  lightBlue_contained: styled(ButtonWrapper)(_templateObject10(), theme.colors.blue, theme.colors.blue, theme.colors.blue, theme.colors.blue),
  red_contained: styled(ButtonWrapper)(_templateObject11(), theme.colors.red, theme.colors.redHover, theme.colors.redActive),
  black_contained: styled(ButtonWrapper)(_templateObject12(), theme.colors.gray200, theme.colors.black, theme.colors.gray300, theme.colors.gray400),
  blue_text: BlueOnWhite,
  red_text: RedOnWhite,
  black_text: BlackOnWhite,
  blue_icon: BlueOnWhite,
  black_icon: BlackOnWhite,
  red_icon: RedOnWhite
};
var TooltipContent = styled.div(_templateObject13(), theme.colors.gray700, theme.fontFamily);
var ButtonPopoverContext = React.createContext(null);

function Button(props) {
  var _props$attrs = props.attrs,
      attrs = _props$attrs === void 0 ? {} : _props$attrs,
      _props$muiAttrs = props.muiAttrs,
      muiAttrs = _props$muiAttrs === void 0 ? {} : _props$muiAttrs;

  var _useState = React.useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      anchorEl = _useState2[0],
      setAnchorEl = _useState2[1];

  var _useState3 = React.useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      popoverAnchorEl = _useState4[0],
      setPopoverAnchorEl = _useState4[1];

  var _useState5 = React.useState(null),
      _useState6 = _slicedToArray(_useState5, 2),
      tooltipEl = _useState6[0],
      setTooltipEl = _useState6[1];

  var addAttrs = {};
  var MyButton = types["".concat(props.color, "_").concat(props.variant)];

  if (MyButton === undefined) {
    throw new Error("Color '".concat(props.color, "' and variant '").concat(props.variant, "' combination is not valid"));
  }

  var MaterialIcon = props.mIcon;
  var iconPosition = props.iconPosition || "left";

  function openMenu(event) {
    setAnchorEl(event.currentTarget);
  }

  function closeMenu() {
    setAnchorEl(null);
  }

  function openPopover(event) {
    setPopoverAnchorEl(event.currentTarget);
    setTooltipEl(null);
  }

  function closePopover() {
    setPopoverAnchorEl(null);
  }

  function onMouseEnter(e) {
    setTooltipEl(e.currentTarget);
  }

  function onMouseLeave(e) {
    setTooltipEl(null);
  }

  var onClick = props.popover ? openPopover : props.menuItems ? openMenu : props.menuContent ? openMenu : props.onClick;
  var size = props.size || "medium";

  if (props.tooltip !== undefined && props.disabled !== true) {
    addAttrs.onMouseEnter = onMouseEnter;
    addAttrs.onMouseLeave = onMouseLeave;
  }

  return /*#__PURE__*/React.createElement(MyButton, _extends({}, attrs, addAttrs, {
    className: "\n\t\t\t\t".concat(props.className ? props.className : "", "\n\t\t\t\tbutton\n\t\t\t\t").concat(props.variant === "icon" ? "iconButton" : "normalButton", "\n\t\t\t\t").concat(props.fullWidth ? "fullWidth" : "", "\n\t\t\t\tsize_").concat(size, "\n\t\t\t\tvariant_").concat(props.variant, "\n\t\t\t")
  }), props.variant !== "icon" && /*#__PURE__*/React.createElement(Button$2, _extends({}, muiAttrs, {
    variant: props.variant,
    onClick: onClick,
    size: size,
    fullWidth: props.fullWidth,
    disabled: props.disabled,
    href: props.href
  }), props.mIcon && iconPosition === "left" && /*#__PURE__*/React.createElement(MaterialIcon, {
    className: "icon icon_left",
    style: {
      color: props.mIconColor
    }
  }), props.label, props.mIcon && iconPosition === "right" && /*#__PURE__*/React.createElement(MaterialIcon, {
    className: "icon icon_right",
    style: {
      color: props.mIconColor
    }
  })), props.variant === "icon" && /*#__PURE__*/React.createElement(IconButton, _extends({}, muiAttrs, {
    onClick: onClick,
    disabled: props.disabled
  }), props.mIcon && /*#__PURE__*/React.createElement(MaterialIcon, {
    className: "icon"
  })), props.menuItems && /*#__PURE__*/React.createElement(Menu, {
    items: props.menuItems,
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onClose: closeMenu
  }), props.menuContent && /*#__PURE__*/React.createElement(MenuBase, {
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onClose: closeMenu
  }, props.menuContent), props.popover && /*#__PURE__*/React.createElement(Popover, {
    open: Boolean(popoverAnchorEl),
    anchorEl: popoverAnchorEl,
    anchorOrigin: {
      vertical: 'top',
      horizontal: 'left'
    },
    transformOrigin: {
      vertical: 'top',
      horizontal: 'left'
    },
    onClose: closePopover,
    disableRestoreFocus: true
  }, /*#__PURE__*/React.createElement(PopoverWrapper, null, /*#__PURE__*/React.createElement(ButtonPopoverContext.Provider, {
    value: {
      onClose: closePopover
    }
  }, props.popover))), props.tooltip && /*#__PURE__*/React.createElement(Popper, {
    open: Boolean(tooltipEl),
    anchorEl: tooltipEl,
    style: {
      zIndex: 10,
      pointerEvents: "none"
    }
  }, /*#__PURE__*/React.createElement(TooltipContent, null, props.tooltip)));
}

var Button$1 = React.memo(Button);

function _templateObject$5() {
  var data = _taggedTemplateLiteral(["\n\t", "\n\t& > .button + .normalButton {\n\t\tmargin-left: 4px;\n\t}\n"]);

  _templateObject$5 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper = styled.span(_templateObject$5(),
/* ensures that the NEXT button spaces itself, if it isn't an icon button */
"");

function ButtonRow(props) {
  if (props.children && props.buttons) {
    throw new Error("ButtonRow cannot receive both children and a buttons prop");
  }

  var children = React.useMemo(function () {
    if (props.children) {
      return props.children;
    }

    if (props.buttons) {
      return props.buttons.map(function (button, i) {
        return /*#__PURE__*/React.createElement(Button$1, _extends({
          key: i
        }, button));
      });
    }

    return null;
  }, [props.children, props.buttons]);

  if (children === null) {
    return null;
  }

  return /*#__PURE__*/React.createElement(StyledWrapper, {
    className: props.className
  }, children);
}

var ButtonRow$1 = React.memo(ButtonRow);

function _templateObject$6() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n\tfont-size: 14px;\n"]);

  _templateObject$6 = function _templateObject() {
    return data;
  };

  return data;
}
var DrawerContent = styled.div(_templateObject$6(), theme.fontFamily);

function Drawer(props) {
  var _useState = React.useState({
    open: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  React.useEffect(function () {
    if (props.open === true) {
      setState(_objectSpread2(_objectSpread2({}, state), {}, {
        open: true
      }));
    }
  }, [props.open]);

  var onExited = function onExited() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      open: false
    }));
  };

  return /*#__PURE__*/React__default.createElement(MUIDrawer, {
    anchor: "right",
    open: props.open,
    onClose: props.onClose,
    SlideProps: {
      onExited: onExited
    }
  }, state.open && /*#__PURE__*/React__default.createElement(DrawerContent, null, props.children));
}

var en = {
	apply: "Apply",
	cancel: "Cancel",
	clear: "Clear",
	date_from: "From",
	date_to: "To",
	filter___: "Filter...",
	keyword___: "Keyword...",
	label: "Label",
	load_more___: "Load more...",
	type: "Type",
	remove: "Remove",
	save: "Save",
	select: "Select"
};
var es = {
	apply: "Aplicar",
	cancel: "Cancel",
	save: "Salvar"
};
var common = {
	en: en,
	es: es
};

var common$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  en: en,
  es: es,
  'default': common
});

function addResourceBundle(_ref) {
  var prefix = _ref.prefix,
      bundle = _ref.bundle,
      namespace = _ref.namespace;

  for (var _i = 0, _Object$entries = Object.entries(bundle); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        _lang = _Object$entries$_i[0],
        data = _Object$entries$_i[1];

    defaulti18n.addResourceBundle(_lang, namespace, _defineProperty({}, prefix, data), true, false);
  }
}
/**
 * Adds a core resource bundle exposed when using the default i18n or when using the useMosaicSettings() context variant.
 */

function addCoreResourceBundle(_ref2) {
  var prefix = _ref2.prefix,
      bundle = _ref2.bundle;
  addResourceBundle({
    prefix: prefix,
    bundle: bundle,
    namespace: "mosaic"
  });
}
var defaulti18n = i18next.createInstance();
defaulti18n.init({
  resources: {},
  lng: "en",
  fallbackLng: "en"
});
addCoreResourceBundle({
  prefix: "common",
  bundle: common$1
});

var MosaicContext = React.createContext({
  i18n: defaulti18n
});

function useMosaicTranslation() {
  var context = React.useContext(MosaicContext);

  var _useTranslation = reactI18next.useTranslation(context.i18n.options.ns[0], {
    i18n: context.i18n
  }),
      t = _useTranslation.t,
      i18n = _useTranslation.i18n;

  return {
    t: t,
    i18n: i18n
  };
}

function _templateObject$7() {
  var data = _taggedTemplateLiteral(["\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tpadding: 12px;\n\t}\n\t\n\t& > .left {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t& > .left > h1 {\n\t\tdisplay: inline;\n\t\tpadding: 0px 50px 0px 20px;\n\t\tmargin: 0;\n\t\tposition: relative;\n\t\ttop: -2px;\n\t}\n"]);

  _templateObject$7 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$1 = styled.div(_templateObject$7());

function DrawerTopBar(props) {
  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  return /*#__PURE__*/React__default.createElement(StyledWrapper$1, null, /*#__PURE__*/React__default.createElement("div", {
    className: "left"
  }, /*#__PURE__*/React__default.createElement(Button$1, {
    mIcon: CloseIcon,
    variant: "icon",
    color: "black",
    onClick: props.onClose
  }), /*#__PURE__*/React__default.createElement(H1, null, props.title)), /*#__PURE__*/React__default.createElement("div", {
    className: "right"
  }, /*#__PURE__*/React__default.createElement(ButtonRow$1, null, props.onCancel && /*#__PURE__*/React__default.createElement(Button$1, {
    label: t("mosaic:common.cancel"),
    color: "black",
    variant: "text",
    onClick: props.onCancel
  }), props.onSave && /*#__PURE__*/React__default.createElement(Button$1, {
    label: t("mosaic:common.save"),
    color: "blue",
    variant: "contained",
    onClick: props.onSave
  }), props.onApply && /*#__PURE__*/React__default.createElement(Button$1, {
    label: t("mosaic:common.apply"),
    color: "blue",
    variant: "contained",
    onClick: props.onApply
  }))));
}

function _templateObject$8() {
  var data = _taggedTemplateLiteral(["\n\t& {\n\t\tflex: 1;\n\t\tpadding: 12px;\n\t}\n\t\n\t&.background-gray {\n\t\tbackground: #FAFBFC;\n\t}\n"]);

  _templateObject$8 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv = styled.div(_templateObject$8());

function DrawerBottom(props) {
  return /*#__PURE__*/React__default.createElement(StyledDiv, {
    className: "\n\t\t\t".concat(props.background ? "background-".concat(props.background) : "", "\n\t\t")
  }, props.children);
}

function _templateObject$9() {
  var data = _taggedTemplateLiteral(["\n\twidth: 600px;\n"]);

  _templateObject$9 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$1 = styled.div(_templateObject$9());

function DrawerContent$1(props) {
  return /*#__PURE__*/React__default.createElement(StyledDiv$1, null, /*#__PURE__*/React__default.createElement(DrawerTopBar, {
    title: props.title,
    onSave: props.onSave,
    onApply: props.onApply,
    onClose: props.onClose,
    onCancel: props.onCancel
  }), /*#__PURE__*/React__default.createElement(DrawerBottom, {
    background: props.background
  }, props.children));
}

function _templateObject$a() {
  var data = _taggedTemplateLiteral(["\n\t& .font16 {\n\t\tfont-size: 16px;\n\t}\n"]);

  _templateObject$a = function _templateObject() {
    return data;
  };

  return data;
}
var StyledForm = styled.form(_templateObject$a());
var InputLabelProps = {
  className: "font16"
};
var inputProps = {
  className: "font16"
};
var classes = {
  label: "font16"
};

function DataViewViewSaveDrawerContent(props) {
  var _useState = React.useState(_objectSpread2(_objectSpread2({}, props.data), {}, {
    type: props.allowSharedViewSave === true ? props.data.type : "mine"
  })),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  var onSave = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return props.onSave(_objectSpread2({}, state));

            case 2:
              props.onClose();

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function onSave() {
      return _ref.apply(this, arguments);
    };
  }();

  var onSubmit = function onSubmit(event) {
    event.preventDefault();
    onSave();
  };

  var handleChange = function handleChange(name) {
    return function (event) {
      setState(_objectSpread2(_objectSpread2({}, state), {}, _defineProperty({}, name, event.target.value)));
    };
  };

  var handleSwitch = function handleSwitch(name) {
    return function (event) {
      setState(_objectSpread2(_objectSpread2({}, state), {}, {
        type: event.target.checked ? "shared" : "mine"
      }));
    };
  };

  return /*#__PURE__*/React__default.createElement(DrawerContent$1, {
    title: t("mosaic:DataView.save_view"),
    onSave: onSave,
    onClose: props.onClose,
    onCancel: props.onClose,
    background: "gray"
  }, /*#__PURE__*/React__default.createElement(StyledForm, {
    onSubmit: onSubmit,
    autoComplete: "off"
  }, /*#__PURE__*/React__default.createElement(FormGroup, {
    row: true
  }, /*#__PURE__*/React__default.createElement(TextField, {
    autoFocus: true,
    id: "label",
    label: t("mosaic:common.label"),
    value: state.label,
    onChange: handleChange("label"),
    fullWidth: true,
    required: true,
    variant: "filled",
    InputLabelProps: InputLabelProps,
    inputProps: inputProps
  })), props.allowSharedViewSave && /*#__PURE__*/React__default.createElement(FormGroup, {
    row: true
  }, /*#__PURE__*/React__default.createElement(FormControl, {
    margin: "normal"
  }, /*#__PURE__*/React__default.createElement(FormControlLabel, {
    classes: classes,
    control: /*#__PURE__*/React__default.createElement(Switch, {
      checked: state.type === "shared",
      onChange: handleSwitch(),
      value: "what",
      color: "primary"
    }),
    label: t("mosaic:DataView.show_for_all_users")
  })))));
}

function DataViewViewSaveDrawer(props) {
  return /*#__PURE__*/React__default.createElement(Drawer, {
    open: props.open,
    onClose: props.onClose
  }, /*#__PURE__*/React__default.createElement(DataViewViewSaveDrawerContent, {
    data: props.data,
    onClose: props.onClose,
    onSave: props.onSave,
    allowSharedViewSave: props.allowSharedViewSave
  }));
}

var startingState = {
  options: undefined,
  loading: true,
  formOpen: false,
  formData: {}
};

function DataViewViewDrawerContent(props) {
  var _useState = React.useState(_objectSpread2({}, startingState)),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  React.useEffect(function () {
    function getOptions() {
      return _getOptions.apply(this, arguments);
    }

    function _getOptions() {
      _getOptions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var results;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return props.onGetOptions();

              case 2:
                results = _context.sent;
                setState(_objectSpread2(_objectSpread2({}, state), {}, {
                  loading: false,
                  options: results
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _getOptions.apply(this, arguments);
    }

    getOptions();
  }, [state.loading]);

  var closeForm = function closeForm() {
    setState(_objectSpread2({}, startingState));
  };

  var canAct = function canAct(row) {
    if (row.type === "default") {
      return false;
    } else if (!props.allowSharedViewSave) {
      return row.type === "mine";
    } else {
      return true;
    }
  };

  var DataViewConfig = {
    primaryActions: [{
      name: "select",
      variant: "text",
      label: t("mosaic:common.select"),
      color: "blue",
      onClick: function () {
        var _onClick = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref) {
          var data;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  data = _ref.data;
                  _context2.next = 3;
                  return props.onChange(data);

                case 3:
                  props.onClose();

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function onClick(_x) {
          return _onClick.apply(this, arguments);
        }

        return onClick;
      }()
    }, {
      name: "edit",
      show: function show(_ref2) {
        var row = _ref2.row;
        return canAct(row);
      },
      variant: "icon",
      color: "blue",
      mIcon: CreateIcon,
      onClick: function onClick(_ref3) {
        var data = _ref3.data;
        setState(_objectSpread2(_objectSpread2({}, state), {}, {
          formOpen: true,
          formData: data
        }));
      }
    }],
    additionalActions: [{
      name: "remove",
      show: function show(_ref4) {
        var row = _ref4.row;
        return canAct(row);
      },
      label: t("mosaic:common.remove"),
      onClick: function () {
        var _onClick2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref5) {
          var data;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  data = _ref5.data;
                  _context3.next = 3;
                  return props.onRemove(data);

                case 3:
                  setState(_objectSpread2(_objectSpread2({}, state), {}, {
                    options: undefined,
                    loading: true
                  }));

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        function onClick(_x2) {
          return _onClick2.apply(this, arguments);
        }

        return onClick;
      }()
    }],
    data: state.options,
    loading: state.loading,
    columns: [{
      name: "id",
      label: "ID"
    }, {
      name: "label",
      label: t("mosaic:common.label")
    }, {
      name: "type",
      label: t("mosaic:common.type"),
      style: {
        textTransform: "capitalize"
      }
    }],
    activeColumns: ["label", "type"]
  };
  return /*#__PURE__*/React__default.createElement(DrawerContent$1, {
    title: t("mosaic:DataView.saved_views"),
    onClose: props.onClose
  }, state.options && /*#__PURE__*/React__default.createElement(DataView, DataViewConfig), /*#__PURE__*/React__default.createElement(DataViewViewSaveDrawer, {
    open: state.formOpen,
    data: state.formData,
    onClose: closeForm,
    onSave: props.onSave,
    allowSharedViewSave: props.allowSharedViewSave
  }));
}

function DataViewViewDrawer(props) {
  return /*#__PURE__*/React__default.createElement(Drawer, {
    open: props.open,
    onClose: props.onClose
  }, /*#__PURE__*/React__default.createElement(DataViewViewDrawerContent, {
    onClose: props.onClose,
    onSave: props.onSave,
    onRemove: props.onRemove,
    onChange: props.onChange,
    onGetOptions: props.onGetOptions,
    allowSharedViewSave: props.allowSharedViewSave
  }));
}

function _templateObject$b() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: inline-flex;\n\talign-items: center;\n\t\n\t& > .icon {\n\t\tmargin-right: 3px;\n\t}\n"]);

  _templateObject$b = function _templateObject() {
    return data;
  };

  return data;
}
var ViewSpan = styled.span(_templateObject$b());

function DataViewViewControls(props) {
  var _useState = React.useState({
    viewOpen: false,
    saveOpen: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  var toggleViewDrawer = function toggleViewDrawer() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      viewOpen: !state.viewOpen
    }));
  };

  var toggleSaveDrawer = function toggleSaveDrawer() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      saveOpen: !state.saveOpen
    }));
  };

  var ViewLabel = /*#__PURE__*/React__default.createElement(ViewSpan, null, /*#__PURE__*/React__default.createElement(ViewQuiltIcon, {
    className: "icon"
  }), " ", props.savedView.label);
  var saveMenuItems = [{
    label: t("mosaic:DataView.save_as_new_view"),
    onClick: function onClick() {
      toggleSaveDrawer();
    }
  }, {
    label: t("mosaic:DataView.overwrite_current_view"),
    disabled: props.savedView.type === "default" || props.savedView.type === "shared" && !props.savedViewAllowSharedViewSave,
    onClick: function () {
      var _onClick = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return props.savedViewCallbacks.onSave(_objectSpread2(_objectSpread2({}, props.savedView), {}, {
                  state: props.savedViewState
                }));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function onClick() {
        return _onClick.apply(this, arguments);
      }

      return onClick;
    }()
  }];
  var savedViewData = {
    id: undefined,
    label: props.savedView.type === "default" ? "" : props.savedView.label,
    type: props.savedView.type === "default" ? "mine" : props.savedView.type,
    state: props.savedViewState
  };
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("div", {
    className: "right"
  }, /*#__PURE__*/React__default.createElement(ButtonRow$1, null, /*#__PURE__*/React__default.createElement(Button$1, {
    mIcon: ExpandMoreIcon,
    iconPosition: "right",
    label: t("mosaic:DataView.save_as"),
    variant: "outlined",
    size: "small",
    color: "blue",
    menuItems: saveMenuItems
  }), /*#__PURE__*/React__default.createElement(Button$1, {
    mIcon: ExpandMoreIcon,
    iconPosition: "right",
    label: ViewLabel,
    variant: "contained",
    size: "small",
    color: "lightBlue",
    onClick: toggleViewDrawer
  }))), /*#__PURE__*/React__default.createElement(DataViewViewSaveDrawer, {
    open: state.saveOpen,
    data: savedViewData,
    onClose: toggleSaveDrawer,
    onSave: props.savedViewCallbacks.onSave,
    allowSharedViewSave: props.savedViewAllowSharedViewSave
  }), /*#__PURE__*/React__default.createElement(DataViewViewDrawer, {
    open: state.viewOpen,
    onClose: toggleViewDrawer,
    onRemove: props.savedViewCallbacks.onRemove,
    onSave: props.savedViewCallbacks.onSave,
    onChange: props.savedViewCallbacks.onChange,
    onGetOptions: props.savedViewCallbacks.onGetOptions,
    allowSharedViewSave: props.savedViewAllowSharedViewSave
  }));
}

function _templateObject$c() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\twidth: 100%;\n\t\n\t& > .left {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\t\n\t& > .left > *:last-child {\n\t\tdisplay: flex;\n\t\tmargin-right: 0px;\n\t}\n\t\n\t& > .left > h1 {\n\t\tmargin-right: 20px;\n\t\tmargin-bottom: 0px;\n\t}\n"]);

  _templateObject$c = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$2 = styled.div(_templateObject$c());

function TitleBar(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "title",
      type: "string"
    }, {
      name: "buttons",
      type: "array"
    }, {
      name: "savedViewEnabled",
      type: "boolean"
    }, {
      name: "savedView",
      type: "object"
    }, {
      name: "savedViewState",
      type: "object"
    }, {
      name: "savedViewCallbacks",
      type: "object"
    }, {
      name: "savedViewAllowSharedViewSave",
      type: "boolean"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });
  var buttons = React.useMemo(function () {
    if (props.buttons === undefined) {
      return;
    }

    return props.buttons.map(function (button) {
      var name = button.name,
          buttonArgs = _objectWithoutProperties(button, ["name"]);

      buttonArgs.attrs = {
        "data-mosaic-id": "button_".concat(name)
      };
      return buttonArgs;
    });
  }, [props.buttons]);
  return /*#__PURE__*/React__default.createElement(StyledWrapper$2, null, /*#__PURE__*/React__default.createElement("div", {
    className: "left"
  }, props.title && /*#__PURE__*/React__default.createElement(H1, null, props.title), props.buttons && /*#__PURE__*/React__default.createElement(ButtonRow$1, {
    buttons: buttons
  })), props.savedViewEnabled && /*#__PURE__*/React__default.createElement(DataViewViewControls, {
    savedView: props.savedView,
    savedViewState: props.savedViewState,
    savedViewCallbacks: props.savedViewCallbacks,
    savedViewAllowSharedViewSave: props.savedViewAllowSharedViewSave
  }));
}

function MenuSelect(props) {
  var menuContext = React.useContext(MenuBaseContext);

  var options = _toConsumableArray(props.options);

  if (props.placeholder !== undefined) {
    options.unshift({
      label: /*#__PURE__*/React.createElement("i", null, props.placeholder),
      value: ""
    });
  }

  var menuItems = options.map(function (val) {
    var onClick = function onClick() {
      props.onChange(val.value);
      menuContext.onClose();
    };

    var selected = val.value === props.value;
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: val.value,
      mIcon: val.mIcon,
      color: val.color,
      label: val.label,
      selected: selected,
      onClick: onClick
    });
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, menuItems);
}

function _templateObject$d() {
  var data = _taggedTemplateLiteral(["\n\t& .labelIcon {\n\t\tfont-size: ", ";\n\t}\n"]);

  _templateObject$d = function _templateObject() {
    return data;
  };

  return data;
}
var StyledSpan = styled.span(_templateObject$d(), theme.iconFontSize);

function DataViewControlDisplay(props) {
  var activeDisplay = props.displayOptions.find(function (val) {
    return val.name === props.display;
  });
  var Icon = activeDisplay.mIcon;
  var options = props.displayOptions.map(function (val) {
    return {
      value: val.name,
      label: val.label,
      mIcon: val.mIcon
    };
  });
  var menuContent = /*#__PURE__*/React.createElement(MenuSelect, {
    options: options,
    onChange: props.onDisplayChange,
    value: props.display
  });
  return /*#__PURE__*/React.createElement(StyledSpan, null, /*#__PURE__*/React.createElement(Button$1, {
    variant: "text",
    color: "black",
    label: /*#__PURE__*/React.createElement(Icon, null),
    iconPosition: "right",
    size: "small",
    mIcon: ExpandMoreIcon,
    mIconColor: theme.colors.gray600,
    menuContent: menuContent
  }));
}

var DataViewControlDisplay$1 = React.memo(DataViewControlDisplay);

function _templateObject$e() {
  var data = _taggedTemplateLiteral(["\n\tfont-size: 14px;\n\tdisplay: inline-flex;\n\talign-items: center;\n\n\t& > input {\n\t\twidth: 40px;\n\t\tmargin: 0px 8px;\n\t}\n\n\t&.invalid > input {\n\t\toutline: ", " auto 1px;\n\t}\n\n\t& > .goButton {\n\t\tmargin-left: 8px;\n\t}\n"]);

  _templateObject$e = function _templateObject() {
    return data;
  };

  return data;
}
var PopoverDiv = styled.div(_templateObject$e(), theme.colors.red);

function DataViewPagerPopover(props) {
  var buttonPopoverContext = React.useContext(ButtonPopoverContext);

  var _useState = React.useState({
    currentPage: props.currentPage,
    invalid: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var onChange = function onChange(e) {
    var val = Number(e.currentTarget.value);
    var invalid = !Number.isInteger(val) || val <= 0 || val > props.totalPages;
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      invalid: invalid,
      currentPage: e.currentTarget.value
    }));
  };

  var onSubmit = function onSubmit() {
    if (state.invalid === true) {
      return;
    }

    buttonPopoverContext.onClose();
    props.onSkipChange({
      skip: (state.currentPage - 1) * props.limit
    });
  };

  var onKeyDown = function onKeyDown(e) {
    if (e.key === "Enter") {
      return onSubmit();
    }
  };

  return /*#__PURE__*/React.createElement(PopoverDiv, {
    className: "\n\t\t\t\t".concat(state.invalid ? "invalid" : "", "\n\t\t\t")
  }, /*#__PURE__*/React.createElement("span", null, "Page"), /*#__PURE__*/React.createElement("input", {
    type: "text",
    onKeyDown: onKeyDown,
    onChange: onChange,
    autoFocus: true
  }), /*#__PURE__*/React.createElement("span", null, "of ", props.totalPages), /*#__PURE__*/React.createElement(Button$1, {
    className: "goButton",
    color: "blue",
    variant: "contained",
    size: "small",
    onClick: onSubmit,
    label: "Go"
  }));
}

var DataViewPagerPopover$1 = React.memo(DataViewPagerPopover);

function _templateObject$f() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: inline-flex;\n\talign-items: center;\n\twhite-space: nowrap;\n\n\t& > .pagerText { line-height: 100%; }\n"]);

  _templateObject$f = function _templateObject() {
    return data;
  };

  return data;
}
var StyledSpan$1 = styled.span(_templateObject$f());

function DataViewPager(props) {
  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  var totalPages = Math.ceil(props.count / props.limit);
  var currentPage = (props.skip + props.limit) / props.limit;
  var startItem = props.skip + 1;
  var endItem = Math.min(props.skip + props.limit, props.count);

  var skipClick = function skipClick(skip) {
    return function () {
      props.onSkipChange({
        skip: skip
      });
    };
  };

  var previousDisabled = currentPage === 1;
  var nextDisabled = currentPage === totalPages;

  if (totalPages === 0) {
    return null;
  }

  return /*#__PURE__*/React.createElement(StyledSpan$1, null, /*#__PURE__*/React.createElement(Button$1, {
    color: "black",
    variant: "icon",
    size: "small",
    mIcon: ChevronLeftIcon,
    onClick: skipClick(props.skip - props.limit),
    disabled: previousDisabled
  }), /*#__PURE__*/React.createElement(Button$1, {
    color: "black",
    variant: "text",
    size: "small",
    tooltip: t("mosaic:DataView.jump_to_page"),
    label: "".concat(startItem, "-").concat(endItem, " of ").concat(props.count),
    popover: /*#__PURE__*/React.createElement(DataViewPagerPopover$1, {
      currentPage: currentPage,
      totalPages: totalPages,
      limit: props.limit,
      onSkipChange: props.onSkipChange
    })
  }), /*#__PURE__*/React.createElement(Button$1, {
    color: "black",
    variant: "icon",
    size: "small",
    mIcon: ChevronRightIcon,
    onClick: skipClick(props.skip + props.limit),
    disabled: nextDisabled
  }));
}

var DataViewPager$1 = React.memo(DataViewPager);

function DataViewLimit(props) {
  var onChange = React.useCallback(function (val) {
    props.onLimitChange({
      limit: Number(val)
    });
  }, [props.onLimitChange]);
  var options = React.useMemo(function () {
    return props.options.map(function (val) {
      return {
        label: val.toString(),
        value: val.toString()
      };
    });
  }, [props.options]);
  var menuContent = /*#__PURE__*/React.createElement(MenuSelect, {
    options: options,
    onChange: onChange,
    value: props.limit.toString()
  });
  return /*#__PURE__*/React.createElement(Button$1, {
    color: "black",
    label: props.limit.toString(),
    variant: "text",
    size: "small",
    iconPosition: "right",
    mIcon: ExpandMoreIcon,
    mIconColor: theme.colors.gray600,
    menuContent: menuContent
  });
}

var DataViewControlLimit = React.memo(DataViewLimit);

function _templateObject$g() {
  var data = _taggedTemplateLiteral(["\n\t&.checked {\n\t\tcolor: ", ";\n\t}\n\n\t& > span > svg {\n\t\tfont-size: 24px;\n\t}\n"]);

  _templateObject$g = function _templateObject() {
    return data;
  };

  return data;
}
var StyledCheckbox = styled(MUICheckbox)(_templateObject$g(), theme.colors.blue);

function Checkbox(props) {
  return /*#__PURE__*/React.createElement(StyledCheckbox, {
    className: "\n\t\t\t\t".concat(props.checked ? "checked" : "", "\n\t\t\t\t").concat(props.className ? props.className : "", "\n\t\t\t"),
    color: "default",
    edge: props.edge,
    checked: props.checked,
    onClick: props.onClick,
    disableRipple: true
  });
}

var Checkbox$1 = React.memo(Checkbox);

function useStateRef(state) {
  var ref = React.useRef();
  React.useEffect(function () {
    ref.current = state;
  });
  return ref;
}

function _templateObject$h() {
  var data = _taggedTemplateLiteral(["\n\t& > ul {\n\t\tpadding: 0;\n\t}\n\t\n\t& > ul > .listItem {\n\t\tpadding-top: 0px;\n\t\tpadding-bottom: 0px;\n\t}\n\t\n\t& > ul > .listItem > .listItemIcon {\n\t\tmin-width: auto;\n\t}\n"]);

  _templateObject$h = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$2 = styled.div(_templateObject$h());

function CheckboxList(props) {
  var checkedRef = useStateRef(props.checked);
  var handleToggle = React.useCallback(function (value) {
    return function () {
      // toggle the item in the array
      var newChecked = lodash.xor(checkedRef.current, [value]);
      props.onChange(newChecked);
    };
  }, [checkedRef, props.onChange]);
  var callbacks = React.useMemo(function () {
    return props.options.map(function (option) {
      return handleToggle(option.value);
    });
  }, [props.options, handleToggle]);
  return /*#__PURE__*/React.createElement(StyledDiv$2, null, /*#__PURE__*/React.createElement(List, {
    dense: true
  }, props.options.map(function (option, i) {
    var checked = props.checked.indexOf(option.value) !== -1;
    return /*#__PURE__*/React.createElement(ListItem, {
      className: "listItem",
      key: option.value,
      dense: true,
      button: true,
      onClick: callbacks[i]
    }, /*#__PURE__*/React.createElement(ListItemIcon, {
      className: "listItemIcon"
    }, /*#__PURE__*/React.createElement(Checkbox$1, {
      className: checked ? "checked" : "",
      edge: "start",
      checked: checked
    })), /*#__PURE__*/React.createElement(BodyText, null, option.label));
  })));
}

function _templateObject2$2() {
  var data = _taggedTemplateLiteral(["\n\t&.loading {\n\t\topacity: .5;\n\t\tpointer-events: none;\n\t}\n"]);

  _templateObject2$2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$i() {
  var data = _taggedTemplateLiteral(["\n\tmargin-bottom: -4px;\n\n\t& > .filterRow {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tflex-wrap: wrap;\n\t}\n\n\t& > .filterRow > * {\n\t\tmargin-right: 4px;\n\t\tmargin-bottom: 4px;\n\t}\n"]);

  _templateObject$i = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$3 = styled.div(_templateObject$i());
var PopoverDiv$1 = styled.div(_templateObject2$2());

function DataViewFilters(props) {
  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  var activeFilters = props.activeFilters || [];
  var primaryFilters = props.filters.filter(function (val) {
    return val.type === "primary";
  });
  var primaryFilterNames = primaryFilters.map(function (val) {
    return val.name;
  });
  var optionalFilters = props.filters.filter(function (val) {
    return val.type !== "primary";
  });
  var active = optionalFilters.filter(function (val) {
    return activeFilters.includes(val.name);
  });
  var options = optionalFilters.map(function (val) {
    return {
      label: val.label,
      value: val.name
    };
  });

  var onRemove = function onRemove(name) {
    return function () {
      var activeFilters = lodash.xor(props.activeFilters, [name]);
      onActiveFiltersChange(activeFilters);
    };
  };

  var onActiveFiltersChange = function onActiveFiltersChange(activeFilters) {
    var filter = lodash.pick(props.filter, [].concat(_toConsumableArray(primaryFilterNames), _toConsumableArray(activeFilters))); // we only want to pass a new filter obj if we have actually removed a key from it, to prevent unnecessary re-fetches of data

    var setFilter = Object.keys(filter).join(",") !== Object.keys(props.filter).join(",");
    props.onActiveFiltersChange({
      activeFilters: activeFilters,
      filter: setFilter === true ? filter : props.filter
    });
  };

  return /*#__PURE__*/React.createElement(StyledDiv$3, null, /*#__PURE__*/React.createElement("div", {
    className: "filterRow"
  }, primaryFilters.map(function (filter) {
    var Component = filter.component;
    return /*#__PURE__*/React.createElement(Component, {
      key: filter.name,
      label: filter.label,
      type: filter.type,
      args: filter.args || {},
      data: props.filter[filter.name] || {},
      onRemove: onRemove(filter.name),
      onChange: filter.onChange
    });
  }), optionalFilters.length > 0 && /*#__PURE__*/React.createElement(Button$1, {
    label: t("mosaic:DataView.more"),
    variant: "text",
    color: "black",
    size: "small",
    iconPosition: "right",
    mIcon: ExpandMoreIcon,
    mIconColor: theme.colors.gray600,
    popover: /*#__PURE__*/React.createElement(PopoverDiv$1, {
      className: "\n\t\t\t\t\t\t\t\t\t".concat(props.loading ? "loading" : "", "\n\t\t\t\t\t\t\t\t")
    }, /*#__PURE__*/React.createElement(CheckboxList, {
      options: options,
      checked: activeFilters,
      onChange: onActiveFiltersChange
    }))
  })), active.length > 0 && /*#__PURE__*/React.createElement("div", {
    className: "filterRow optionalFilters"
  }, active.map(function (filter) {
    var Component = filter.component;
    return /*#__PURE__*/React.createElement(Component, {
      key: filter.name,
      label: filter.label,
      type: filter.type,
      args: filter.args || {},
      data: props.filter[filter.name] || {},
      onRemove: onRemove(filter.name),
      onChange: filter.onChange
    });
  })));
}

function _templateObject$j() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: flex;\n\t\n\t& > div > h2 {\n\t\t", "\n\t\tpadding-left: 15px;\n\t\tmargin: 0 0 1rem 0;\n\t}\n\t\n\t& > .left {\n\t\tflex: 1;\n\t\tpadding-right: 20px;\n\t\twidth: 200px;\n\t}\n\t\n\t& > .left .listItem {\n\t\tmargin: 3px 0px;\n\t\tbackground: white;\n\t}\n\t\n\t& > .right {\n\t\tflex: 1;\n\t\twidth: 200px;\n\t}\n\t\n\t& > .right > .item {\n\t\tbackground: white;\n\t\tline-height: 42px;\n\t\tmargin: 3px 0px;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tpadding-left: 15px;\n\t}\n\t\n\t& > .right > .item > .buttons {\n\t\ttext-align: right;\n\t}\n"]);

  _templateObject$j = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$3 = styled.div(_templateObject$j(), theme.h2);

function GridColumnDrawerContent(props) {
  var _useState = React.useState({
    activeColumns: props.columns.map(function (val) {
      return val.name;
    })
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  var saveColumns = function saveColumns() {
    props.onClose();
    props.onChange(state.activeColumns);
  };

  var onColumnsChange = function onColumnsChange(data) {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      activeColumns: data
    }));
  };

  var orderClick = function orderClick(name, num) {
    return function () {
      // changing the order is actually just swapping one element for another
      // so we find the elements current position and it's new position and swap the two names
      var index = state.activeColumns.indexOf(name);
      var newIndex = index + num;
      var swapValue = state.activeColumns[newIndex];
      state.activeColumns[index] = swapValue;
      state.activeColumns[newIndex] = name;
      setState(_objectSpread2(_objectSpread2({}, state), {}, {
        activeColumns: _toConsumableArray(state.activeColumns)
      }));
    };
  };

  var columnOptions = props.allColumns.map(function (column) {
    return {
      label: column.label,
      value: column.name
    };
  }).sort(function (a, b) {
    return a.label.localeCompare(b.label);
  });
  return /*#__PURE__*/React__default.createElement(DrawerContent$1, {
    title: t("mosaic:DataView.table_settings"),
    background: "gray",
    onApply: saveColumns,
    onClose: props.onClose,
    onCancel: props.onClose
  }, /*#__PURE__*/React__default.createElement(StyledWrapper$3, null, /*#__PURE__*/React__default.createElement("div", {
    className: "left"
  }, /*#__PURE__*/React__default.createElement("h2", null, t("mosaic:DataView.columns")), /*#__PURE__*/React__default.createElement(CheckboxList, {
    options: columnOptions,
    checked: state.activeColumns,
    onChange: onColumnsChange
  })), /*#__PURE__*/React__default.createElement("div", {
    className: "right"
  }, /*#__PURE__*/React__default.createElement("h2", null, t("mosaic:DataView.column_order")), state.activeColumns.map(function (name, i) {
    var column = props.allColumns.find(function (val) {
      return val.name === name;
    });
    return /*#__PURE__*/React__default.createElement("div", {
      className: "item",
      key: column.name
    }, /*#__PURE__*/React__default.createElement("span", null, column.label), /*#__PURE__*/React__default.createElement("span", {
      className: "buttons"
    }, /*#__PURE__*/React__default.createElement(Button$1, {
      mIcon: ArrowDownwardIcon,
      variant: "icon",
      color: "black",
      disabled: i === state.activeColumns.length - 1,
      onClick: orderClick(column.name, 1)
    }), /*#__PURE__*/React__default.createElement(Button$1, {
      mIcon: ArrowUpwardIcon,
      variant: "icon",
      color: "black",
      disabled: i === 0,
      onClick: orderClick(column.name, -1)
    })));
  }))));
}

function GridColumnDrawer(props) {
  return /*#__PURE__*/React__default.createElement(Drawer, {
    open: props.open,
    onClose: props.onClose
  }, /*#__PURE__*/React__default.createElement(GridColumnDrawerContent, {
    columns: props.columns,
    allColumns: props.allColumns,
    onChange: props.onChange,
    onClose: props.onClose
  }));
}

function DataViewColumnControl(props) {
  var _useState = React.useState({
    open: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  var gearClick = function gearClick() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      open: !state.open
    }));
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button$1, {
    color: "black",
    label: t("mosaic:DataView.columns"),
    variant: "outlined",
    size: "small",
    mIcon: SettingsIcon,
    onClick: gearClick,
    iconPosition: "left"
  }), props.onChange !== undefined && /*#__PURE__*/React.createElement(GridColumnDrawer, {
    open: state.open,
    columns: props.columns,
    allColumns: props.allColumns,
    onChange: props.onChange,
    onClose: gearClick
  }));
}

function DataViewBulkActionsButtonsRow(props) {
  var validActions = props.bulkActions.filter(function (action) {
    return props.checkedAllPages === false && action.onClick || props.checkedAllPages === true && action.onAllClick;
  });
  var buttons = validActions.map(function (action) {
    var name = action.name,
        show = action.show,
        _onClick = action.onClick,
        onAllClick = action.onAllClick,
        buttonArgs = _objectWithoutProperties(action, ["name", "show", "onClick", "onAllClick"]);

    return _objectSpread2(_objectSpread2({}, buttonArgs), {}, {
      attrs: {
        "data-mosaic-id": "action_bulk_".concat(name)
      },
      onClick: function onClick() {
        if (props.checkedAllPages === true) {
          onAllClick();
        } else {
          var checkedData = props.data.filter(function (val, i) {
            return props.checked[i] === true;
          });

          _onClick({
            data: checkedData
          });
        }
      }
    });
  });
  return /*#__PURE__*/React.createElement(ButtonRow$1, {
    buttons: buttons
  });
}

var DataViewBulkActionsButtonsRow$1 = React.memo(DataViewBulkActionsButtonsRow);

function _templateObject$k() {
  var data = _taggedTemplateLiteral(["\n\ttext-align: center;\n\tfont-weight: normal;\n\tcolor: ", ";\n\tborder-bottom: ", ";\n"]);

  _templateObject$k = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$4 = styled.div(_templateObject$k(), theme.colors.gray600, theme.borders.lightGray);

function DataViewBulkAllBar(props) {
  return /*#__PURE__*/React.createElement(StyledDiv$4, null, props.checkedAllPages && /*#__PURE__*/React.createElement(React.Fragment, null, "All ", /*#__PURE__*/React.createElement("b", null, props.count), " records are selected."), !props.checkedAllPages && /*#__PURE__*/React.createElement(React.Fragment, null, "All ", /*#__PURE__*/React.createElement("b", null, props.rowCount), " records on this page are selected."), /*#__PURE__*/React.createElement(Button$1, {
    color: "blue",
    variant: "text",
    label: !props.checkedAllPages ? "Select all ".concat(props.count, " records") : "Clear selection",
    onClick: props.onCheckAllPagesClick
  }));
}

var DataViewBulkAllBar$1 = React.memo(DataViewBulkAllBar);

function _templateObject2$3() {
  var data = _taggedTemplateLiteral(["\n\tfont-size: 14px;\n\ttext-align: left;\n\tfont-weight: 400;\n\tpadding: 5px 0px;\n\theight: 40px;\n\tcolor: ", ";\n\tposition: sticky;\n\ttop: 0;\n\tz-index: 2;\n\tbackground-color: ", ";\n\twhite-space: nowrap;\n\n\t", "\n\t&:after {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tborder-bottom: ", ";\n\t\tpointer-events: none;\n\t}\n\t\n\t& > .columnHeader {\n\t\tdisplay: inline-flex;\n\t\talign-items: center;\n\t}\n\n\t&.paddingRight {\n\t\tpadding-right: 12px;\n\t}\n\n\t&.paddingLeft {\n\t\tpadding-left: 12px;\n\t}\n\n\t&.sortable > .columnHeader {\n\t\tcursor: pointer;\n\t}\n\t\n\t& > .columnHeader > .icon {\n\t\tvisibility: hidden;\n\t\tfont-size: 18px;\n\t\tmargin-left: 0.25rem;\n\t\tmargin-top: 1px;\n\t}\n\t\n\t&.active {\n\t\tcolor: ", ";\n\t\tfont-weight: 700;\n\t}\n\n\t&.active:after {\n\t\tborder-bottom: 1px solid ", ";\n\t}\n\t\n\t&.active > .columnHeader > .icon {\n\t\tvisibility: visible;\n\t}\n\t\n\t&.active > .columnHeader:hover > .icon {\n\t\tcolor: black;\n\t}\n\t\n\t& > .columnHeader:hover > .icon {\n\t\tvisibility: visible;\n\t\tcolor: ", ";\n\t}\n\t\n\t&.bulk {\n\t\twidth: 52px;\n\t}\n"]);

  _templateObject2$3 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$l() {
  var data = _taggedTemplateLiteral(["\n\ttext-align: left;\n"]);

  _templateObject$l = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$4 = styled.thead(_templateObject$l());
var StyledTh = styled.th(_templateObject2$3(), theme.colors.gray700, theme.colors.gray200,
/* Borders on sticky elements don't carry through, so we put them on the :after element */
"", theme.borders.gray200, theme.colors.gray800, theme.colors.gray800, theme.colors.gray600);

function flipDir(sort) {
  return sort === "asc" ? "desc" : "asc";
}

function GridTHead(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "checked",
      type: "array",
      required: true
    }, {
      name: "checkedAllPages",
      type: "boolean",
      required: true
    }, {
      name: "bulkActions",
      type: "array"
    }, {
      name: "columns",
      type: "array"
    }, {
      name: "allColumns",
      type: "array"
    }, {
      name: "data",
      type: "array"
    }, {
      name: "sort",
      type: "object"
    }, {
      name: "rowCount",
      type: "number"
    }, {
      name: "count",
      type: "number"
    }, {
      name: "onSortChange",
      type: "function"
    }, {
      name: "onCheckAllClick",
      type: "function"
    }, {
      name: "onCheckAllPagesClick",
      type: "function"
    }, {
      name: "onColumnsChange",
      type: "function"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  var allChecked = props.checked.length > 0 && props.checked.every(function (val) {
    return val === true;
  });
  var anyChecked = props.checked.length > 0 && props.checked.some(function (val) {
    return val === true;
  });
  var columnCount = (props.bulkActions ? 1 : 0) + 1 + props.columns.length; // To show the bulkAll header we need bulkActions/rowCount/count, more rows than are visible, at least one registered onAllClick, and all checkboxes selected

  var showBulkAll = props.bulkActions && props.rowCount > 0 && props.count > props.rowCount && props.bulkActions.some(function (action) {
    return action.onAllClick !== undefined;
  }) && allChecked;
  return /*#__PURE__*/React__default.createElement(StyledWrapper$4, null, /*#__PURE__*/React__default.createElement("tr", null, props.bulkActions && /*#__PURE__*/React__default.createElement(StyledTh, {
    key: "_bulk",
    className: "bulk"
  }, /*#__PURE__*/React__default.createElement(Checkbox$1, {
    checked: allChecked,
    onClick: props.onCheckAllClick
  })), props.bulkActions && anyChecked && /*#__PURE__*/React__default.createElement(StyledTh, {
    key: "_bulk_actions",
    colSpan: props.columns.length + 1
  }, /*#__PURE__*/React__default.createElement(DataViewBulkActionsButtonsRow$1, {
    data: props.data,
    checked: props.checked,
    checkedAllPages: props.checkedAllPages,
    bulkActions: props.bulkActions
  })), !anyChecked && /*#__PURE__*/React__default.createElement(StyledTh, {
    key: "_actions",
    className: "\n\t\t\t\t\t\tpaddingRight\n\t\t\t\t\t\t".concat(!props.bulkActions ? "paddingLeft" : "", "\n\t\t\t\t\t")
  }, props.onColumnsChange !== undefined && /*#__PURE__*/React__default.createElement(DataViewColumnControl, {
    onChange: props.onColumnsChange,
    columns: props.columns,
    allColumns: props.allColumns
  }), // We need to indent the actions by 11px to align with the buttons underneath
  !props.onColumnsChange && /*#__PURE__*/React__default.createElement("span", {
    style: {
      paddingLeft: "11px"
    }
  }, t("mosaic:DataView.actions"))), !anyChecked && props.columns.map(function (column) {
    var onClick = function onClick() {
      props.onSortChange({
        name: column.name,
        dir: clickDir
      });
    };

    var active;
    var Icon;
    var clickDir;

    if (column.sortable) {
      active = props.sort.name === column.name;
      Icon = active && props.sort.dir === "desc" ? ArrowDownwardIcon : ArrowUpwardIcon;
      clickDir = active ? flipDir(props.sort.dir) : "asc";
    }

    return /*#__PURE__*/React__default.createElement(StyledTh, {
      key: column.name,
      className: "\n\t\t\t\t\t\t\t\t\t".concat(column.sortable ? "sortable" : "", "\n\t\t\t\t\t\t\t\t\t").concat(active ? "active" : "", "\n\t\t\t\t\t\t\t\t\tpaddingRight\n\t\t\t\t\t\t\t\t")
    }, /*#__PURE__*/React__default.createElement("span", {
      className: "columnHeader",
      onClick: column.sortable ? onClick : undefined
    }, column.label, column.sortable && /*#__PURE__*/React__default.createElement(Icon, {
      className: "icon"
    })));
  })), showBulkAll && /*#__PURE__*/React__default.createElement("tr", null, /*#__PURE__*/React__default.createElement("th", {
    colSpan: columnCount
  }, /*#__PURE__*/React__default.createElement(DataViewBulkAllBar$1, {
    rowCount: props.rowCount,
    count: props.count,
    checkedAllPages: props.checkedAllPages,
    onCheckAllPagesClick: props.onCheckAllPagesClick
  }))));
}

function _templateObject$m() {
  var data = _taggedTemplateLiteral(["\n\theight: 40px;\n\n\t", "\n\t&:not(.expandCell) {\n\t\twidth: 1%;\n\t\twhite-space: nowrap;\n\t}\n\n\t", "\n\t&.paddingRight {\n\t\tpadding-right: 12px;\n\t}\n\n\t&.paddingLeft {\n\t\tpadding-left: 12px;\n\t}\n\n\t&.bold {\n\t\tfont-weight: bold;\n\t}\n\n\t&.italic {\n\t\tfont-style: italic;\n\t}\n\n\t&.strikeThrough {\n\t\ttext-decoration-line: line-through;\n\t}\n\n\t& > div.noWrap {\n\t\twhite-space: nowrap;\n\t}\n\n\t& > div.ellipsis {\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t}\n"]);

  _templateObject$m = function _templateObject() {
    return data;
  };

  return data;
}
var StyledTd = styled.td(_templateObject$m(),
/* This ensures that the td collapses to it's content size if it doesn't have the .expandCell class */
"",
/* If it has the .paddingRight class, add padding to the right of the cell */
"");

function GridTd(props) {
  var expandCell = props.expandCell !== undefined ? props.expandCell : false;
  var paddingRight = props.paddingRight !== undefined ? props.paddingRight : false;
  var paddingLeft = props.paddingLeft !== undefined ? props.paddingLeft : false;
  var bold = props.bold !== undefined ? props.bold : false;
  var italic = props.italic !== undefined ? props.italic : false;
  var strikeThrough = props.strikeThrough !== undefined ? props.strikeThrough : false;
  var noWrap = props.noWrap !== undefined ? props.noWrap : false;
  var ellipsis = props.ellipsis !== undefined ? props.ellipsis : false;
  var maxWidth = props.maxWidth !== undefined ? props.maxWidth : undefined;
  var textTransform = props.textTransform !== undefined ? props.textTransform : undefined;
  return /*#__PURE__*/React__default.createElement(StyledTd, {
    className: "\n\t\t\t\t".concat(expandCell ? "expandCell" : "", "\n\t\t\t\t").concat(paddingRight ? "paddingRight" : "", "\n\t\t\t\t").concat(paddingLeft ? "paddingLeft" : "", "\n\t\t\t\t").concat(bold ? "bold" : "", "\n\t\t\t\t").concat(italic ? "italic" : "", "\n\t\t\t\t").concat(strikeThrough ? "strikeThrough" : "", "\n\t\t\t")
  }, /*#__PURE__*/React__default.createElement(BodyText, {
    as: "div",
    className: "\n\t\t\t\t\t".concat(noWrap ? "noWrap" : "", "\n\t\t\t\t\t").concat(ellipsis ? "ellipsis" : "", "\n\t\t\t\t"),
    style: {
      maxWidth: maxWidth,
      textTransform: textTransform
    },
    title: ellipsis ? props.children : undefined
  }, props.children));
}

var GridTd$1 = React.memo(GridTd);

function filterAction(action, row) {
  if (action.show === undefined) {
    return true;
  } else if (typeof action.show === "boolean") {
    return action.show;
  } else if (typeof action.show === "function") {
    return action.show({
      row: row
    });
  } else {
    throw new Error("Action ".concat(action.name, ".show must be boolean or a function"));
  }
}

function DataViewActionsButtonRow(props) {
  var primaryActions = React.useMemo(function () {
    if (props.primaryActions === undefined) {
      return [];
    }

    return props.primaryActions.filter(function (action) {
      return filterAction(action, props.row);
    }).map(function (action, i) {
      var name = action.name,
          show = action.show,
          onClick = action.onClick,
          buttonArgs = _objectWithoutProperties(action, ["name", "show", "onClick"]);

      var newOnClick = function newOnClick() {
        onClick({
          data: props.row
        });
      };

      return /*#__PURE__*/React.createElement(Button$1, _extends({}, buttonArgs, {
        key: "primary_".concat(name),
        attrs: {
          "data-mosaic-id": "action_primary_".concat(name)
        },
        onClick: newOnClick
      }));
    });
  }, [props.primaryActions, props.row]);
  var additionalActions = React.useMemo(function () {
    if (props.additionalActions === undefined) {
      return [];
    }

    var additionalActions = props.additionalActions.filter(function (action) {
      return filterAction(action, props.row);
    }); // if no valid actions hide the dots

    if (additionalActions.length === 0) {
      return [];
    }

    return [/*#__PURE__*/React.createElement(Button$1, {
      key: "additional",
      color: "blue",
      variant: "icon",
      mIcon: MoreHorizIcon,
      attrs: {
        "data-mosaic-id": "additional_actions_dropdown"
      },
      menuItems: additionalActions.map(function (action) {
        var name = action.name,
            show = action.show,
            _onClick = action.onClick,
            menuArgs = _objectWithoutProperties(action, ["name", "show", "onClick"]);

        return _objectSpread2(_objectSpread2({}, menuArgs), {}, {
          attrs: {
            "data-mosaic-id": "action_additional_".concat(name)
          },
          onClick: function onClick() {
            _onClick({
              data: props.row
            });
          }
        });
      })
    })];
  }, [props.additionalActions, props.row]); // concat the buttons into a single row so that we have a single child allowing caching of the ButtonRow

  var buttons = React.useMemo(function () {
    return [].concat(_toConsumableArray(primaryActions), _toConsumableArray(additionalActions));
  }, [primaryActions, additionalActions]);

  if (buttons.length === 0) {
    return null;
  }

  return /*#__PURE__*/React.createElement(ButtonRow$1, null, buttons);
}

var DataViewActionsButtonRow$1 = React.memo(DataViewActionsButtonRow);

function GridTr(props) {
  return /*#__PURE__*/React__default.createElement("tr", null, props.bulkActions && /*#__PURE__*/React__default.createElement(GridTd$1, {
    key: "_bulk"
  }, /*#__PURE__*/React__default.createElement(Checkbox$1, {
    checked: props.checked === true,
    onClick: props.onCheckboxClick
  })), /*#__PURE__*/React__default.createElement(GridTd$1, {
    paddingRight: true,
    paddingLeft: !props.bulkActions
  }, /*#__PURE__*/React__default.createElement(DataViewActionsButtonRow$1, {
    primaryActions: props.primaryActions,
    additionalActions: props.additionalActions,
    row: props.row
  })), props.columns.map(function (column) {
    return /*#__PURE__*/React__default.createElement(GridTd$1, {
      key: column.name,
      className: column.style === "bold" ? "bold" : undefined,
      paddingRight: true,
      expandCell: true,
      bold: column.style && column.style.bold,
      italic: column.style && column.style.italic,
      strikeThrough: column.style && column.style.strikeThrough,
      noWrap: column.style && column.style.noWrap,
      ellipsis: column.style && column.style.ellipsis,
      maxWidth: column.style && column.style.maxWidth,
      textTransform: column.style && column.style.textTransform
    }, props.row[column.name]);
  }));
}

function _templateObject$n() {
  var data = _taggedTemplateLiteral(["\n\t& > tr {\n\t\tborder-bottom: ", ";\n\t}\n\t\n\t& > tr > td {\n\t\tpadding: 5px 0px;\n\t}\n\t\n\t& > tr > td.bold {\n\t\tfont-weight: 600;\n\t}\n\t\n\t& > tr > td > div > .transform_thumbnail {\n\t\tdisplay: block;\n\t}\n"]);

  _templateObject$n = function _templateObject() {
    return data;
  };

  return data;
}
var StyledTBody = styled.tbody(_templateObject$n(), theme.borders.lightGray);

function GridTBody(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "checked",
      type: "array",
      required: true
    }, {
      name: "columns",
      type: "array",
      required: true
    }, {
      name: "data",
      type: "array",
      required: true
    }, {
      name: "primaryActions",
      type: "array"
    }, {
      name: "additionalActions",
      type: "array"
    }, {
      name: "bulkActions",
      type: "array"
    }, {
      name: "onCheckboxClick",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var onCheckboxClick = function onCheckboxClick(i) {
    return function () {
      props.onCheckboxClick(i);
    };
  };

  return /*#__PURE__*/React__default.createElement(StyledTBody, null, props.data.map(function (row, i) {
    return /*#__PURE__*/React__default.createElement(GridTr, {
      key: i,
      row: row,
      bulkActions: props.bulkActions,
      primaryActions: props.primaryActions,
      additionalActions: props.additionalActions,
      onCheckboxClick: onCheckboxClick(i),
      checked: props.checked[i],
      columns: props.columns
    });
  }));
}

function transformColumn(row, column) {
  var data = row[column.column || column.name];

  if (data !== undefined && column.transforms !== undefined) {
    var _iterator = _createForOfIteratorHelper(column.transforms),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var transform = _step.value;

        if (data !== undefined) {
          data = transform({
            data: data,
            row: row
          });
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return data;
}
function transformRows(rows, columns) {
  var newRows = rows.map(function (row) {
    var newRow = _objectSpread2({}, row);

    columns.forEach(function (column) {
      newRow[column.name] = transformColumn(row, column);
    });
    return newRow;
  });
  return newRows;
}

function _templateObject$o() {
  var data = _taggedTemplateLiteral(["\n\twidth: 100%;\n\tborder-collapse: collapse;\n"]);

  _templateObject$o = function _templateObject() {
    return data;
  };

  return data;
}
var StyledTable = styled.table(_templateObject$o());

function DataViewDisplayList(props) {
  // todo validate props
  var activeColumns = React.useMemo(function () {
    return props.activeColumns || props.columns.map(function (val) {
      return val.name;
    });
  }, [props.activeColumns, props.columns]); // generate an array of columns based on the ones that are marked active

  var activeColumnObjs = React.useMemo(function () {
    return activeColumns.map(function (name) {
      var column = props.columns.find(function (val) {
        return val.name === name;
      });
      return column;
    });
  }, [activeColumns, props.columns]); // execute the transforms in the rows

  var transformedData = React.useMemo(function () {
    return transformRows(props.data, activeColumnObjs);
  }, [props.data, activeColumnObjs]);
  return /*#__PURE__*/React.createElement(StyledTable, null, /*#__PURE__*/React.createElement(GridTHead, {
    checked: props.checked,
    checkedAllPages: props.checkedAllPages,
    columns: activeColumnObjs,
    allColumns: props.columns,
    data: transformedData,
    bulkActions: props.bulkActions,
    sort: props.sort,
    count: props.count,
    rowCount: props.rowCount,
    onSortChange: props.onSortChange,
    onCheckAllClick: props.onCheckAllClick,
    onCheckAllPagesClick: props.onCheckAllPagesClick,
    onColumnsChange: props.onColumnsChange
  }), /*#__PURE__*/React.createElement(GridTBody, {
    checked: props.checked,
    columns: activeColumnObjs,
    data: transformedData,
    bulkActions: props.bulkActions,
    additionalActions: props.additionalActions,
    primaryActions: props.primaryActions,
    onCheckboxClick: props.onCheckboxClick
  }));
}

function _templateObject$p() {
  var data = _taggedTemplateLiteral(["\n\t", "\n\t& > .directionButton svg { font-size: 20px; }\n"]);

  _templateObject$p = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$5 = styled.div(_templateObject$p(),
/* The arrow is comically large without this */
"");

function DataViewDisplayGridSortControl(props) {
  var sortColumns = React.useMemo(function () {
    return props.columns.filter(function (val) {
      return val.sortable === true;
    });
  }, [props.columns]);
  var labelOptions = React.useMemo(function () {
    return sortColumns.map(function (val) {
      return {
        label: val.label,
        value: val.name
      };
    });
  }, [sortColumns]);
  var activeColumn = labelOptions.find(function (val) {
    return val.value === props.sort.name;
  });
  var Icon = props.sort.dir === "asc" ? ArrowUpwardIcon : ArrowDownwardIcon;
  var onColumnChange = React.useCallback(function (name) {
    props.onSortChange({
      name: name,
      dir: props.sort.dir
    });
  }, [props.sort, props.onSortChange]);
  var onDirectionChange = React.useCallback(function (dir) {
    var newDir = props.sort.dir === "asc" ? "desc" : "asc";
    props.onSortChange({
      name: props.sort.name,
      dir: newDir
    });
  }, [props.sort, props.onSortChange]);
  return /*#__PURE__*/React.createElement(StyledDiv$5, null, /*#__PURE__*/React.createElement(Button$1, {
    label: activeColumn.label,
    variant: "text",
    color: "black",
    size: "small",
    menuContent: /*#__PURE__*/React.createElement(MenuSelect, {
      options: labelOptions,
      value: props.sort.name,
      onChange: onColumnChange
    })
  }), /*#__PURE__*/React.createElement(Button$1, {
    className: "directionButton",
    variant: "icon",
    color: "black",
    size: "small",
    mIcon: Icon,
    onClick: onDirectionChange
  }));
}

var DataViewDisplayGridSortControl$1 = React.memo(DataViewDisplayGridSortControl);

function _templateObject$q() {
  var data = _taggedTemplateLiteral(["\n\t& > .topRow {\n\t\tmargin-bottom: 4px;\n\t\tposition: sticky;\n\t\ttop: 0;\n\t\tz-index: 1;\n\t\tbackground: white;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tbackground: ", ";\n\t}\n\n\t& > .topRowBulkAll {\n\t\tmargin-bottom: 5px;\n\t}\n\n\t& > .grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(5, 1fr);\n\t\tgrid-column-gap: 8px;\n\t\tgrid-row-gap: 20px;\n\t}\n\t\n\t& > .grid > .cell {\n\t\tmin-width: 0;\n\t}\n\t\n\t& > .grid > .cell.checked > .image > .checkboxContainer {\n\t\topacity: 1;\n\t}\n\t\n\t& > .grid > .cell.checked > .image > .checkboxContainer > .mask {\n\t\topacity: 1;\n\t\tborder: 2px solid rgba(255, 255, 255, .5);\n\t\tmargin: 6px;\n\t}\n\t\n\t& > .grid > .cell > img {\n\t\tmax-width: 100%;\n\t\tmin-width: 100%;\n\t}\n\t\n\t& > .grid > .cell h2 {\n\t\tmargin: 0;\n\t\tfont-size: 14px;\n\t\tfont-weight: normal;\n\t\twhite-space: nowrap;\n\t\ttext-overflow: ellipsis;\n\t\toverflow: hidden;\n\t}\n\t\n\t& > .grid > .cell h3 {\n\t\tmargin: 0;\n\t\tfont-weight: normal;\n\t\tfont-size: 12px;\n\t\tcolor: ", ";\n\t}\n\t\n\t& > .grid > .cell .image {\n\t\tposition: relative;\n\t}\n\t\n\t& > .grid > .cell > .image > .checkboxContainer {\n\t\topacity: 0;\n\t\tposition: absolute;\n\t\ttop: 0px;\n\t\tleft: 0px;\n\t\ttransition: opacity 150ms;\n\t}\n\t\n\t& > .grid > .cell > .image:hover > .checkboxContainer {\n\t\topacity: 1;\n\t}\n\t\n\t& > .grid > .cell > .image > .checkboxContainer > .mask {\n\t\tposition: absolute;\n\t\twidth: 18px;\n\t\theight: 18px;\n\t\tleft: 4px;\n\t\ttop: 4px;\n\t\tmargin: 8px;\n\t\tbackground: white;\n\t\tborder-radius: 3px;\n\t\topacity: .8;\n\t}\n\t\n\t& > .grid > .cell .image img {\n\t\twidth: 100%;\n\t}\n\t\n\t& > .grid > .cell .info {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmax-width: 100%;\n\t}\n\t\n\t& > .grid > .cell > .info > .left {\n\t\tmin-width: 0;\n\t}\n\t\n\t& > .grid > .cell > .info > .right {\n\t\tflex-shrink: 0;\n\t}\n"]);

  _templateObject$q = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$6 = styled.div(_templateObject$q(), theme.colors.gray200, theme.colors.gray500);

function DataViewDisplayGrid(props) {
  // TODO VALIDATE PROPS
  if (!props.gridColumnsMap) {
    throw new Error("You must specify gridColumnsMap in order to use the grid view.");
  } // execute the transforms in the rows


  var transformedData = React.useMemo(function () {
    return transformRows(props.data, props.columns);
  }, [props.data, props.columns]);

  var checkboxClick = function checkboxClick(i) {
    return function () {
      props.onCheckboxClick(i);
    };
  };

  var allChecked = props.checked.length > 0 && props.checked.every(function (val) {
    return val === true;
  });
  var anyChecked = props.checked.length > 0 && props.checked.some(function (val) {
    return val === true;
  });
  var hasTopRow = props.bulkActions !== undefined || props.onSortChange !== undefined;
  var hasSortControl = props.onSortChange !== undefined && props.sort !== undefined; // To show the bulkAll header we need bulkActions/rowCount/count, more rows than are visible, at least one registered onAllClick, and all checkboxes selected

  var showBulkAll = props.bulkActions && props.rowCount > 0 && props.count > props.rowCount && props.bulkActions.some(function (action) {
    return action.onAllClick !== undefined;
  }) && allChecked;
  return /*#__PURE__*/React.createElement(StyledDiv$6, null, hasTopRow && /*#__PURE__*/React.createElement("div", {
    className: "topRow"
  }, /*#__PURE__*/React.createElement("div", {
    className: "left"
  }, props.bulkActions && /*#__PURE__*/React.createElement(Checkbox$1, {
    checked: allChecked,
    onClick: props.onCheckAllClick
  }), props.bulkActions && anyChecked && /*#__PURE__*/React.createElement(DataViewBulkActionsButtonsRow$1, {
    data: props.data,
    checked: props.checked,
    bulkActions: props.bulkActions,
    checkedAllPages: props.checkedAllPages
  })), hasSortControl && /*#__PURE__*/React.createElement("div", {
    className: "right"
  }, /*#__PURE__*/React.createElement(DataViewDisplayGridSortControl$1, {
    columns: props.columns,
    sort: props.sort,
    onSortChange: props.onSortChange
  }))), showBulkAll && /*#__PURE__*/React.createElement("div", {
    className: "topRowBulkAll"
  }, /*#__PURE__*/React.createElement(DataViewBulkAllBar$1, {
    rowCount: props.rowCount,
    count: props.count,
    checkedAllPages: props.checkedAllPages,
    onCheckAllPagesClick: props.onCheckAllPagesClick
  })), /*#__PURE__*/React.createElement("div", {
    className: "grid"
  }, transformedData.map(function (row, i) {
    var image = row[props.gridColumnsMap.image];
    var primary = row[props.gridColumnsMap.primary];
    var secondary = row[props.gridColumnsMap.secondary];
    return /*#__PURE__*/React.createElement("div", {
      className: "\n\t\t\t\t\t\t\t\t\tcell\n\t\t\t\t\t\t\t\t\t".concat(props.checked[i] === true ? "checked" : "", "\n\t\t\t\t\t\t\t\t"),
      key: i
    }, image && /*#__PURE__*/React.createElement("div", {
      className: "image"
    }, props.bulkActions && /*#__PURE__*/React.createElement("div", {
      className: "checkboxContainer"
    }, /*#__PURE__*/React.createElement("div", {
      className: "mask"
    }), /*#__PURE__*/React.createElement(Checkbox$1, {
      className: "checkbox",
      checked: props.checked[i] === true,
      onClick: checkboxClick(i)
    })), image), /*#__PURE__*/React.createElement("div", {
      className: "info"
    }, /*#__PURE__*/React.createElement("div", {
      className: "left"
    }, primary && /*#__PURE__*/React.createElement("h2", null, primary), secondary && /*#__PURE__*/React.createElement("h3", null, secondary)), /*#__PURE__*/React.createElement("div", {
      className: "right"
    }, /*#__PURE__*/React.createElement(DataViewActionsButtonRow$1, {
      primaryActions: props.primaryActions,
      additionalActions: props.additionalActions,
      row: row
    }))));
  })));
}

var DataViewDisplayList$1 = {
  name: "list",
  label: "List",
  component: DataViewDisplayList,
  mIcon: FormatListBulletedIcon
};
var DataViewDisplayGrid$1 = {
  name: "grid",
  label: "Grid",
  component: DataViewDisplayGrid,
  mIcon: GridOnIcon
};

function _templateObject$r() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tfont-weight: 400;\n\tfont-size: 14px;\n\tdisplay: flex;\n\tflex-direction: column;\n\t\n\t& > .headerRow {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\t-ms-flex: 0 0 auto;\n\t\t-webkit-flex: 0 0 auto;\n\t\tflex: 0 0 auto;\n\t\tmargin-bottom: 8px;\n\t}\n\n\t& > .headerRow.title {\n\t\tmargin-left: 12px;\n\t}\n\t\n\t& > .headerRow > .right {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\talign-self: flex-end;\n\t}\n\n\t& > .viewContainer {\n\t\toverflow: auto;\n\t}\n\t\n\t&.loading {\n\t\topacity: .5;\n\t\tpointer-events: none;\n\t}\n\n\t&.sticky {\n\t\theight: 100%;\n\t}\n"]);

  _templateObject$r = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$5 = styled.div(_templateObject$r(), theme.fontFamily);

function DataView(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "title",
      type: "string"
    }, {
      name: "columns",
      type: "array",
      schema: {
        type: "object",
        schema: [{
          name: "name",
          type: "string",
          required: true
        }, {
          name: "column",
          type: "string"
        }, {
          name: "label",
          type: "string"
        }, {
          name: "style",
          type: "object",
          schema: [{
            name: "bold",
            type: "boolean"
          }, {
            name: "italic",
            type: "boolean"
          }, {
            name: "strikeThrough",
            type: "boolean"
          }, {
            name: "noWrap",
            type: "boolean"
          }, {
            name: "ellipsis",
            type: "boolean"
          }, {
            name: "maxWidth",
            type: "string"
          }, {
            name: "textTransform",
            type: "string"
          }],
          allowExtraKeys: false
        }, {
          name: "sortable",
          type: "boolean"
        }, {
          name: "transforms",
          type: "array",
          schema: {
            type: "function"
          }
        }],
        allowExtraKeys: false
      }
    }, {
      name: "filters",
      type: "array"
    }, {
      name: "filter",
      type: "object"
    }, {
      name: "activeFilters",
      type: "array",
      schema: {
        type: "string"
      }
    }, {
      name: "activeColumns",
      type: "array",
      schema: {
        type: "string"
      }
    }, {
      name: "primaryActions",
      type: "array"
    }, {
      name: "bulkActions",
      type: "array"
    }, {
      name: "additionalActions",
      type: "array"
    }, {
      name: "buttons",
      type: "array"
    }, {
      name: "display",
      type: "string"
    }, {
      name: "savedView",
      type: "object",
      schema: [{
        name: "id",
        type: "string"
      }, {
        name: "label",
        type: "string"
      }, {
        name: "type",
        type: "string",
        "enum": ["default", "shared", "mine"]
      }, {
        name: "state",
        type: "object"
      }],
      allowExtraKeys: false
    }, {
      name: "displayOptions",
      type: "array"
    }, {
      name: "data",
      type: "array"
    }, {
      name: "count",
      type: "number"
    }, {
      name: "sort",
      type: "object",
      schema: [{
        name: "name",
        type: "string"
      }, {
        name: "dir",
        type: "string",
        "enum": ["asc", "desc"]
      }],
      allowExtraKeys: false
    }, {
      name: "limit",
      type: "number"
    }, {
      name: "limitOptions",
      type: "array",
      schema: {
        type: "number"
      }
    }, {
      name: "skip",
      type: "number"
    }, {
      name: "loading",
      type: "boolean"
    }, {
      name: "sticky",
      type: "boolean"
    }, {
      name: "gridColumnsMap",
      type: "object"
    }, {
      name: "onSkipChange",
      type: "function"
    }, {
      name: "onLimitChange",
      type: "function"
    }, {
      name: "onSortChange",
      type: "function"
    }, {
      name: "onDisplayChange",
      type: "function"
    }, {
      name: "onActiveFiltersChange",
      type: "function"
    }, {
      name: "onColumnsChange",
      type: "function"
    }, {
      name: "onSavedViewSave",
      type: "function"
    }, {
      name: "onSavedViewChange",
      type: "function"
    }, {
      name: "onSavedViewRemove",
      type: "function"
    }, {
      name: "onSavedViewGetOptions",
      type: "function"
    }, {
      name: "savedViewAllowSharedViewSave",
      type: "boolean"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  }); // declare the hooks

  var _useState = React.useState({
    checked: [],
    checkedAllPages: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1]; // set defaults


  var display = props.display || "list";
  var displayOptions = React.useMemo(function () {
    return props.displayOptions || [display];
  }, [display, props.displayOptions]);
  var displayControlEnabled = props.onDisplayChange !== undefined && displayOptions.length > 1;
  var savedViewEnabled = props.onSavedViewSave !== undefined && props.onSavedViewChange !== undefined && props.onSavedViewGetOptions !== undefined && props.onSavedViewRemove !== undefined && props.savedView !== undefined;

  var onCheckAllClick = function onCheckAllClick() {
    var allChecked = state.checked.every(function (val) {
      return val === true;
    });
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      checked: state.checked.map(function (val) {
        return !allChecked;
      }),
      checkedAllPages: false
    }));
  };

  var onCheckboxClick = function onCheckboxClick(i) {
    var newChecked = _toConsumableArray(state.checked);

    newChecked[i] = !newChecked[i];
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      checked: newChecked,
      checkedAllPages: false
    }));
  };

  var onCheckAllPagesClick = function onCheckAllPagesClick() {
    // if the checkedAllPages was previously clicked we also uncheck all of the checkboxes
    var checked = state.checkedAllPages ? state.checked.map(function (val) {
      return false;
    }) : state.checked;
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      checked: checked,
      checkedAllPages: !state.checkedAllPages
    }));
  };

  React.useEffect(function () {
    if (props.data && viewContainerRef.current) {
      // on data change scroll to the top
      viewContainerRef.current.scrollTo(0, 0);
    }
  }, [props.data, props.display]);
  React.useEffect(function () {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      checked: props.data.map(function (val) {
        return false;
      })
    }));
  }, [props.data]);
  var displayOptionsFull = React.useMemo(function () {
    return displayOptions.map(function (val) {
      if (val === "list") {
        return DataViewDisplayList$1;
      } else if (val === "grid") {
        return DataViewDisplayGrid$1;
      } else if (typeof val === "string") {
        throw new Error("Unknown view option");
      } else {
        return val;
      }
    });
  }, [displayOptions]);
  var activeDisplay = displayOptionsFull.find(function (val) {
    return val.name === display;
  });

  if (activeDisplay === undefined) {
    throw new Error("Display '".concat(display, "' is not valid in the passed displayOptions."));
  }

  var Display = activeDisplay.component;
  var savedViewState = {
    limit: props.limit,
    sort: props.sort,
    display: props.display,
    filter: props.filter,
    activeFilters: props.activeFilters,
    activeColumns: props.activeColumns
  };
  var savedViewCallbacks = {
    onSave: props.onSavedViewSave,
    onChange: props.onSavedViewChange,
    onGetOptions: props.onSavedViewGetOptions,
    onRemove: props.onSavedViewRemove
  };
  var limitOptions = React.useMemo(function () {
    return props.limitOptions || [25, 50, 100];
  }, [props.limitOptions]);
  var viewContainerRef = React.useRef(null);
  return /*#__PURE__*/React.createElement(StyledWrapper$5, {
    className: "\n\t\t\t".concat(props.loading ? "loading" : "", "\n\t\t\t").concat(props.sticky ? "sticky" : "", "\n\t\t")
  }, /*#__PURE__*/React.createElement("div", {
    className: "headerRow title"
  }, /*#__PURE__*/React.createElement(TitleBar, {
    title: props.title,
    buttons: props.buttons,
    savedViewEnabled: savedViewEnabled,
    savedView: props.savedView,
    savedViewState: savedViewState,
    savedViewCallbacks: savedViewCallbacks,
    savedViewAllowSharedViewSave: props.savedViewAllowSharedViewSave !== undefined ? props.savedViewAllowSharedViewSave : false
  })), /*#__PURE__*/React.createElement("div", {
    className: "headerRow filters"
  }, /*#__PURE__*/React.createElement("div", {
    className: "left"
  }, props.filters && /*#__PURE__*/React.createElement(DataViewFilters, {
    loading: props.loading,
    filter: props.filter,
    filters: props.filters,
    activeFilters: props.activeFilters,
    onActiveFiltersChange: props.onActiveFiltersChange
  })), /*#__PURE__*/React.createElement("div", {
    className: "right"
  }, displayControlEnabled && /*#__PURE__*/React.createElement(DataViewControlDisplay$1, {
    display: display,
    displayOptions: displayOptionsFull,
    onDisplayChange: props.onDisplayChange
  }), props.onLimitChange !== undefined && /*#__PURE__*/React.createElement(DataViewControlLimit, {
    limit: props.limit,
    options: limitOptions,
    onLimitChange: props.onLimitChange
  }), props.onSkipChange !== undefined && /*#__PURE__*/React.createElement(DataViewPager$1, {
    limit: props.limit,
    skip: props.skip,
    count: props.count,
    onSkipChange: props.onSkipChange
  }))), /*#__PURE__*/React.createElement("div", {
    ref: viewContainerRef,
    className: "\n\t\t\t\t\tviewContainer\n\t\t\t\t"
  }, /*#__PURE__*/React.createElement(Display, {
    checked: state.checked,
    checkedAllPages: state.checkedAllPages,
    columns: props.columns,
    bulkActions: props.bulkActions,
    sort: props.sort,
    data: props.data,
    additionalActions: props.additionalActions,
    primaryActions: props.primaryActions,
    activeColumns: props.activeColumns,
    gridColumnsMap: props.gridColumnsMap,
    limit: props.limit,
    count: props.count,
    rowCount: props.data.length,
    onSortChange: props.onSortChange,
    onColumnsChange: props.onColumnsChange,
    onCheckAllClick: onCheckAllClick,
    onCheckboxClick: onCheckboxClick,
    onCheckAllPagesClick: onCheckAllPagesClick
  })), props.loading === false && !props.data.length && /*#__PURE__*/React.createElement("div", {
    className: "noResults"
  }, /*#__PURE__*/React.createElement("p", null, "No results were found.")));
}

var en$1 = {
	actions: "Actions",
	column_order: "Column Order",
	columns: "Columns",
	comparison: "Comparison",
	"default": "Default",
	default_view: "Default View",
	go: "Go",
	jump_to_page: "Jump to Page",
	label: "Label",
	mine: "Mine",
	more: "More",
	overwrite_current_view: "Overwrite Current View",
	page: "Page",
	remove: "Remove",
	save_as: "Save As",
	save_as_new_view: "Save as New View",
	save_view: "Save View",
	saved_views: "Saved Views",
	selected_options: "Selected Options",
	show_for_all_users: "Show for all Users",
	table_settings: "Table Settings",
	type: "Type"
};
var es$1 = {
	columns: "Columnas",
	default_view: "Vista predeterminada",
	jump_to_page: "Ir a la página",
	more: "Más",
	overwrite_current_view: "Sobrescribir vista actual",
	save_as: "Guardar como",
	save_as_new_view: "Guardar como nueva vista"
};
var DataViewLocales = {
	en: en$1,
	es: es$1
};

var localeData = /*#__PURE__*/Object.freeze({
  __proto__: null,
  en: en$1,
  es: es$1,
  'default': DataViewLocales
});

addCoreResourceBundle({
  prefix: "DataView",
  bundle: localeData
});

function _templateObject$s() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: flex;\n\talign-items: center;\n\n\t& > .icon {\n\t\tfont-size: 20px;\n\t}\n\n\t& > .dropdownIcon {\n\t\tcolor: ", ";\n\t\tmargin-left: 4px;\n\t\tmargin-right: -4px;\n\t}\n\n\t& > .removeIcon {\n\t\tmargin-left: 4px;\n\t\tmargin-right: -4px;\n\t\tcolor: black;\n\t\tbackground-color: ", "12;\n\t\tborder-radius: 20px;\n\t\tpadding: 3px;\n\t\tbox-sizing: border-box;\n\t}\n\n\t& > .removeIcon:hover {\n\t\tbackground-color: ", "45;\n\t}\n\n\t& > .filterLabel {\n\t\tfont-weight: ", ";\n\t\tmargin-right: 8px;\n\t}\n\n\t&.type_optional > * {\n\t\tcolor: ", ";\n\t}\n"]);

  _templateObject$s = function _templateObject() {
    return data;
  };

  return data;
}
var LabelWrapper = styled.div(_templateObject$s(), theme.colors.gray600, theme.colors.blue, theme.colors.blue, theme.fontWeight.normal, theme.colors.blue);

function DataViewPrimaryFilter(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "label",
      type: "string",
      required: true
    }, {
      name: "value",
      type: "string"
    }, {
      name: "type",
      type: "string",
      "enum": ["primary", "optional"],
      required: true
    }, {
      name: "onRemove",
      type: "function",
      required: true
    }, {
      name: "onClick",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var remove = function remove(e) {
    // stops the outer wrapping click handler from firing
    e.stopPropagation(); // call the passed in onRemove function

    props.onRemove();
  };

  var variant = props.type === "primary" ? "text" : "contained";
  var color = props.type === "primary" ? "black" : "lightBlue";
  var label = /*#__PURE__*/React__default.createElement(LabelWrapper, {
    className: "\n\t\t\t\ttype_".concat(props.type, "\n\t\t\t")
  }, /*#__PURE__*/React__default.createElement(BodyText, {
    className: "filterLabel"
  }, props.label, ":"), /*#__PURE__*/React__default.createElement(BodyText, {
    className: "filterValue"
  }, props.value || "Any"), /*#__PURE__*/React__default.createElement(ExpandMoreIcon, {
    className: "icon dropdownIcon"
  }), props.type === "optional" && /*#__PURE__*/React__default.createElement(CloseIcon, {
    className: "icon removeIcon",
    onClick: remove
  }));
  return /*#__PURE__*/React__default.createElement(Button$1, {
    color: color,
    variant: variant,
    size: "small",
    onClick: props.onClick,
    label: label
  });
}

function _templateObject$t() {
  var data = _taggedTemplateLiteral(["\n\t& {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tmargin-top: 1rem;\n\t}\n"]);

  _templateObject$t = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$6 = styled.div(_templateObject$t());

function DataViewFilterDropdownButtons(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "onClear",
      type: "function"
    }, {
      name: "onCancel",
      type: "function"
    }, {
      name: "onApply",
      type: "function"
    }, {
      name: "disableApply",
      type: "boolean"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  return /*#__PURE__*/React__default.createElement(StyledWrapper$6, null, /*#__PURE__*/React__default.createElement(ButtonRow$1, null, /*#__PURE__*/React__default.createElement(Button$1, {
    label: t("mosaic:common.clear"),
    color: "black",
    variant: "text",
    onClick: props.onClear
  })), /*#__PURE__*/React__default.createElement(ButtonRow$1, null, /*#__PURE__*/React__default.createElement(Button$1, {
    label: t("mosaic:common.cancel"),
    color: "black",
    variant: "text",
    onClick: props.onCancel
  }), /*#__PURE__*/React__default.createElement(Button$1, {
    label: t("mosaic:common.apply"),
    color: "blue",
    variant: "contained",
    onClick: props.onApply,
    disabled: props.disableApply !== undefined ? props.disableApply : false
  })));
}

function _templateObject$u() {
  var data = _taggedTemplateLiteral(["\n\t& > .inputRow {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\t\n\t& > .inputRow > .disabled {\n\t\tbackground: #eee;\n\t}\n\t\n\t& > .inputRow > .comparisonButton {\n\t\tmargin-top: 8px;\n\t\tmargin-bottom: 4px;\n\t\tmargin-left: 10px;\n\t}\n\t\n\t& .MuiOutlinedInput-root.Mui-focused fieldset {\n\t\tborder-color: ", ";\n\t}\n\n\t& .MuiInputBase-input {\n\t\tfont-size: 16px;\n\t}\n\t\n\t& .comparisonContainer {\n\t\tborder-left: 1px solid #ccc;\n\t\tmargin: 5px;\n\t\tpadding-left: 5px;\n\t\tflex-shrink: 0;\n\t}\n"]);

  _templateObject$u = function _templateObject() {
    return data;
  };

  return data;
}
var StyledContents = styled.div(_templateObject$u(), theme.colors.blue);
var existsComparisons = ["exists", "not_exists"];

function DataViewFilterTextDropdownContent(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "value",
      type: "string",
      required: true
    }, {
      name: "onChange",
      type: "function",
      required: true
    }, {
      name: "comparison",
      type: "string",
      required: true
    }, {
      name: "comparisons",
      type: "array"
    }, {
      name: "onClose",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useState = React.useState({
    value: props.value,
    comparison: props.comparison
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  var activeComparison = props.comparisons ? props.comparisons.find(function (val) {
    return val.value === state.comparison;
  }) : undefined;

  var onApply = function onApply() {
    var cleanValue = state.value.trim();

    if (existsComparisons.includes(state.comparison)) {
      // for these the value is not relevant
      props.onChange({
        comparison: state.comparison
      });
    } else if (cleanValue === "") {
      // if the state is empty we wipe the whole object
      props.onChange(undefined);
    } else {
      // set both values
      props.onChange({
        value: cleanValue,
        comparison: state.comparison
      });
    }

    props.onClose();
  };

  var onClear = function onClear() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      value: "",
      comparison: "equals"
    }));
  };

  var onInputChange = function onInputChange(event) {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      value: event.target.value
    }));
  };

  var onKeyPress = function onKeyPress(event) {
    if (event.key === "Enter") {
      onApply();
    }
  };

  var disabled = existsComparisons.includes(state.comparison);
  var comparisonButton;

  if (props.comparisons) {
    var menuItems = props.comparisons.map(function (comparison) {
      return {
        label: comparison.label,
        onClick: function onClick() {
          var stateChange = _objectSpread2({}, state); // for exists and not_exists we want to clear the value


          if (existsComparisons.includes(comparison.value) === true) {
            stateChange.value = "";
          }

          stateChange.comparison = comparison.value;
          setState(stateChange);
        }
      };
    });
    comparisonButton = /*#__PURE__*/React__default.createElement(Button$1, {
      className: "comparisonButton",
      label: activeComparison.label,
      variant: "text",
      color: "black",
      iconPosition: "right",
      mIcon: ExpandMoreIcon,
      menuItems: menuItems
    });
  }

  return /*#__PURE__*/React__default.createElement(StyledContents, null, /*#__PURE__*/React__default.createElement("div", {
    className: "inputRow"
  }, /*#__PURE__*/React__default.createElement(TextField, {
    autoFocus: true,
    className: disabled ? "disabled" : "",
    disabled: disabled,
    placeholder: t("mosaic:common.filter___"),
    margin: "dense",
    value: state.value,
    variant: "outlined",
    onChange: onInputChange,
    onKeyPress: onKeyPress
  }), comparisonButton), /*#__PURE__*/React__default.createElement(DataViewFilterDropdownButtons, {
    onApply: onApply,
    onClear: onClear,
    onCancel: props.onClose
  }));
}

function _templateObject$v() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tpadding: 10px;\n\tborder-radius: 8px;\n\tbackground: white;\n"]);

  _templateObject$v = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$7 = styled.div(_templateObject$v(), theme.fontFamily);

function DataViewFilterDropdown(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "anchorEl",
      type: "object"
    }, {
      name: "children",
      type: "object"
    }, {
      name: "onClose",
      type: "function"
    }, {
      name: "onEntered",
      type: "function"
    }, {
      name: "onExited",
      type: "function"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  }); // track whether the content of the dropdown should be visible

  var _useState = React.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      exists = _useState2[0],
      setExists = _useState2[1]; // if the anchorEl exists, we phase in


  React.useEffect(function () {
    if (Boolean(props.anchorEl) === true) {
      setExists(true);
    }
  }, [props.anchorEl]); // wait for the animation to complete before hiding

  var onExited = function onExited() {
    setExists(false);

    if (props.onExited) {
      props.onExited();
    }
  }; // avoid processing the content of the dropdown until we have been invoked


  if (exists === false) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement(Popover, {
    anchorEl: props.anchorEl,
    onClose: props.onClose,
    open: Boolean(props.anchorEl),
    TransitionProps: {
      onExited: onExited,
      onEntered: props.onEntered
    }
  }, /*#__PURE__*/React__default.createElement(StyledWrapper$7, null, props.children));
}

function _templateObject$w() {
  var data = _taggedTemplateLiteral(["\n\t\n"]);

  _templateObject$w = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$8 = styled.span(_templateObject$w());
var validComparisons = [{
  label: "Contains",
  value: "contains"
}, {
  label: "Not Contains",
  value: "not_contains"
}, {
  label: "Equals",
  value: "equals"
}, {
  label: "Not Equal",
  value: "not_equals"
}, {
  label: "Exists",
  value: "exists"
}, {
  label: "Not Exists",
  value: "not_exists"
}];
var validComparisonNames = validComparisons.map(function (val) {
  return val.value;
});
var comparisonMap = {
  equals: "",
  not_equals: "!=",
  contains: "~",
  not_contains: "!~"
};

function DataViewFilterText(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "label",
      type: "string",
      required: true
    }, {
      name: "data",
      type: "object",
      schema: [{
        name: "value",
        type: "string"
      }, {
        name: "comparison",
        type: "string",
        "enum": validComparisonNames
      }],
      allowExtraKeys: false,
      required: true
    }, {
      name: "type",
      type: "string",
      required: true
    }, {
      name: "args",
      type: "object",
      schema: [{
        name: "comparisons",
        type: "array",
        schema: {
          type: "string",
          "enum": validComparisonNames
        }
      }],
      allowExtraKeys: false
    }, {
      name: "onRemove",
      type: "function",
      required: true
    }, {
      name: "onChange",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useState = React.useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      anchorEl = _useState2[0],
      setAnchorEl = _useState2[1];

  var comparison = props.data.comparison || "equals";
  var value = props.data.value || "";

  var onClick = function onClick(event) {
    setAnchorEl(event.currentTarget);
  };

  var onClose = function onClose() {
    setAnchorEl(null);
  }; // based on the state lets figure out what our value should be


  var valueString;

  if (comparison === "exists") {
    valueString = "EXISTS";
  } else if (comparison === "not_exists") {
    valueString = "NOT EXISTS";
  } else if (value === "") {
    valueString = "";
  } else {
    valueString = "".concat(comparisonMap[comparison], " \"").concat(value, "\"");
  } // filter the valid comparisons based on what the developer is allowing


  var activeComparisons = props.args && props.args.comparisons ? validComparisons.filter(function (val) {
    return props.args.comparisons.includes(val.value);
  }) : undefined;
  return /*#__PURE__*/React__default.createElement(StyledWrapper$8, null, /*#__PURE__*/React__default.createElement(DataViewPrimaryFilter, {
    label: props.label,
    value: valueString,
    type: props.type,
    onRemove: props.onRemove,
    onClick: onClick
  }), /*#__PURE__*/React__default.createElement(DataViewFilterDropdown, {
    anchorEl: anchorEl,
    onClose: onClose
  }, /*#__PURE__*/React__default.createElement(DataViewFilterTextDropdownContent, {
    value: value,
    onChange: props.onChange,
    comparison: comparison,
    comparisons: activeComparisons,
    onClose: onClose
  })));
}

function Spinner(props) {
  return /*#__PURE__*/React__default.createElement(CircularProgress, {
    style: {
      color: theme.colors.blue
    },
    size: 30,
    className: props.className
  });
}

function _templateObject2$4() {
  var data = _taggedTemplateLiteral(["\n\tmargin: 0px;\n"]);

  _templateObject2$4 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$x() {
  var data = _taggedTemplateLiteral(["\n\t& > .topBlock {\n\t\tdisplay: flex;\n\t\theight: 400px;\n\t\twidth: 600px;\n\t}\n\t\n\t& > .topBlock > .options > .searchBar {\n\t\tposition: sticky;\n\t\ttop: 0;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tpadding-left: 14px;\n\t\tz-index: 1;\n\t\tbackground: white;\n\t}\n\t\n\t& > .topBlock > .options > .searchBar > svg {\n\t\tmargin-right: 8px;\n\t\tfont-size: ", ";\n\t}\n\t\n\t& > .topBlock > .options > .searchBar > .input {\n\t\tfont-family: ", ";\n\t\tline-height: 2rem;\n\t\tfont-size: 16px;\n\t}\n\t\n\t& > .topBlock > .options {\n\t\toverflow-y: scroll;\n\t\tflex: 2;\n\t\tposition: relative;\n\t\ttransition: opacity .5s;\n\t\tpadding-right: 10px;\n\t}\n\t\n\t& > .topBlock > .options.disabled {\n\t\topacity: .4;\n\t\tpointer-events: none;\n\t}\n\t\n\t& > .topBlock > .options .listItem {\n\t\tpadding-top: 0px;\n\t\tpadding-bottom: 0px;\n\t}\n\t\n\t& > .topBlock > .options .listItemIcon {\n\t\tmin-width: auto;\n\t}\n\t\n\t& > .topBlock > .options > .spinner {\n\t\tmargin-top: 10px;\n\t\tmargin-bottom: 10px;\n\t}\n\t\n\t& > .topBlock > .options .checked {\n\t\tcolor: ", ";\n\t}\n\t\n\t& > .topBlock > .selected {\n\t\tpadding: 0px 0px 0px 15px;\n\t\twidth: 200px;\n\t\toverflow-y: auto;\n\t}\n\t\n\t& .comparisonDropdown {\n\t\tmargin-bottom: 1rem;\n\t}\n\t\n\t& .chip {\n\t\tdisplay: flex;\n\t\tbackground-color: ", "13;\n\t\tmargin-bottom: 4px;\n\t\tjustify-content: space-between;\n\t\tfont-family: ", ";\n\t\theight: 33px;\n\t}\n\t\n\t& .chip:focus {\n\t\tbackground-color: ", "13;\n\t}\n\t\n\t& .chip > span {\n\t\tflex: 1;\n\t\tfont-size: 14px;\n\t\ttext-overflow: ellipsis;\n\t\toverflow: hidden;\n\t\twhite-space: nowrap;\n\t\tdisplay: block;\n\t}\n"]);

  _templateObject$x = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$9 = styled.div(_templateObject$x(), theme.iconFontSize, theme.fontFamily, theme.colors.blue, theme.colors.blue, theme.fontFamily, theme.colors.blue);
var PopoverP = styled.p(_templateObject2$4());
var limit = 25;

function DataViewFilterMultiselectDropdownContent(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "value",
      type: "array"
    }, {
      name: "comparison",
      type: "string",
      required: true
    }, {
      name: "comparisons",
      type: "array"
    }, {
      name: "getOptions",
      type: "function",
      required: true
    }, {
      name: "selected",
      type: "array",
      required: true
    }, {
      name: "isOpen",
      type: "boolean",
      required: true
    }, {
      name: "onClose",
      type: "function",
      required: true
    }, {
      name: "onApply",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useState = React.useState({
    options: [],
    selected: props.selected.map(function (val) {
      return val.value;
    }),
    hasMore: false,
    skip: 0,
    keyword: undefined,
    comparison: props.comparison,
    loaded: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t; // we need to combine the options we are querying for and the selected options that are passed in
  // since if they have already selected an item not in the current page, it won't be in the queried options


  var allOptions = [].concat(_toConsumableArray(props.selected), _toConsumableArray(state.options)); // mark the active comparison

  var activeComparison = props.comparisons ? props.comparisons.find(function (val) {
    return val.value === state.comparison;
  }) : undefined;
  React.useEffect(function () {
    function fetchData() {
      return _fetchData.apply(this, arguments);
    }

    function _fetchData() {
      _fetchData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var options;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return props.getOptions({
                  limit: limit,
                  skip: state.skip
                });

              case 2:
                options = _context.sent;
                setState(_objectSpread2(_objectSpread2({}, state), {}, {
                  options: options.docs,
                  hasMore: options.hasMore === true,
                  skip: state.skip + limit,
                  loaded: true
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _fetchData.apply(this, arguments);
    }

    fetchData();
  }, []);

  var onClear = function onClear() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      selected: [],
      comparison: "in",
      keyword: undefined,
      skip: 0,
      hasMore: false
    }));
  };

  var onApply = function onApply() {
    props.onApply({
      value: state.selected,
      comparison: state.comparison
    });
  };

  var handleToggle = function handleToggle(option) {
    return function () {
      var newSelected = lodash.xor(state.selected, [option.value]);
      setState(_objectSpread2(_objectSpread2({}, state), {}, {
        selected: newSelected
      }));
    };
  };

  var loadMore = function loadMore(e) {
    // stash the target to prevent issues with React event persistence in our async callback
    var target = e.currentTarget;

    function fetchData() {
      return _fetchData2.apply(this, arguments);
    }

    function _fetchData2() {
      _fetchData2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var newOptions;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return props.getOptions({
                  limit: limit,
                  skip: state.skip,
                  keyword: state.keyword
                });

              case 2:
                newOptions = _context2.sent;
                setState(_objectSpread2(_objectSpread2({}, state), {}, {
                  options: [].concat(_toConsumableArray(state.options), _toConsumableArray(newOptions.docs)),
                  hasMore: newOptions.hasMore === true,
                  skip: state.skip + limit
                })); // By blurring on the target we prevent the browser from keeping our load more button in view
                // this ensures that our options scrollable maintains it's previous scroll position

                target.blur();

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return _fetchData2.apply(this, arguments);
    }

    fetchData();
  };

  var debouncedSetKeyword = lodash.debounce(function (value) {
    function fetchData() {
      return _fetchData3.apply(this, arguments);
    }

    function _fetchData3() {
      _fetchData3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var newOptions;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return props.getOptions({
                  limit: limit,
                  skip: 0,
                  keyword: value
                });

              case 2:
                newOptions = _context3.sent;
                setState(_objectSpread2(_objectSpread2({}, state), {}, {
                  options: newOptions.docs,
                  hasMore: newOptions.hasMore === true,
                  keyword: value === "" ? undefined : value,
                  skip: limit
                }));

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      return _fetchData3.apply(this, arguments);
    }

    fetchData();
  }, 200);

  var keywordChange = function keywordChange(e) {
    debouncedSetKeyword(e.target.value);
  };

  var comparisonDropdown;

  if (props.comparisons) {
    var menuItems = props.comparisons.map(function (comparison) {
      return {
        label: comparison.label,
        onClick: function onClick() {
          // for exists and not_exists we want to clear the value
          if (["exists", "not_exists"].includes(comparison.value) === true) {
            setState(_objectSpread2(_objectSpread2({}, state), {}, {
              selected: []
            }));
          }

          setState(_objectSpread2(_objectSpread2({}, state), {}, {
            comparison: comparison.value
          }));
        }
      };
    });
    comparisonDropdown = /*#__PURE__*/React__default.createElement("div", {
      className: "comparisonDropdown"
    }, /*#__PURE__*/React__default.createElement(H3, null, t("mosaic:DataView.comparison")), /*#__PURE__*/React__default.createElement(ButtonRow$1, null, /*#__PURE__*/React__default.createElement(Button$1, {
      label: activeComparison.label,
      variant: "outlined",
      color: "black",
      iconPosition: "right",
      mIcon: ExpandMoreIcon,
      menuItems: menuItems
    }), /*#__PURE__*/React__default.createElement(Button$1, {
      variant: "icon",
      color: "blue",
      mIcon: HelpIcon,
      popover: /*#__PURE__*/React__default.createElement(PopoverP, null, /*#__PURE__*/React__default.createElement("b", null, "In"), " - The row must match one of selected option.", /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement("b", null, "Not in"), " - The row must match none of the selected options.", /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement("b", null, "All"), " - The row must match all of the selected options.", /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement("b", null, "Exists"), " - The row must have a value for this filter.", /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement("b", null, "Not Exists"), " - The row must not have a value for this filter.", /*#__PURE__*/React__default.createElement("br", null))
    })));
  } // if the user has chosen exists or not_exists then we need to disable the left panel since it isn't valid in that case


  var optionsDisabled = ["exists", "not_exists"].includes(state.comparison); // we want to avoid showing the list until the dropdown is fully open and the results are loaded from the db

  var showList = props.isOpen && state.loaded;

  var onChange = function onChange(selected) {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      selected: selected
    }));
  };

  return /*#__PURE__*/React__default.createElement(StyledWrapper$9, null, /*#__PURE__*/React__default.createElement("div", {
    className: "topBlock"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "options ".concat(optionsDisabled ? "disabled" : "")
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "searchBar"
  }, /*#__PURE__*/React__default.createElement(SearchIcon, null), /*#__PURE__*/React__default.createElement(InputBase, {
    className: "input",
    placeholder: t("mosaic:common.keyword___"),
    autoFocus: true,
    onChange: keywordChange
  })), !showList && /*#__PURE__*/React__default.createElement(Spinner, {
    className: "spinner"
  }), showList && /*#__PURE__*/React__default.createElement(CheckboxList, {
    checked: state.selected,
    options: state.options,
    onChange: onChange
  }), state.hasMore && /*#__PURE__*/React__default.createElement("div", {
    className: "loadContainer"
  }, /*#__PURE__*/React__default.createElement(Button$1, {
    label: t("mosaic:common.load_more___"),
    color: "blue",
    variant: "outlined",
    fullWidth: true,
    onClick: loadMore
  }))), /*#__PURE__*/React__default.createElement("div", {
    className: "selected"
  }, comparisonDropdown, /*#__PURE__*/React__default.createElement(H3, null, t("mosaic:DataView.selected_options")), /*#__PURE__*/React__default.createElement("div", {
    className: "chips"
  }, showList && state.selected.map(function (value) {
    var option = allOptions.find(function (val) {
      return val.value === value;
    });

    if (option === undefined) {
      return null;
    }

    return /*#__PURE__*/React__default.createElement(Chip, {
      className: "chip",
      key: option.value,
      label: option.label,
      onDelete: handleToggle(option)
    });
  })))), /*#__PURE__*/React__default.createElement(DataViewFilterDropdownButtons, {
    onApply: onApply,
    onClear: onClear,
    onCancel: props.onClose
  }));
}

function _templateObject$y() {
  var data = _taggedTemplateLiteral(["\n\t\n"]);

  _templateObject$y = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$a = styled.span(_templateObject$y());
var validComparisons$1 = [{
  label: "In",
  value: "in"
}, {
  label: "Not In",
  value: "not_in"
}, {
  label: "All",
  value: "all"
}, {
  label: "Exists",
  value: "exists"
}, {
  label: "Not Exists",
  value: "not_exists"
}];
var validComparisonNames$1 = validComparisons$1.map(function (val) {
  return val.value;
});
var comparisonMap$1 = {
  "in": "",
  not_in: "Not In - ",
  all: "All - "
};

function DataViewFilterMultiselect(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "label",
      type: "string",
      required: true
    }, {
      name: "data",
      type: "object",
      schema: [{
        name: "value",
        type: "array",
        schema: {
          type: "string"
        }
      }, {
        name: "comparison",
        type: "string",
        "enum": validComparisonNames$1
      }],
      allowExtraKeys: false,
      required: true
    }, {
      name: "type",
      type: "string",
      required: true
    }, {
      name: "args",
      type: "object",
      schema: [{
        name: "getOptions",
        type: "function",
        required: true
      }, {
        name: "getSelected",
        type: "function",
        required: true
      }, {
        name: "comparisons",
        type: "array",
        schema: {
          type: "string",
          "enum": validComparisonNames$1
        }
      }],
      allowExtraKeys: false,
      required: true
    }, {
      name: "onRemove",
      type: "function",
      required: true
    }, {
      name: "onChange",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useState = React.useState({
    anchorEl: null,
    selected: [],
    dropdownOpen: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var value = props.data.value || [];
  var comparison = props.data.comparison || "in";
  React.useEffect(function () {
    function fetchData() {
      return _fetchData.apply(this, arguments);
    }

    function _fetchData() {
      _fetchData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var selected;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return props.args.getSelected(value);

              case 2:
                selected = _context.sent;
                setState(_objectSpread2(_objectSpread2({}, state), {}, {
                  selected: selected
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _fetchData.apply(this, arguments);
    }

    fetchData();
  }, [props.data]);

  var onClick = function onClick(event) {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      anchorEl: event.currentTarget
    }));
  };

  var onClose = function onClose() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      anchorEl: null
    }));
  };

  var onEntered = function onEntered() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      dropdownOpen: true
    }));
  };

  var onExited = function onExited() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      dropdownOpen: false
    }));
  };

  var onApply = function onApply(data) {
    props.onChange(data);
    onClose();
  };

  var valueString;

  if (comparison === "exists") {
    valueString = "EXISTS";
  } else if (comparison === "not_exists") {
    valueString = "NOT EXISTS";
  } else if (state.selected.length > 0) {
    var tempString = state.selected.slice(0, 2).map(function (val) {
      return val.label;
    }).join(", ");

    if (state.selected.length > 2) {
      tempString += " (".concat(state.selected.length - 2, " more)");
    }

    valueString = "".concat(comparisonMap$1[comparison]).concat(tempString);
  } else {
    valueString = "";
  } // filter the valid comparisons based on what the developer is allowing


  var activeComparisons = props.args && props.args.comparisons ? validComparisons$1.filter(function (val) {
    return props.args.comparisons.includes(val.value);
  }) : undefined;
  return /*#__PURE__*/React__default.createElement(StyledWrapper$a, null, /*#__PURE__*/React__default.createElement(DataViewPrimaryFilter, {
    label: props.label,
    value: valueString,
    type: props.type,
    onRemove: props.onRemove,
    onClick: onClick
  }), /*#__PURE__*/React__default.createElement(DataViewFilterDropdown, {
    anchorEl: state.anchorEl,
    onClose: onClose,
    onEntered: onEntered,
    onExited: onExited
  }, /*#__PURE__*/React__default.createElement(DataViewFilterMultiselectDropdownContent, {
    value: value,
    comparison: comparison,
    comparisons: activeComparisons,
    selected: state.selected,
    getOptions: props.args.getOptions,
    isOpen: state.dropdownOpen,
    onApply: onApply,
    onClose: onClose
  })));
}

function _templateObject$z() {
  var data = _taggedTemplateLiteral(["\n\tposition: absolute;\n\ttop: 0px;\n\tbottom: 0px;\n\tright: 0px;\n\tleft: 0px;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-family: ", ";\n\t\n\t& > .mask {\n\t\tbackground: black;\n\t\tposition: absolute;\n\t\ttop: 0px;\n\t\tbottom: 0px;\n\t\tright: 0px;\n\t\tleft: 0px;\n\t\topacity: .8;\n\t}\n\t\n\t& > .container {\n\t\tposition: relative;\n\t\tbackground: white;\n\t\tborder-radius: 4px;\n\t\tpadding: 20px;\n\t}\n\t\n\t& > .container > h2 {\n\t\tmargin-top: 0px;\n\t}\n\t\n\t& > .container > .buttonBar {\n\t\ttext-align: right;\n\t}\n"]);

  _templateObject$z = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$b = styled.div(_templateObject$z(), theme.fontFamily);

function Dialog(props) {
  return /*#__PURE__*/React__default.createElement(StyledWrapper$b, null, /*#__PURE__*/React__default.createElement("div", {
    className: "mask"
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "container"
  }, /*#__PURE__*/React__default.createElement("h2", null, props.title), /*#__PURE__*/React__default.createElement("p", null, props.text), /*#__PURE__*/React__default.createElement("div", {
    className: "buttonBar"
  }, /*#__PURE__*/React__default.createElement(GridButtonBar, {
    buttons: props.buttons
  }))));
}

function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }

  var number = Number(dirtyNumber);

  if (isNaN(number)) {
    return number;
  }

  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + required > 1 ? 's' : '' + ' required, but only ' + args.length + ' present');
  }
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */

function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument); // Clone the date

  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

      console.warn(new Error().stack);
    }

    return new Date(NaN);
  }
}

/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the days added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * var result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */

function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  date.setDate(date.getDate() + amount);
  return date;
}

/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the number of days in a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // How many days are in February 2000?
 * var result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */

function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}

/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * var result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */

function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  var desiredMonth = date.getMonth() + amount;
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(date.getFullYear(), desiredMonth, 1);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month
  // if the original date was the last day of the longer month

  date.setMonth(desiredMonth, Math.min(daysInMonth, date.getDate()));
  return date;
}

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */

function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

var MILLISECONDS_IN_MINUTE = 60000;
/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */

function getTimezoneOffsetInMilliseconds(dirtyDate) {
  var date = new Date(dirtyDate.getTime());
  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());
  date.setSeconds(0, 0);
  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;
  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;
}

/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */

function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the years added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * var result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */

function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Now `isValid` doesn't throw an exception
 *   if the first argument is not an instance of Date.
 *   Instead, argument is converted beforehand using `toDate`.
 *
 *   Examples:
 *
 *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
 *   |---------------------------|---------------|---------------|
 *   | `new Date()`              | `true`        | `true`        |
 *   | `new Date('2016-01-01')`  | `true`        | `true`        |
 *   | `new Date('')`            | `false`       | `false`       |
 *   | `new Date(1488370835081)` | `true`        | `true`        |
 *   | `new Date(NaN)`           | `false`       | `false`       |
 *   | `'2016-01-01'`            | `TypeError`   | `false`       |
 *   | `''`                      | `TypeError`   | `false`       |
 *   | `1488370835081`           | `TypeError`   | `true`        |
 *   | `NaN`                     | `TypeError`   | `false`       |
 *
 *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
 *   that try to coerce arguments to the expected type
 *   (which is also the case with other *date-fns* functions).
 *
 * @param {*} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // For the valid date:
 * var result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * var result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * var result = isValid(new Date(''))
 * //=> false
 */

function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return !isNaN(date);
}

/**
 * @name isSameDay
 * @category Day Helpers
 * @summary Are the given dates in the same day?
 *
 * @description
 * Are the given dates in the same day?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same day
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
 * //=> true
 */

function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of milliseconds
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * var result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */

function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getTime() - dateRight.getTime();
}

/**
 * @name eachDayOfInterval
 * @category Interval Helpers
 * @summary Return the array of dates within the specified time interval.
 *
 * @description
 * Return the array of dates within the specified time interval.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The function was renamed from `eachDay` to `eachDayOfInterval`.
 *   This change was made to mirror the use of the word "interval" in standard ISO 8601:2004 terminology:
 *
 *   ```
 *   2.1.3
 *   time interval
 *   part of the time axis limited by two instants
 *   ```
 *
 *   Also, this function now accepts an object with `start` and `end` properties
 *   instead of two arguments as an interval.
 *   This function now throws `RangeError` if the start of the interval is after its end
 *   or if any date in the interval is `Invalid Date`.
 *
 *   ```javascript
 *   // Before v2.0.0
 *
 *   eachDay(new Date(2014, 0, 10), new Date(2014, 0, 20))
 *
 *   // v2.0.0 onward
 *
 *   eachDayOfInterval(
 *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) }
 *   )
 *   ```
 *
 * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}
 * @param {Object} [options] - an object with options.
 * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.
 * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.step` must be a number greater than 1
 * @throws {RangeError} The start of an interval cannot be after its end
 * @throws {RangeError} Date in interval cannot be `Invalid Date`
 *
 * @example
 * // Each day between 6 October 2014 and 10 October 2014:
 * var result = eachDayOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 9, 10)
 * })
 * //=> [
 * //   Mon Oct 06 2014 00:00:00,
 * //   Tue Oct 07 2014 00:00:00,
 * //   Wed Oct 08 2014 00:00:00,
 * //   Thu Oct 09 2014 00:00:00,
 * //   Fri Oct 10 2014 00:00:00
 * // ]
 */

function eachDayOfInterval(dirtyInterval, options) {
  requiredArgs(1, arguments);
  var interval = dirtyInterval || {};
  var startDate = toDate(interval.start);
  var endDate = toDate(interval.end);
  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`

  if (!(startDate.getTime() <= endTime)) {
    throw new RangeError('Invalid interval');
  }

  var dates = [];
  var currentDate = startDate;
  currentDate.setHours(0, 0, 0, 0);
  var step = options && 'step' in options ? Number(options.step) : 1;
  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');

  while (currentDate.getTime() <= endTime) {
    dates.push(toDate(currentDate));
    currentDate.setDate(currentDate.getDate() + step);
    currentDate.setHours(0, 0, 0, 0);
  }

  return dates;
}

/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */

function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * @name startOfYear
 * @category Year Helpers
 * @summary Return the start of a year for the given date.
 *
 * @description
 * Return the start of a year for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a year for 2 September 2014 11:55:00:
 * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Jan 01 2014 00:00:00
 */

function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date = new Date(0);
  date.setFullYear(cleanDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * @name endOfYear
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Dec 31 2014 23:59:59.999
 */

function endOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */

function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}

/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the end of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */

function endOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}

var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};
function formatDistance(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale[token] === 'string') {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
}

function buildFormatLongFn(args) {
  return function (dirtyOptions) {
    var options = dirtyOptions || {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};
function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
}

function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.

};
var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

function ordinalNumber(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
}

var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};

function buildMatchPatternFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var matchResult = string.match(args.matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);

    if (!parseResult) {
      return null;
    }

    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

function buildMatchFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var value;

    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
      value = findIndex(parsePatterns, function (pattern) {
        return pattern.test(string);
      });
    } else {
      value = findKey(parsePatterns, function (pattern) {
        return pattern.test(string);
      });
    }

    value = args.valueCallback ? args.valueCallback(value) : value;
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
}

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */

var locale = {
  code: 'en-US',
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};

/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */

function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();

  while (output.length < targetLength) {
    output = '0' + output;
  }

  return sign + output;
}

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */

var formatters = {
  // Year
  y: function (date, token) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
  },
  // Month
  M: function (date, token) {
    var month = date.getUTCMonth();
    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function (date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function (date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
      case 'aaa':
        return dayPeriodEnumValue.toUpperCase();

      case 'aaaaa':
        return dayPeriodEnumValue[0];

      case 'aaaa':
      default:
        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
    }
  },
  // Hour [1-12]
  h: function (date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function (date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function (date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function (date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function (date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};

var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate, dirtyOptions);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date;
}

var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}

var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night'
  /*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* | Milliseconds in day            |
   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
   * |  d  | Day of month                   |  D  | Day of year                    |
   * |  e  | Local day of week              |  E  | Day of week                    |
   * |  f  |                                |  F* | Day of week in month           |
   * |  g* | Modified Julian day            |  G  | Era                            |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  i! | ISO day of week                |  I! | ISO week of year               |
   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
   * |  l* | (deprecated)                   |  L  | Stand-alone month              |
   * |  m  | Minute                         |  M  | Month                          |
   * |  n  |                                |  N  |                                |
   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
   * |  p! | Long localized time            |  P! | Long localized date            |
   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
   * |  u  | Extended year                  |  U* | Cyclic year                    |
   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
   * |  w  | Local week of year             |  W* | Week of month                  |
   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   *
   * Letters marked by ! are non-standard, but implemented by date-fns:
   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
   *   i.e. 7 for Sunday, 1 for Monday, etc.
   * - `I` is ISO week of year, as opposed to `w` which is local week of year.
   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
   *   `R` is supposed to be used in conjunction with `I` and `i`
   *   for universal ISO week-numbering date, whereas
   *   `Y` is supposed to be used in conjunction with `w` and `e`
   *   for week-numbering date specific to the locale.
   * - `P` is long localized date format
   * - `p` is long localized time format
   */

};
var formatters$1 = {
  // Era
  G: function (date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;

    switch (token) {
      // AD, BC
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {
          width: 'abbreviated'
        });
      // A, B

      case 'GGGGG':
        return localize.era(era, {
          width: 'narrow'
        });
      // Anno Domini, Before Christ

      case 'GGGG':
      default:
        return localize.era(era, {
          width: 'wide'
        });
    }
  },
  // Year
  y: function (date, token, localize) {
    // Ordinal number
    if (token === 'yo') {
      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: 'year'
      });
    }

    return formatters.y(date, token);
  },
  // Local week-numbering year
  Y: function (date, token, localize, options) {
    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    } // Ordinal number


    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {
        unit: 'year'
      });
    } // Padding


    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function (date, token) {
    var isoWeekYear = getUTCISOWeekYear(date); // Padding

    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function (date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function (date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'Q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'QQ':
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'Qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'QQQ':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'QQQQQ':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'formatting'
        });
      // 1st quarter, 2nd quarter, ...

      case 'QQQQ':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone quarter
  q: function (date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'qq':
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'qqq':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'qqqqq':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'standalone'
        });
      // 1st quarter, 2nd quarter, ...

      case 'qqqq':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Month
  M: function (date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      case 'M':
      case 'MM':
        return formatters.M(date, token);
      // 1st, 2nd, ..., 12th

      case 'Mo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'MMM':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // J, F, ..., D

      case 'MMMMM':
        return localize.month(month, {
          width: 'narrow',
          context: 'formatting'
        });
      // January, February, ..., December

      case 'MMMM':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone month
  L: function (date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      // 1, 2, ..., 12
      case 'L':
        return String(month + 1);
      // 01, 02, ..., 12

      case 'LL':
        return addLeadingZeros(month + 1, 2);
      // 1st, 2nd, ..., 12th

      case 'Lo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'LLL':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // J, F, ..., D

      case 'LLLLL':
        return localize.month(month, {
          width: 'narrow',
          context: 'standalone'
        });
      // January, February, ..., December

      case 'LLLL':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Local week of year
  w: function (date, token, localize, options) {
    var week = getUTCWeek(date, options);

    if (token === 'wo') {
      return localize.ordinalNumber(week, {
        unit: 'week'
      });
    }

    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function (date, token, localize) {
    var isoWeek = getUTCISOWeek(date);

    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {
        unit: 'week'
      });
    }

    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function (date, token, localize) {
    if (token === 'do') {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: 'date'
      });
    }

    return formatters.d(date, token);
  },
  // Day of year
  D: function (date, token, localize) {
    var dayOfYear = getUTCDayOfYear(date);

    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {
        unit: 'dayOfYear'
      });
    }

    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function (date, token, localize) {
    var dayOfWeek = date.getUTCDay();

    switch (token) {
      // Tue
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'EEEEE':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'EEEEEE':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Local day of week
  e: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case 'e':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'ee':
        return addLeadingZeros(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th

      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'eee':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'eeeee':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'eeeeee':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'eeee':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone local day of week
  c: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (same as in `e`)
      case 'c':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'cc':
        return addLeadingZeros(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th

      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'ccc':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // T

      case 'ccccc':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'standalone'
        });
      // Tu

      case 'cccccc':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'standalone'
        });
      // Tuesday

      case 'cccc':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // ISO day of week
  i: function (date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

    switch (token) {
      // 2
      case 'i':
        return String(isoDayOfWeek);
      // 02

      case 'ii':
        return addLeadingZeros(isoDayOfWeek, token.length);
      // 2nd

      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: 'day'
        });
      // Tue

      case 'iii':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'iiiii':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'iiiiii':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'iiii':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM or PM
  a: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM, PM, midnight, noon
  b: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    }

    switch (token) {
      case 'b':
      case 'bb':
      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }

    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Hour [1-12]
  h: function (date, token, localize) {
    if (token === 'ho') {
      var hours = date.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return formatters.h(date, token);
  },
  // Hour [0-23]
  H: function (date, token, localize) {
    if (token === 'Ho') {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: 'hour'
      });
    }

    return formatters.H(date, token);
  },
  // Hour [0-11]
  K: function (date, token, localize) {
    var hours = date.getUTCHours() % 12;

    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function (date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0) hours = 24;

    if (token === 'ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function (date, token, localize) {
    if (token === 'mo') {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: 'minute'
      });
    }

    return formatters.m(date, token);
  },
  // Second
  s: function (date, token, localize) {
    if (token === 'so') {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: 'second'
      });
    }

    return formatters.s(date, token);
  },
  // Fraction of second
  S: function (date, token) {
    return formatters.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    if (timezoneOffset === 0) {
      return 'Z';
    }

    switch (token) {
      // Hours and optional minutes
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`

      case 'XXXX':
      case 'XX':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`

      case 'XXXXX':
      case 'XXX': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Hours and optional minutes
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`

      case 'xxxx':
      case 'xx':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`

      case 'xxxxx':
      case 'xxx': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (GMT)
  O: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (specific non-location)
  z: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Seconds timestamp
  t: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};

function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;

  if (minutes === 0) {
    return sign + String(hours);
  }

  var delimiter = dirtyDelimiter || '';
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}

function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }

  return formatTimezone(offset, dirtyDelimiter);
}

function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });

    case 'PP':
      return formatLong.date({
        width: 'medium'
      });

    case 'PPP':
      return formatLong.date({
        width: 'long'
      });

    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
}

function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });

    case 'pp':
      return formatLong.time({
        width: 'medium'
      });

    case 'ppp':
      return formatLong.time({
        width: 'long'
      });

    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
}

function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/);
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }

  var dateTimeFormat;

  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;

    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;

    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;

    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }

  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
}

var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};

var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token) {
  if (token === 'YYYY') {
    throw new RangeError('Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr');
  } else if (token === 'YY') {
    throw new RangeError('Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr');
  } else if (token === 'D') {
    throw new RangeError('Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr');
  } else if (token === 'DD') {
    throw new RangeError('Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr');
  }
}

// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | AM, PM                          | a..aaa  | AM, PM                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 1, 2, ..., 11, 0                  |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 0001, ..., 999               |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 05/29/1453                        | 7     |
 * |                                 | PP      | May 29, 1453                      | 7     |
 * |                                 | PPP     | May 29th, 1453                    | 7     |
 * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |
 * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The second argument is now required for the sake of explicitness.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   format(new Date(2016, 0, 1))
 *
 *   // v2.0.0 onward
 *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
 *   ```
 *
 * - New format string API for `format` function
 *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
 *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
 *
 * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
 *
 * @param {Date|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */

function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale$1 = options.locale || locale;
  var localeFirstWeekContainsDate = locale$1.options && locale$1.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var localeWeekStartsOn = locale$1.options && locale$1.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  if (!locale$1.localize) {
    throw new RangeError('locale must contain localize property');
  }

  if (!locale$1.formatLong) {
    throw new RangeError('locale must contain formatLong property');
  }

  var originalDate = toDate(dirtyDate);

  if (!isValid(originalDate)) {
    throw new RangeError('Invalid time value');
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale$1,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];

    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale$1.formatLong, formatterOptions);
    }

    return substring;
  }).join('').match(formattingTokensRegExp).map(function (substring) {
    // Replace two single quote characters with one single quote character
    if (substring === "''") {
      return "'";
    }

    var firstCharacter = substring[0];

    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }

    var formatter = formatters$1[firstCharacter];

    if (formatter) {
      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring);
      }

      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring);
      }

      return formatter(utcDate, substring, locale$1.localize, formatterOptions);
    }

    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
    }

    return substring;
  }).join('');
  return result;
}

function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError('assign requires that input parameter not be null or undefined');
  }

  dirtyObject = dirtyObject || {};

  for (var property in dirtyObject) {
    if (dirtyObject.hasOwnProperty(property)) {
      target[property] = dirtyObject[property];
    }
  }

  return target;
}

/**
 * @name getHours
 * @category Hour Helpers
 * @summary Get the hours of the given date.
 *
 * @description
 * Get the hours of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the hours
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the hours of 29 February 2012 11:45:00:
 * var result = getHours(new Date(2012, 1, 29, 11, 45))
 * //=> 11
 */

function getHours(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var hours = date.getHours();
  return hours;
}

/**
 * @name getSeconds
 * @category Second Helpers
 * @summary Get the seconds of the given date.
 *
 * @description
 * Get the seconds of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the seconds
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the seconds of 29 February 2012 11:45:05.123:
 * var result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 5
 */

function getSeconds(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var seconds = date.getSeconds();
  return seconds;
}

/**
 * @name getYear
 * @category Year Helpers
 * @summary Get the year of the given date.
 *
 * @description
 * Get the year of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which year is 2 July 2014?
 * var result = getYear(new Date(2014, 6, 2))
 * //=> 2014
 */

function getYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  return year;
}

/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date that should be after the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is after the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */

function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}

/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date that should be before the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is before the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */

function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}

/**
 * @name isEqual
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to compare
 * @param {Date|Number} dateRight - the second date to compare
 * @returns {Boolean} the dates are equal
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * var result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0),
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */

function isEqual(dirtyLeftDate, dirtyRightDate) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyLeftDate);
  var dateRight = toDate(dirtyRightDate);
  return dateLeft.getTime() === dateRight.getTime();
}

/**
 * @name isSameMonth
 * @category Month Helpers
 * @summary Are the given dates in the same month?
 *
 * @description
 * Are the given dates in the same month?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same month
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 */

function isSameMonth(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}

/**
 * @name isSameYear
 * @category Year Helpers
 * @summary Are the given dates in the same year?
 *
 * @description
 * Are the given dates in the same year?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same year
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same year?
 * var result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 */

function isSameYear(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear();
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
  requiredArgs(2, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);

  if (day % 7 === 0) {
    day = day - 7;
  }

  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

var MILLISECONDS_IN_HOUR = 3600000;
var MILLISECONDS_IN_MINUTE$1 = 60000;
var MILLISECONDS_IN_SECOND = 1000;
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999

};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

function parseNumericPattern(pattern, string, valueCallback) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null;
  }

  var value = parseInt(matchResult[0], 10);
  return {
    value: valueCallback ? valueCallback(value) : value,
    rest: string.slice(matchResult[0].length)
  };
}

function parseTimezonePattern(pattern, string) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null;
  } // Input is 'Z'


  if (matchResult[0] === 'Z') {
    return {
      value: 0,
      rest: string.slice(1)
    };
  }

  var sign = matchResult[1] === '+' ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE$1 + seconds * MILLISECONDS_IN_SECOND),
    rest: string.slice(matchResult[0].length)
  };
}

function parseAnyDigitsSigned(string, valueCallback) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
}

function parseNDigits(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);

    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);

    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);

    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);

    default:
      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), string, valueCallback);
  }
}

function parseNDigitsSigned(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);

    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);

    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);

    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);

    default:
      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), string, valueCallback);
  }
}

function dayPeriodEnumToHours(enumValue) {
  switch (enumValue) {
    case 'morning':
      return 4;

    case 'evening':
      return 17;

    case 'pm':
    case 'noon':
    case 'afternoon':
      return 12;

    case 'am':
    case 'midnight':
    case 'night':
    default:
      return 0;
  }
}

function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0; // Absolute number of the current year:
  // 1 -> 1 AC
  // 0 -> 1 BC
  // -1 -> 2 BC

  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;

  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }

  return isCommonEra ? result : 1 - result;
}

var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation

function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */


var parsers = {
  // Era
  G: {
    priority: 140,
    parse: function (string, token, match, _options) {
      switch (token) {
        // AD, BC
        case 'G':
        case 'GG':
        case 'GGG':
          return match.era(string, {
            width: 'abbreviated'
          }) || match.era(string, {
            width: 'narrow'
          });
        // A, B

        case 'GGGGG':
          return match.era(string, {
            width: 'narrow'
          });
        // Anno Domini, Before Christ

        case 'GGGG':
        default:
          return match.era(string, {
            width: 'wide'
          }) || match.era(string, {
            width: 'abbreviated'
          }) || match.era(string, {
            width: 'narrow'
          });
      }
    },
    set: function (date, flags, value, _options) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['R', 'u', 't', 'T']
  },
  // Year
  y: {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    priority: 130,
    parse: function (string, token, match, _options) {
      var valueCallback = function (year) {
        return {
          year: year,
          isTwoDigitYear: token === 'yy'
        };
      };

      switch (token) {
        case 'y':
          return parseNDigits(4, string, valueCallback);

        case 'yo':
          return match.ordinalNumber(string, {
            unit: 'year',
            valueCallback: valueCallback
          });

        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function (_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function (date, flags, value, _options) {
      var currentYear = date.getUTCFullYear();

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }

      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']
  },
  // Local week-numbering year
  Y: {
    priority: 130,
    parse: function (string, token, match, _options) {
      var valueCallback = function (year) {
        return {
          year: year,
          isTwoDigitYear: token === 'YY'
        };
      };

      switch (token) {
        case 'Y':
          return parseNDigits(4, string, valueCallback);

        case 'Yo':
          return match.ordinalNumber(string, {
            unit: 'year',
            valueCallback: valueCallback
          });

        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function (_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function (date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }

      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    },
    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
  },
  // ISO week-numbering year
  R: {
    priority: 130,
    parse: function (string, token, _match, _options) {
      if (token === 'R') {
        return parseNDigitsSigned(4, string);
      }

      return parseNDigitsSigned(token.length, string);
    },
    set: function (_date, _flags, value, _options) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    },
    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
  },
  // Extended year
  u: {
    priority: 130,
    parse: function (string, token, _match, _options) {
      if (token === 'u') {
        return parseNDigitsSigned(4, string);
      }

      return parseNDigitsSigned(token.length, string);
    },
    set: function (date, _flags, value, _options) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']
  },
  // Quarter
  Q: {
    priority: 120,
    parse: function (string, token, match, _options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'Q':
        case 'QQ':
          // 01, 02, 03, 04
          return parseNDigits(token.length, string);
        // 1st, 2nd, 3rd, 4th

        case 'Qo':
          return match.ordinalNumber(string, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'QQQ':
          return match.quarter(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'QQQQQ':
          return match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1st quarter, 2nd quarter, ...

        case 'QQQQ':
        default:
          return match.quarter(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Stand-alone quarter
  q: {
    priority: 120,
    parse: function (string, token, match, _options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'q':
        case 'qq':
          // 01, 02, 03, 04
          return parseNDigits(token.length, string);
        // 1st, 2nd, 3rd, 4th

        case 'qo':
          return match.ordinalNumber(string, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'qqq':
          return match.quarter(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'qqqqq':
          return match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1st quarter, 2nd quarter, ...

        case 'qqqq':
        default:
          return match.quarter(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Month
  M: {
    priority: 110,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        return value - 1;
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'M':
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        // 01, 02, ..., 12

        case 'MM':
          return parseNDigits(2, string, valueCallback);
        // 1st, 2nd, ..., 12th

        case 'Mo':
          return match.ordinalNumber(string, {
            unit: 'month',
            valueCallback: valueCallback
          });
        // Jan, Feb, ..., Dec

        case 'MMM':
          return match.month(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // J, F, ..., D

        case 'MMMMM':
          return match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // January, February, ..., December

        case 'MMMM':
        default:
          return match.month(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.month(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Stand-alone month
  L: {
    priority: 110,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        return value - 1;
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'L':
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        // 01, 02, ..., 12

        case 'LL':
          return parseNDigits(2, string, valueCallback);
        // 1st, 2nd, ..., 12th

        case 'Lo':
          return match.ordinalNumber(string, {
            unit: 'month',
            valueCallback: valueCallback
          });
        // Jan, Feb, ..., Dec

        case 'LLL':
          return match.month(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // J, F, ..., D

        case 'LLLLL':
          return match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // January, February, ..., December

        case 'LLLL':
        default:
          return match.month(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.month(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Local week of year
  w: {
    priority: 100,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'w':
          return parseNumericPattern(numericPatterns.week, string);

        case 'wo':
          return match.ordinalNumber(string, {
            unit: 'week'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function (date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
  },
  // ISO week of year
  I: {
    priority: 100,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'I':
          return parseNumericPattern(numericPatterns.week, string);

        case 'Io':
          return match.ordinalNumber(string, {
            unit: 'week'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function (date, _flags, value, options) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);
    },
    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
  },
  // Day of the month
  d: {
    priority: 90,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'd':
          return parseNumericPattern(numericPatterns.date, string);

        case 'do':
          return match.ordinalNumber(string, {
            unit: 'date'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();

      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Day of year
  D: {
    priority: 90,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'D':
        case 'DD':
          return parseNumericPattern(numericPatterns.dayOfYear, string);

        case 'Do':
          return match.ordinalNumber(string, {
            unit: 'date'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);

      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']
  },
  // Day of week
  E: {
    priority: 90,
    parse: function (string, token, match, _options) {
      switch (token) {
        // Tue
        case 'E':
        case 'EE':
        case 'EEE':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // T

        case 'EEEEE':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'EEEEEE':
          return match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday

        case 'EEEE':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']
  },
  // Local day of week
  e: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };

      switch (token) {
        // 3
        case 'e':
        case 'ee':
          // 03
          return parseNDigits(token.length, string, valueCallback);
        // 3rd

        case 'eo':
          return match.ordinalNumber(string, {
            unit: 'day',
            valueCallback: valueCallback
          });
        // Tue

        case 'eee':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // T

        case 'eeeee':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'eeeeee':
          return match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday

        case 'eeee':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']
  },
  // Stand-alone local day of week
  c: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };

      switch (token) {
        // 3
        case 'c':
        case 'cc':
          // 03
          return parseNDigits(token.length, string, valueCallback);
        // 3rd

        case 'co':
          return match.ordinalNumber(string, {
            unit: 'day',
            valueCallback: valueCallback
          });
        // Tue

        case 'ccc':
          return match.day(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // T

        case 'ccccc':
          return match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tu

        case 'cccccc':
          return match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tuesday

        case 'cccc':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']
  },
  // ISO day of week
  i: {
    priority: 90,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        if (value === 0) {
          return 7;
        }

        return value;
      };

      switch (token) {
        // 2
        case 'i':
        case 'ii':
          // 02
          return parseNDigits(token.length, string);
        // 2nd

        case 'io':
          return match.ordinalNumber(string, {
            unit: 'day'
          });
        // Tue

        case 'iii':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // T

        case 'iiiii':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // Tu

        case 'iiiiii':
          return match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // Tuesday

        case 'iiii':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 7;
    },
    set: function (date, _flags, value, options) {
      date = setUTCISODay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']
  },
  // AM or PM
  a: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'aaaaa':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'aaaa':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T']
  },
  // AM, PM, midnight
  b: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'b':
        case 'bb':
        case 'bbb':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'bbbbb':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'bbbb':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T']
  },
  // in the morning, in the afternoon, in the evening, at night
  B: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'B':
        case 'BB':
        case 'BBB':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'BBBBB':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'BBBB':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 't', 'T']
  },
  // Hour [1-12]
  h: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'h':
          return parseNumericPattern(numericPatterns.hour12h, string);

        case 'ho':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 12;
    },
    set: function (date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;

      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }

      return date;
    },
    incompatibleTokens: ['H', 'K', 'k', 't', 'T']
  },
  // Hour [0-23]
  H: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'H':
          return parseNumericPattern(numericPatterns.hour23h, string);

        case 'Ho':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 23;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']
  },
  // Hour [0-11]
  K: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'K':
          return parseNumericPattern(numericPatterns.hour11h, string);

        case 'Ko':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;

      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }

      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T']
  },
  // Hour [1-24]
  k: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'k':
          return parseNumericPattern(numericPatterns.hour24h, string);

        case 'ko':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 24;
    },
    set: function (date, _flags, value, _options) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']
  },
  // Minute
  m: {
    priority: 60,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'm':
          return parseNumericPattern(numericPatterns.minute, string);

        case 'mo':
          return match.ordinalNumber(string, {
            unit: 'minute'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Second
  s: {
    priority: 50,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 's':
          return parseNumericPattern(numericPatterns.second, string);

        case 'so':
          return match.ordinalNumber(string, {
            unit: 'second'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCSeconds(value, 0);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Fraction of second
  S: {
    priority: 30,
    parse: function (string, token, _match, _options) {
      var valueCallback = function (value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };

      return parseNDigits(token.length, string, valueCallback);
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMilliseconds(value);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Timezone (ISO-8601. +00:00 is `'Z'`)
  X: {
    priority: 10,
    parse: function (string, token, _match, _options) {
      switch (token) {
        case 'X':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);

        case 'XX':
          return parseTimezonePattern(timezonePatterns.basic, string);

        case 'XXXX':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);

        case 'XXXXX':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);

        case 'XXX':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function (date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }

      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ['t', 'T', 'x']
  },
  // Timezone (ISO-8601)
  x: {
    priority: 10,
    parse: function (string, token, _match, _options) {
      switch (token) {
        case 'x':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);

        case 'xx':
          return parseTimezonePattern(timezonePatterns.basic, string);

        case 'xxxx':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);

        case 'xxxxx':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);

        case 'xxx':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function (date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }

      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ['t', 'T', 'X']
  },
  // Seconds timestamp
  t: {
    priority: 40,
    parse: function (string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function (_date, _flags, value, _options) {
      return [new Date(value * 1000), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: '*'
  },
  // Milliseconds timestamp
  T: {
    priority: 20,
    parse: function (string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function (_date, _flags, value, _options) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: '*'
  }
};

var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * parse('23 AM', 'HH a', new Date())
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 0001, ..., 999               |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
 *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
 *
 * `referenceDate` must be passed for correct work of the function.
 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Old `parse` was renamed to `toDate`.
 *   Now `parse` is a new function which parses a string using a provided format.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   parse('2016-01-01')
 *
 *   // v2.0.0 onward
 *   toDate('2016-01-01')
 *   parse('2016-01-01', 'yyyy-MM-dd', new Date())
 *   ```
 *
 * @param {String} dateString - the string to parse
 * @param {String} formatString - the string of tokens
 * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {Date} the parsed date
 * @throws {TypeError} 3 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.locale` must contain `match` property
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
 *   locale: eo
 * })
 * //=> Sun Feb 28 2010 00:00:00
 */

function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var options = dirtyOptions || {};
  var locale$1 = options.locale || locale;

  if (!locale$1.match) {
    throw new RangeError('locale must contain match property');
  }

  var localeFirstWeekContainsDate = locale$1.options && locale$1.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var localeWeekStartsOn = locale$1.options && locale$1.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  if (formatString === '') {
    if (dateString === '') {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }

  var subFnOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale$1 // If timezone isn't specified, it will be set to the system timezone

  };
  var setters = [{
    priority: TIMEZONE_UNIT_PRIORITY,
    set: dateToSystemTimezone,
    index: 0
  }];
  var i;
  var tokens = formatString.match(longFormattingTokensRegExp$1).map(function (substring) {
    var firstCharacter = substring[0];

    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale$1.formatLong, subFnOptions);
    }

    return substring;
  }).join('').match(formattingTokensRegExp$1);
  var usedTokens = [];

  for (i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
      throwProtectedError(token);
    }

    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
      throwProtectedError(token);
    }

    var firstCharacter = token[0];
    var parser = parsers[firstCharacter];

    if (parser) {
      var incompatibleTokens = parser.incompatibleTokens;

      if (Array.isArray(incompatibleTokens)) {
        var incompatibleToken = void 0;

        for (var _i = 0; _i < usedTokens.length; _i++) {
          var usedToken = usedTokens[_i].token;

          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
            incompatibleToken = usedTokens[_i];
            break;
          }
        }

        if (incompatibleToken) {
          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
        }
      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {
        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
      }

      usedTokens.push({
        token: firstCharacter,
        fullToken: token
      });
      var parseResult = parser.parse(dateString, token, locale$1.match, subFnOptions);

      if (!parseResult) {
        return new Date(NaN);
      }

      setters.push({
        priority: parser.priority,
        set: parser.set,
        validate: parser.validate,
        value: parseResult.value,
        index: setters.length
      });
      dateString = parseResult.rest;
    } else {
      if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
      } // Replace two single quote characters with one single quote character


      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString$1(token);
      } // Cut token from string, or, if string doesn't match the token, return Invalid Date


      if (dateString.indexOf(token) === 0) {
        dateString = dateString.slice(token.length);
      } else {
        return new Date(NaN);
      }
    }
  } // Check if the remaining input contains something other than whitespace


  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }

  var uniquePrioritySetters = setters.map(function (setter) {
    return setter.priority;
  }).sort(function (a, b) {
    return b - a;
  }).filter(function (priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function (priority) {
    return setters.filter(function (setter) {
      return setter.priority === priority;
    }).reverse();
  }).map(function (setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);

  if (isNaN(date)) {
    return new Date(NaN);
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37


  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};

  for (i = 0; i < uniquePrioritySetters.length; i++) {
    var setter = uniquePrioritySetters[i];

    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
      return new Date(NaN);
    }

    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)

    if (result[0]) {
      utcDate = result[0];
      assign(flags, result[1]); // Result is date
    } else {
      utcDate = result;
    }
  }

  return utcDate;
}

function dateToSystemTimezone(date, flags) {
  if (flags.timestampIsSet) {
    return date;
  }

  var convertedDate = new Date(0);
  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
  return convertedDate;
}

function cleanEscapedString$1(input) {
  return input.match(escapedStringRegExp$1)[1].replace(doubleQuoteRegExp$1, "'");
}

/**
 * @name setMonth
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} month - the month of the new date
 * @returns {Date} the new date with the month set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set February to 1 September 2014:
 * var result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */

function setMonth(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month
  // if the original date was the last day of the longer month

  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}

/**
 * @name setHours
 * @category Hour Helpers
 * @summary Set the hours to the given date.
 *
 * @description
 * Set the hours to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} hours - the hours of the new date
 * @returns {Date} the new date with the hours set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set 4 hours to 1 September 2014 11:30:00:
 * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)
 * //=> Mon Sep 01 2014 04:30:00
 */

function setHours(dirtyDate, dirtyHours) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var hours = toInteger(dirtyHours);
  date.setHours(hours);
  return date;
}

/**
 * @name setMinutes
 * @category Minute Helpers
 * @summary Set the minutes to the given date.
 *
 * @description
 * Set the minutes to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} minutes - the minutes of the new date
 * @returns {Date} the new date with the minutes set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set 45 minutes to 1 September 2014 11:30:40:
 * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:45:40
 */

function setMinutes(dirtyDate, dirtyMinutes) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var minutes = toInteger(dirtyMinutes);
  date.setMinutes(minutes);
  return date;
}

/**
 * @name setSeconds
 * @category Second Helpers
 * @summary Set the seconds to the given date.
 *
 * @description
 * Set the seconds to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} seconds - the seconds of the new date
 * @returns {Date} the new date with the seconds set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set 45 seconds to 1 September 2014 11:30:40:
 * var result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:30:45
 */

function setSeconds(dirtyDate, dirtySeconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var seconds = toInteger(dirtySeconds);
  date.setSeconds(seconds);
  return date;
}

/**
 * @name setYear
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} year - the year of the new date
 * @returns {Date} the new date with the year set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * var result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */

function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date

  if (isNaN(date)) {
    return new Date(NaN);
  }

  date.setFullYear(year);
  return date;
}

function Image(props) {
  return /*#__PURE__*/React.createElement("img", {
    className: props.className,
    src: props.src
  });
}

var Image$1 = React.memo(Image);

function transform_boolean() {
  return function (_ref) {
    var data = _ref.data;

    if (data === true) {
      return "Yes";
    } else {
      return "No";
    }
  };
}
function transform_dateFormat() {
  return function (_ref2) {
    var data = _ref2.data;
    return format(data, "M/d/yyyy");
  };
}
function transform_get(path) {
  return function (_ref3) {
    var data = _ref3.data;
    return lodash.get(data, path);
  };
}
function transform_mapGet(path) {
  return function (_ref4) {
    var data = _ref4.data;
    var results = lodash.map(data, function (obj) {
      return lodash.get(obj, path);
    }); // filters out undefined, null values

    return results.filter(function (val) {
      return val;
    });
  };
}
function transform_join() {
  return function (_ref5) {
    var data = _ref5.data;
    return data.join(", ");
  };
}
function transform_thumbnail(_ref6) {
  var width = _ref6.width,
      height = _ref6.height;
  return function (_ref7) {
    var data = _ref7.data;
    var newUrl = data.replace(/\/upload\//, "/upload/c_fill,h_".concat(height, ",w_").concat(width, "/"));
    var element = React.createElement(Image$1, {
      src: newUrl,
      className: "transform_thumbnail"
    }, null);
    return element;
  };
}

var DateFnsUtils = /** @class */ (function () {
    function DateFnsUtils(_a) {
        var locale = (_a === void 0 ? {} : _a).locale;
        this.yearFormat = "yyyy";
        this.yearMonthFormat = "MMMM yyyy";
        this.dateTime12hFormat = "MMMM do hh:mm aaaa";
        this.dateTime24hFormat = "MMMM do HH:mm";
        this.time12hFormat = "hh:mm a";
        this.time24hFormat = "HH:mm";
        this.dateFormat = "MMMM do";
        this.locale = locale;
    }
    // Note: date-fns input types are more lenient than this adapter, so we need to expose our more
    // strict signature and delegate to the more lenient signature. Otherwise, we have downstream type errors upon usage.
    DateFnsUtils.prototype.addDays = function (value, count) {
        return addDays(value, count);
    };
    DateFnsUtils.prototype.isValid = function (value) {
        return isValid(this.date(value));
    };
    DateFnsUtils.prototype.getDiff = function (value, comparing) {
        return differenceInMilliseconds(value, this.date(comparing));
    };
    DateFnsUtils.prototype.isAfter = function (value, comparing) {
        return isAfter(value, comparing);
    };
    DateFnsUtils.prototype.isBefore = function (value, comparing) {
        return isBefore(value, comparing);
    };
    DateFnsUtils.prototype.startOfDay = function (value) {
        return startOfDay(value);
    };
    DateFnsUtils.prototype.endOfDay = function (value) {
        return endOfDay(value);
    };
    DateFnsUtils.prototype.getHours = function (value) {
        return getHours(value);
    };
    DateFnsUtils.prototype.setHours = function (value, count) {
        return setHours(value, count);
    };
    DateFnsUtils.prototype.setMinutes = function (value, count) {
        return setMinutes(value, count);
    };
    DateFnsUtils.prototype.getSeconds = function (value) {
        return getSeconds(value);
    };
    DateFnsUtils.prototype.setSeconds = function (value, count) {
        return setSeconds(value, count);
    };
    DateFnsUtils.prototype.isSameDay = function (value, comparing) {
        return isSameDay(value, comparing);
    };
    DateFnsUtils.prototype.startOfMonth = function (value) {
        return startOfMonth(value);
    };
    DateFnsUtils.prototype.endOfMonth = function (value) {
        return endOfMonth(value);
    };
    DateFnsUtils.prototype.getYear = function (value) {
        return getYear(value);
    };
    DateFnsUtils.prototype.setYear = function (value, count) {
        return setYear(value, count);
    };
    DateFnsUtils.prototype.date = function (value) {
        if (typeof value === "undefined") {
            return new Date();
        }
        if (value === null) {
            return null;
        }
        return new Date(value);
    };
    DateFnsUtils.prototype.parse = function (value, formatString) {
        if (value === "") {
            return null;
        }
        return parse(value, formatString, new Date());
    };
    DateFnsUtils.prototype.format = function (date, formatString) {
        return format(date, formatString, { locale: this.locale });
    };
    DateFnsUtils.prototype.isEqual = function (date, comparing) {
        if (date === null && comparing === null) {
            return true;
        }
        return isEqual(date, comparing);
    };
    DateFnsUtils.prototype.isNull = function (date) {
        return date === null;
    };
    DateFnsUtils.prototype.isAfterDay = function (date, value) {
        return isAfter(date, endOfDay(value));
    };
    DateFnsUtils.prototype.isBeforeDay = function (date, value) {
        return isBefore(date, startOfDay(value));
    };
    DateFnsUtils.prototype.isBeforeYear = function (date, value) {
        return isBefore(date, startOfYear(value));
    };
    DateFnsUtils.prototype.isAfterYear = function (date, value) {
        return isAfter(date, endOfYear(value));
    };
    DateFnsUtils.prototype.formatNumber = function (numberToFormat) {
        return numberToFormat;
    };
    DateFnsUtils.prototype.getMinutes = function (date) {
        return date.getMinutes();
    };
    DateFnsUtils.prototype.getMonth = function (date) {
        return date.getMonth();
    };
    DateFnsUtils.prototype.setMonth = function (date, count) {
        return setMonth(date, count);
    };
    DateFnsUtils.prototype.getMeridiemText = function (ampm) {
        return ampm === "am" ? "AM" : "PM";
    };
    DateFnsUtils.prototype.getNextMonth = function (date) {
        return addMonths(date, 1);
    };
    DateFnsUtils.prototype.getPreviousMonth = function (date) {
        return addMonths(date, -1);
    };
    DateFnsUtils.prototype.getMonthArray = function (date) {
        var firstMonth = startOfYear(date);
        var monthArray = [firstMonth];
        while (monthArray.length < 12) {
            var prevMonth = monthArray[monthArray.length - 1];
            monthArray.push(this.getNextMonth(prevMonth));
        }
        return monthArray;
    };
    DateFnsUtils.prototype.mergeDateAndTime = function (date, time) {
        return this.setMinutes(this.setHours(date, this.getHours(time)), this.getMinutes(time));
    };
    DateFnsUtils.prototype.getWeekdays = function () {
        var _this = this;
        var now = new Date();
        return eachDayOfInterval({
            start: startOfWeek(now, { locale: this.locale }),
            end: endOfWeek(now, { locale: this.locale })
        }).map(function (day) { return format(day, "EEEEEE", { locale: _this.locale }); });
    };
    DateFnsUtils.prototype.getWeekArray = function (date) {
        var start = startOfWeek(startOfMonth(date), { locale: this.locale });
        var end = endOfWeek(endOfMonth(date), { locale: this.locale });
        var count = 0;
        var current = start;
        var nestedWeeks = [];
        while (isBefore(current, end)) {
            var weekNumber = Math.floor(count / 7);
            nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
            nestedWeeks[weekNumber].push(current);
            current = addDays(current, 1);
            count += 1;
        }
        return nestedWeeks;
    };
    DateFnsUtils.prototype.getYearRange = function (start, end) {
        var startDate = startOfYear(start);
        var endDate = endOfYear(end);
        var years = [];
        var current = startDate;
        while (isBefore(current, endDate)) {
            years.push(current);
            current = addYears(current, 1);
        }
        return years;
    };
    // displaying methpds
    DateFnsUtils.prototype.getCalendarHeaderText = function (date) {
        return format(date, this.yearMonthFormat, { locale: this.locale });
    };
    DateFnsUtils.prototype.getYearText = function (date) {
        return format(date, "yyyy", { locale: this.locale });
    };
    DateFnsUtils.prototype.getDatePickerHeaderText = function (date) {
        return format(date, "EEE, MMM d", { locale: this.locale });
    };
    DateFnsUtils.prototype.getDateTimePickerHeaderText = function (date) {
        return format(date, "MMM d", { locale: this.locale });
    };
    DateFnsUtils.prototype.getMonthText = function (date) {
        return format(date, "MMMM", { locale: this.locale });
    };
    DateFnsUtils.prototype.getDayText = function (date) {
        return format(date, "d", { locale: this.locale });
    };
    DateFnsUtils.prototype.getHourText = function (date, ampm) {
        return format(date, ampm ? "hh" : "HH", { locale: this.locale });
    };
    DateFnsUtils.prototype.getMinuteText = function (date) {
        return format(date, "mm", { locale: this.locale });
    };
    DateFnsUtils.prototype.getSecondText = function (date) {
        return format(date, "ss", { locale: this.locale });
    };
    return DateFnsUtils;
}());

function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

var checkPropTypes_1 = checkPropTypes;

var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning$1 = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning$1 = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning$1(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning$1(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has$1(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$1(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = reactIs;

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});
var propTypes_1 = propTypes.array;
var propTypes_2 = propTypes.bool;
var propTypes_3 = propTypes.func;
var propTypes_4 = propTypes.number;
var propTypes_5 = propTypes.object;
var propTypes_6 = propTypes.string;
var propTypes_7 = propTypes.symbol;
var propTypes_8 = propTypes.any;
var propTypes_9 = propTypes.arrayOf;
var propTypes_10 = propTypes.element;
var propTypes_11 = propTypes.elementType;
var propTypes_12 = propTypes.instanceOf;
var propTypes_13 = propTypes.node;
var propTypes_14 = propTypes.objectOf;
var propTypes_15 = propTypes.oneOf;
var propTypes_16 = propTypes.oneOfType;
var propTypes_17 = propTypes.shape;
var propTypes_18 = propTypes.exact;
var propTypes_19 = propTypes.checkPropTypes;
var propTypes_20 = propTypes.resetWarningCache;
var propTypes_21 = propTypes.PropTypes;

var MuiPickersContext = React.createContext(null);
var MuiPickersUtilsProvider = function MuiPickersUtilsProvider(_ref) {
  var Utils = _ref.utils,
      children = _ref.children,
      locale = _ref.locale,
      libInstance = _ref.libInstance;
  var utils = React.useMemo(function () {
    return new Utils({
      locale: locale,
      instance: libInstance
    });
  }, [Utils, libInstance, locale]);
  return React.createElement(MuiPickersContext.Provider, {
    value: utils,
    children: children
  });
};
process.env.NODE_ENV !== "production" ? MuiPickersUtilsProvider.propTypes = {
  utils: propTypes_3.isRequired,
  locale: propTypes_16([propTypes_5, propTypes_6]),
  children: propTypes_16([propTypes_10.isRequired, propTypes_9(propTypes_10.isRequired)]).isRequired
} : void 0;

var checkUtils = function checkUtils(utils) {
  if (!utils) {
    // tslint:disable-next-line
    throw new Error('Can not find utils in context. You either a) forgot to wrap your component tree in MuiPickersUtilsProvider; or b) mixed named and direct file imports.  Recommendation: use named imports from the module index.');
  }
};
function useUtils() {
  var utils = React.useContext(MuiPickersContext);
  checkUtils(utils);
  return utils;
}

function toVal(mix) {
	var k, y, str='';

	if (typeof mix === 'string' || typeof mix === 'number') {
		str += mix;
	} else if (typeof mix === 'object') {
		if (Array.isArray(mix)) {
			for (k=0; k < mix.length; k++) {
				if (mix[k]) {
					if (y = toVal(mix[k])) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else {
			for (k in mix) {
				if (mix[k]) {
					str && (str += ' ');
					str += k;
				}
			}
		}
	}

	return str;
}

function clsx () {
	var i=0, tmp, x, str='';
	while (i < arguments.length) {
		if (tmp = arguments[i++]) {
			if (x = toVal(tmp)) {
				str && (str += ' ');
				str += x;
			}
		}
	}
	return str;
}

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$1.apply(this, arguments);
}

function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties$1(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose$1(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

/** Use it instead of .includes method for IE support */
function arrayIncludes(array, itemOrItems) {
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.every(function (item) {
      return array.indexOf(item) !== -1;
    });
  }

  return array.indexOf(itemOrItems) !== -1;
}

var DIALOG_WIDTH = 310;
var DIALOG_WIDTH_WIDER = 325;
var VIEW_HEIGHT = 305;

var useStyles = styles$4.makeStyles(function (theme) {
  return {
    staticWrapperRoot: {
      overflow: 'hidden',
      minWidth: DIALOG_WIDTH,
      display: 'flex',
      flexDirection: 'column',
      backgroundColor: theme.palette.background.paper
    }
  };
}, {
  name: 'MuiPickersStaticWrapper'
});
var StaticWrapper = function StaticWrapper(_ref) {
  var children = _ref.children;
  var classes = useStyles();
  return React.createElement("div", {
    className: classes.staticWrapperRoot,
    children: children
  });
};

var ModalDialog = function ModalDialog(_ref) {
  var children = _ref.children,
      classes = _ref.classes,
      onAccept = _ref.onAccept,
      onDismiss = _ref.onDismiss,
      onClear = _ref.onClear,
      onSetToday = _ref.onSetToday,
      okLabel = _ref.okLabel,
      cancelLabel = _ref.cancelLabel,
      clearLabel = _ref.clearLabel,
      todayLabel = _ref.todayLabel,
      clearable = _ref.clearable,
      showTodayButton = _ref.showTodayButton,
      showTabs = _ref.showTabs,
      wider = _ref.wider,
      other = _objectWithoutProperties$1(_ref, ["children", "classes", "onAccept", "onDismiss", "onClear", "onSetToday", "okLabel", "cancelLabel", "clearLabel", "todayLabel", "clearable", "showTodayButton", "showTabs", "wider"]);

  return React.createElement(Dialog$1, _extends$1({
    role: "dialog",
    onClose: onDismiss,
    classes: {
      paper: clsx(classes.dialogRoot, wider && classes.dialogRootWider)
    }
  }, other), React.createElement(DialogContent, {
    children: children,
    className: classes.dialog
  }), React.createElement(DialogActions, {
    classes: {
      root: clsx((clearable || showTodayButton) && classes.withAdditionalAction)
    }
  }, clearable && React.createElement(Button$2, {
    color: "primary",
    onClick: onClear
  }, clearLabel), showTodayButton && React.createElement(Button$2, {
    color: "primary",
    onClick: onSetToday
  }, todayLabel), cancelLabel && React.createElement(Button$2, {
    color: "primary",
    onClick: onDismiss
  }, cancelLabel), okLabel && React.createElement(Button$2, {
    color: "primary",
    onClick: onAccept
  }, okLabel)));
};
ModalDialog.displayName = 'ModalDialog';
var styles = styles$4.createStyles({
  dialogRoot: {
    minWidth: DIALOG_WIDTH
  },
  dialogRootWider: {
    minWidth: DIALOG_WIDTH_WIDER
  },
  dialog: {
    '&:first-child': {
      padding: 0
    }
  },
  withAdditionalAction: {
    // set justifyContent to default value to fix IE11 layout bug
    // see https://github.com/dmtrKovalenko/material-ui-pickers/pull/267
    justifyContent: 'flex-start',
    '& > *:first-child': {
      marginRight: 'auto'
    }
  }
});
var ModalDialog$1 = styles$4.withStyles(styles, {
  name: 'MuiPickersModal'
})(ModalDialog);

var useIsomorphicEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;
function runKeyHandler(e, keyHandlers) {
  var handler = keyHandlers[e.key];

  if (handler) {
    handler(); // if event was handled prevent other side effects (e.g. page scroll)

    e.preventDefault();
  }
}
function useKeyDown(active, keyHandlers) {
  var keyHandlersRef = React.useRef(keyHandlers);
  keyHandlersRef.current = keyHandlers;
  useIsomorphicEffect(function () {
    if (active) {
      var handleKeyDown = function handleKeyDown(event) {
        runKeyHandler(event, keyHandlersRef.current);
      };

      window.addEventListener('keydown', handleKeyDown);
      return function () {
        window.removeEventListener('keydown', handleKeyDown);
      };
    }
  }, [active]);
}

var ModalWrapper = function ModalWrapper(_ref) {
  var open = _ref.open,
      children = _ref.children,
      okLabel = _ref.okLabel,
      cancelLabel = _ref.cancelLabel,
      clearLabel = _ref.clearLabel,
      todayLabel = _ref.todayLabel,
      showTodayButton = _ref.showTodayButton,
      clearable = _ref.clearable,
      DialogProps = _ref.DialogProps,
      showTabs = _ref.showTabs,
      wider = _ref.wider,
      InputComponent = _ref.InputComponent,
      DateInputProps = _ref.DateInputProps,
      onClear = _ref.onClear,
      onAccept = _ref.onAccept,
      onDismiss = _ref.onDismiss,
      onSetToday = _ref.onSetToday,
      other = _objectWithoutProperties$1(_ref, ["open", "children", "okLabel", "cancelLabel", "clearLabel", "todayLabel", "showTodayButton", "clearable", "DialogProps", "showTabs", "wider", "InputComponent", "DateInputProps", "onClear", "onAccept", "onDismiss", "onSetToday"]);

  useKeyDown(open, {
    Enter: onAccept
  });
  return React.createElement(React.Fragment, null, React.createElement(InputComponent, _extends$1({}, other, DateInputProps)), React.createElement(ModalDialog$1, _extends$1({
    wider: wider,
    showTabs: showTabs,
    open: open,
    onClear: onClear,
    onAccept: onAccept,
    onDismiss: onDismiss,
    onSetToday: onSetToday,
    clearLabel: clearLabel,
    todayLabel: todayLabel,
    okLabel: okLabel,
    cancelLabel: cancelLabel,
    clearable: clearable,
    showTodayButton: showTodayButton,
    children: children
  }, DialogProps)));
};
process.env.NODE_ENV !== "production" ? ModalWrapper.propTypes = {
  okLabel: propTypes_13,
  cancelLabel: propTypes_13,
  clearLabel: propTypes_13,
  clearable: propTypes_2,
  todayLabel: propTypes_13,
  showTodayButton: propTypes_2,
  DialogProps: propTypes_5
} : void 0;
ModalWrapper.defaultProps = {
  okLabel: 'OK',
  cancelLabel: 'Cancel',
  clearLabel: 'Clear',
  todayLabel: 'Today',
  clearable: false,
  showTodayButton: false
};

var InlineWrapper = function InlineWrapper(_ref) {
  var open = _ref.open,
      wider = _ref.wider,
      children = _ref.children,
      PopoverProps = _ref.PopoverProps,
      onClear = _ref.onClear,
      onDismiss = _ref.onDismiss,
      onSetToday = _ref.onSetToday,
      onAccept = _ref.onAccept,
      showTabs = _ref.showTabs,
      DateInputProps = _ref.DateInputProps,
      InputComponent = _ref.InputComponent,
      other = _objectWithoutProperties$1(_ref, ["open", "wider", "children", "PopoverProps", "onClear", "onDismiss", "onSetToday", "onAccept", "showTabs", "DateInputProps", "InputComponent"]);

  var ref = React.useRef();
  useKeyDown(open, {
    Enter: onAccept
  });
  return React.createElement(React.Fragment, null, React.createElement(InputComponent, _extends$1({}, other, DateInputProps, {
    inputRef: ref
  })), React.createElement(Popover, _extends$1({
    open: open,
    onClose: onDismiss,
    anchorEl: ref.current,
    anchorOrigin: {
      vertical: 'bottom',
      horizontal: 'center'
    },
    transformOrigin: {
      vertical: 'top',
      horizontal: 'center'
    },
    children: children
  }, PopoverProps)));
};
process.env.NODE_ENV !== "production" ? InlineWrapper.propTypes = {
  onOpen: propTypes_3,
  onClose: propTypes_3,
  PopoverProps: propTypes_5
} : void 0;

function getWrapperFromVariant(variant) {
  switch (variant) {
    case 'inline':
      return InlineWrapper;

    case 'static':
      return StaticWrapper;

    default:
      return ModalWrapper;
  }
}
var VariantContext = React.createContext(null);
var Wrapper = function Wrapper(_ref) {
  var variant = _ref.variant,
      props = _objectWithoutProperties$1(_ref, ["variant"]);

  var Component = getWrapperFromVariant(variant);
  return React.createElement(VariantContext.Provider, {
    value: variant || 'dialog'
  }, React.createElement(Component, props));
};

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var Rifm =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Rifm, _React$Component);

  function Rifm(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this._state = null;
    _this._del = false;

    _this._handleChange = function (evt) {
      if (process.env.NODE_ENV !== 'production') {
        if (evt.target.type === 'number') {
          console.error('Rifm does not support input type=number, use type=tel instead.');
          return;
        }
      } // FUTURE: use evt.nativeEvent.inputType for del event, see comments at onkeydown


      var stateValue = _this.state.value;
      var value = evt.target.value;
      var input = evt.target;
      var op = value.length > stateValue.length;
      var del = _this._del;

      var noOp = stateValue === _this.props.format(value);

      _this.setState({
        value: value,
        local: true
      }, function () {
        var selectionStart = input.selectionStart;
        var refuse = _this.props.refuse || /[^\d]+/g;
        var before = value.substr(0, selectionStart).replace(refuse, '');
        _this._state = {
          input: input,
          before: before,
          op: op,
          di: del && noOp,
          del: del
        };

        if (_this.props.replace && _this.props.replace(stateValue) && op && !noOp) {
          var start = -1;

          for (var i = 0; i !== before.length; ++i) {
            start = Math.max(start, value.toLowerCase().indexOf(before[i].toLowerCase(), start + 1));
          }

          var c = value.substr(start + 1).replace(refuse, '')[0];
          start = value.indexOf(c, start + 1);
          value = "" + value.substr(0, start) + value.substr(start + 1);
        }

        var fv = _this.props.format(value);

        if (stateValue === fv) {
          _this.setState({
            value: value
          });
        } else {
          _this.props.onChange(fv);
        }
      });
    };

    _this._hKD = function (evt) {
      if (evt.code === 'Delete') {
        _this._del = true;
      }
    };

    _this._hKU = function (evt) {
      if (evt.code === 'Delete') {
        _this._del = false;
      }
    };

    _this.state = {
      value: props.value,
      local: true
    };
    return _this;
  }

  Rifm.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    return {
      value: state.local ? state.value : props.value,
      local: false
    };
  };

  var _proto = Rifm.prototype;

  _proto.render = function render() {
    var _handleChange = this._handleChange,
        value = this.state.value,
        children = this.props.children;
    return children({
      value: value,
      onChange: _handleChange
    });
  } // delete when  https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported by all major browsers
  ;

  _proto.componentWillUnmount = function componentWillUnmount() {
    document.removeEventListener('keydown', this._hKD);
    document.removeEventListener('keyup', this._hKU);
  } // delete when  https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported by all major browsers
  ;

  _proto.componentDidMount = function componentDidMount() {
    document.addEventListener('keydown', this._hKD);
    document.addEventListener('keyup', this._hKU);
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    var _state = this._state;

    if (_state) {
      var value = this.state.value;
      var start = -1;

      for (var i = 0; i !== _state.before.length; ++i) {
        start = Math.max(start, value.toLowerCase().indexOf(_state.before[i].toLowerCase(), start + 1));
      } // format usually looks better without this


      if (this.props.replace && (_state.op || _state.del && !_state.di)) {
        while (value[start + 1] && (this.props.refuse || /[^\d]+/).test(value[start + 1])) {
          start += 1;
        }
      }

      _state.input.selectionStart = _state.input.selectionEnd = start + 1 + (_state.di ? 1 : 0);
    }

    this._state = null;
  };

  return Rifm;
}(React.Component);

function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit$1(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _slicedToArray$1(arr, i) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _nonIterableRest$1();
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

var useStyles$1 = styles$4.makeStyles(function (theme) {
  return {
    day: {
      width: 36,
      height: 36,
      fontSize: theme.typography.caption.fontSize,
      margin: '0 2px',
      color: theme.palette.text.primary,
      fontWeight: theme.typography.fontWeightMedium,
      padding: 0
    },
    hidden: {
      opacity: 0,
      pointerEvents: 'none'
    },
    current: {
      color: theme.palette.primary.main,
      fontWeight: 600
    },
    daySelected: {
      color: theme.palette.primary.contrastText,
      backgroundColor: theme.palette.primary.main,
      fontWeight: theme.typography.fontWeightMedium,
      '&:hover': {
        backgroundColor: theme.palette.primary.main
      }
    },
    dayDisabled: {
      pointerEvents: 'none',
      color: theme.palette.text.hint
    }
  };
}, {
  name: 'MuiPickersDay'
});
var Day = function Day(_ref) {
  var children = _ref.children,
      disabled = _ref.disabled,
      hidden = _ref.hidden,
      current = _ref.current,
      selected = _ref.selected,
      other = _objectWithoutProperties$1(_ref, ["children", "disabled", "hidden", "current", "selected"]);

  var classes = useStyles$1();
  var className = clsx(classes.day, hidden && classes.hidden, current && classes.current, selected && classes.daySelected, disabled && classes.dayDisabled);
  return React.createElement(IconButton, _extends$1({
    className: className,
    tabIndex: hidden || disabled ? -1 : 0
  }, other), React.createElement(Typography, {
    variant: "body2",
    color: "inherit"
  }, children));
};
Day.displayName = 'Day';
process.env.NODE_ENV !== "production" ? Day.propTypes = {
  current: propTypes_2,
  disabled: propTypes_2,
  hidden: propTypes_2,
  selected: propTypes_2
} : void 0;
Day.defaultProps = {
  disabled: false,
  hidden: false,
  current: false,
  selected: false
};

var findClosestEnabledDate = function findClosestEnabledDate(_ref) {
  var date = _ref.date,
      utils = _ref.utils,
      minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      disableFuture = _ref.disableFuture,
      disablePast = _ref.disablePast,
      shouldDisableDate = _ref.shouldDisableDate;
  var today = utils.startOfDay(utils.date());

  if (disablePast && utils.isBefore(minDate, today)) {
    minDate = today;
  }

  if (disableFuture && utils.isAfter(maxDate, today)) {
    maxDate = today;
  }

  var forward = date;
  var backward = date;

  if (utils.isBefore(date, minDate)) {
    forward = utils.date(minDate);
    backward = null;
  }

  if (utils.isAfter(date, maxDate)) {
    if (backward) {
      backward = utils.date(maxDate);
    }

    forward = null;
  }

  while (forward || backward) {
    if (forward && utils.isAfter(forward, maxDate)) {
      forward = null;
    }

    if (backward && utils.isBefore(backward, minDate)) {
      backward = null;
    }

    if (forward) {
      if (!shouldDisableDate(forward)) {
        return forward;
      }

      forward = utils.addDays(forward, 1);
    }

    if (backward) {
      if (!shouldDisableDate(backward)) {
        return backward;
      }

      backward = utils.addDays(backward, -1);
    }
  } // fallback to today if no enabled days


  return utils.date();
};
var isYearOnlyView = function isYearOnlyView(views) {
  return views.length === 1 && views[0] === 'year';
};
var isYearAndMonthViews = function isYearAndMonthViews(views) {
  return views.length === 2 && arrayIncludes(views, 'month') && arrayIncludes(views, 'year');
};
var getFormatByViews = function getFormatByViews(views, utils) {
  if (isYearOnlyView(views)) {
    return utils.yearFormat;
  }

  if (isYearAndMonthViews(views)) {
    return utils.yearMonthFormat;
  }

  return utils.dateFormat;
};

var DayWrapper = function DayWrapper(_ref) {
  var children = _ref.children,
      value = _ref.value,
      disabled = _ref.disabled,
      onSelect = _ref.onSelect,
      dayInCurrentMonth = _ref.dayInCurrentMonth,
      other = _objectWithoutProperties$1(_ref, ["children", "value", "disabled", "onSelect", "dayInCurrentMonth"]);

  var handleClick = React.useCallback(function () {
    return onSelect(value);
  }, [onSelect, value]);
  return React.createElement("div", _extends$1({
    role: "presentation",
    onClick: dayInCurrentMonth && !disabled ? handleClick : undefined,
    onKeyPress: dayInCurrentMonth && !disabled ? handleClick : undefined
  }, other), children);
};

var animationDuration = 350;
var useStyles$2 = styles$4.makeStyles(function (theme) {
  var slideTransition = theme.transitions.create('transform', {
    duration: animationDuration,
    easing: 'cubic-bezier(0.35, 0.8, 0.4, 1)'
  });
  return {
    transitionContainer: {
      display: 'block',
      position: 'relative',
      '& > *': {
        position: 'absolute',
        top: 0,
        right: 0,
        left: 0
      }
    },
    'slideEnter-left': {
      willChange: 'transform',
      transform: 'translate(100%)'
    },
    'slideEnter-right': {
      willChange: 'transform',
      transform: 'translate(-100%)'
    },
    slideEnterActive: {
      transform: 'translate(0%)',
      transition: slideTransition
    },
    slideExit: {
      transform: 'translate(0%)'
    },
    'slideExitActiveLeft-left': {
      willChange: 'transform',
      transform: 'translate(-200%)',
      transition: slideTransition
    },
    'slideExitActiveLeft-right': {
      willChange: 'transform',
      transform: 'translate(200%)',
      transition: slideTransition
    }
  };
}, {
  name: 'MuiPickersSlideTransition'
});

var SlideTransition = function SlideTransition(_ref) {
  var children = _ref.children,
      transKey = _ref.transKey,
      slideDirection = _ref.slideDirection,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? null : _ref$className;
  var classes = useStyles$2();
  var transitionClasses = {
    exit: classes.slideExit,
    enterActive: classes.slideEnterActive,
    // @ts-ignore
    enter: classes['slideEnter-' + slideDirection],
    // @ts-ignore
    exitActive: classes['slideExitActiveLeft-' + slideDirection]
  };
  return React.createElement(reactTransitionGroup.TransitionGroup, {
    className: clsx(classes.transitionContainer, className),
    childFactory: function childFactory(element) {
      return React.cloneElement(element, {
        classNames: transitionClasses
      });
    }
  }, React.createElement(reactTransitionGroup.CSSTransition, {
    mountOnEnter: true,
    unmountOnExit: true,
    key: transKey + slideDirection,
    timeout: animationDuration,
    classNames: transitionClasses,
    children: children
  }));
};

var ArrowLeftIcon = function ArrowLeftIcon(props) {
  return React__default.createElement(SvgIcon, props, React__default.createElement("path", {
    d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
  }), React__default.createElement("path", {
    fill: "none",
    d: "M0 0h24v24H0V0z"
  }));
};

var ArrowRightIcon = function ArrowRightIcon(props) {
  return React__default.createElement(SvgIcon, props, React__default.createElement("path", {
    d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
  }), React__default.createElement("path", {
    fill: "none",
    d: "M0 0h24v24H0V0z"
  }));
};

var useStyles$1$1 = styles$4.makeStyles(function (theme) {
  return {
    switchHeader: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      marginTop: theme.spacing(0.5),
      marginBottom: theme.spacing(1)
    },
    transitionContainer: {
      width: '100%',
      overflow: 'hidden',
      height: 23
    },
    iconButton: {
      zIndex: 1,
      backgroundColor: theme.palette.background.paper
    },
    daysHeader: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      maxHeight: 16
    },
    dayLabel: {
      width: 36,
      margin: '0 2px',
      textAlign: 'center',
      color: theme.palette.text.hint
    }
  };
}, {
  name: 'MuiPickersCalendarHeader'
});
var CalendarHeader = function CalendarHeader(_ref) {
  var currentMonth = _ref.currentMonth,
      onMonthChange = _ref.onMonthChange,
      leftArrowIcon = _ref.leftArrowIcon,
      rightArrowIcon = _ref.rightArrowIcon,
      leftArrowButtonProps = _ref.leftArrowButtonProps,
      rightArrowButtonProps = _ref.rightArrowButtonProps,
      disablePrevMonth = _ref.disablePrevMonth,
      disableNextMonth = _ref.disableNextMonth,
      slideDirection = _ref.slideDirection;
  var utils = useUtils();
  var classes = useStyles$1$1();
  var theme = styles$4.useTheme();
  var rtl = theme.direction === 'rtl';

  var selectNextMonth = function selectNextMonth() {
    return onMonthChange(utils.getNextMonth(currentMonth), 'left');
  };

  var selectPreviousMonth = function selectPreviousMonth() {
    return onMonthChange(utils.getPreviousMonth(currentMonth), 'right');
  };

  return React.createElement("div", null, React.createElement("div", {
    className: classes.switchHeader
  }, React.createElement(IconButton, _extends$1({}, leftArrowButtonProps, {
    disabled: disablePrevMonth,
    onClick: selectPreviousMonth,
    className: classes.iconButton
  }), rtl ? rightArrowIcon : leftArrowIcon), React.createElement(SlideTransition, {
    slideDirection: slideDirection,
    transKey: currentMonth.toString(),
    className: classes.transitionContainer
  }, React.createElement(Typography, {
    align: "center",
    variant: "body1"
  }, utils.getCalendarHeaderText(currentMonth))), React.createElement(IconButton, _extends$1({}, rightArrowButtonProps, {
    disabled: disableNextMonth,
    onClick: selectNextMonth,
    className: classes.iconButton
  }), rtl ? leftArrowIcon : rightArrowIcon)), React.createElement("div", {
    className: classes.daysHeader
  }, utils.getWeekdays().map(function (day, index) {
    return React.createElement(Typography, {
      key: index // eslint-disable-line react/no-array-index-key
      ,
      variant: "caption",
      className: classes.dayLabel
    }, day);
  })));
};
CalendarHeader.displayName = 'CalendarHeader';
process.env.NODE_ENV !== "production" ? CalendarHeader.propTypes = {
  leftArrowIcon: propTypes_13,
  rightArrowIcon: propTypes_13,
  disablePrevMonth: propTypes_2,
  disableNextMonth: propTypes_2
} : void 0;
CalendarHeader.defaultProps = {
  leftArrowIcon: React.createElement(ArrowLeftIcon, null),
  rightArrowIcon: React.createElement(ArrowRightIcon, null),
  disablePrevMonth: false,
  disableNextMonth: false
};

var withUtils = function withUtils() {
  return function (Component) {
    var WithUtils = function WithUtils(props) {
      var utils = useUtils();
      return React.createElement(Component, _extends$1({
        utils: utils
      }, props));
    };

    WithUtils.displayName = "WithUtils(".concat(Component.displayName || Component.name, ")");
    return WithUtils;
  };
};

var KeyDownListener = function KeyDownListener(_ref) {
  var onKeyDown = _ref.onKeyDown;
  React.useEffect(function () {
    window.addEventListener('keydown', onKeyDown);
    return function () {
      window.removeEventListener('keydown', onKeyDown);
    };
  }, [onKeyDown]);
  return null;
};

var Calendar =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Calendar, _React$Component);

  function Calendar() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Calendar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Calendar)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      slideDirection: 'left',
      currentMonth: _this.props.utils.startOfMonth(_this.props.date),
      loadingQueue: 0
    };

    _this.pushToLoadingQueue = function () {
      var loadingQueue = _this.state.loadingQueue + 1;

      _this.setState({
        loadingQueue: loadingQueue
      });
    };

    _this.popFromLoadingQueue = function () {
      var loadingQueue = _this.state.loadingQueue;
      loadingQueue = loadingQueue <= 0 ? 0 : loadingQueue - 1;

      _this.setState({
        loadingQueue: loadingQueue
      });
    };

    _this.handleChangeMonth = function (newMonth, slideDirection) {
      _this.setState({
        currentMonth: newMonth,
        slideDirection: slideDirection
      });

      if (_this.props.onMonthChange) {
        var returnVal = _this.props.onMonthChange(newMonth);

        if (returnVal) {
          _this.pushToLoadingQueue();

          returnVal.then(function () {
            _this.popFromLoadingQueue();
          });
        }
      }
    };

    _this.validateMinMaxDate = function (day) {
      var _this$props = _this.props,
          minDate = _this$props.minDate,
          maxDate = _this$props.maxDate,
          utils = _this$props.utils,
          disableFuture = _this$props.disableFuture,
          disablePast = _this$props.disablePast;
      var now = utils.date();
      return Boolean(disableFuture && utils.isAfterDay(day, now) || disablePast && utils.isBeforeDay(day, now) || minDate && utils.isBeforeDay(day, utils.date(minDate)) || maxDate && utils.isAfterDay(day, utils.date(maxDate)));
    };

    _this.shouldDisablePrevMonth = function () {
      var _this$props2 = _this.props,
          utils = _this$props2.utils,
          disablePast = _this$props2.disablePast,
          minDate = _this$props2.minDate;
      var now = utils.date();
      var firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, utils.date(minDate)) ? now : utils.date(minDate));
      return !utils.isBefore(firstEnabledMonth, _this.state.currentMonth);
    };

    _this.shouldDisableNextMonth = function () {
      var _this$props3 = _this.props,
          utils = _this$props3.utils,
          disableFuture = _this$props3.disableFuture,
          maxDate = _this$props3.maxDate;
      var now = utils.date();
      var lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, utils.date(maxDate)) ? now : utils.date(maxDate));
      return !utils.isAfter(lastEnabledMonth, _this.state.currentMonth);
    };

    _this.shouldDisableDate = function (day) {
      var shouldDisableDate = _this.props.shouldDisableDate;
      return _this.validateMinMaxDate(day) || Boolean(shouldDisableDate && shouldDisableDate(day));
    };

    _this.handleDaySelect = function (day) {
      var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var _this$props4 = _this.props,
          date = _this$props4.date,
          utils = _this$props4.utils;

      _this.props.onChange(utils.mergeDateAndTime(day, date), isFinish);
    };

    _this.moveToDay = function (day) {
      var utils = _this.props.utils;

      if (day && !_this.shouldDisableDate(day)) {
        if (utils.getMonth(day) !== utils.getMonth(_this.state.currentMonth)) {
          _this.handleChangeMonth(utils.startOfMonth(day), 'left');
        }

        _this.handleDaySelect(day, false);
      }
    };

    _this.handleKeyDown = function (event) {
      var _this$props5 = _this.props,
          theme = _this$props5.theme,
          date = _this$props5.date,
          utils = _this$props5.utils;
      runKeyHandler(event, {
        ArrowUp: function ArrowUp() {
          return _this.moveToDay(utils.addDays(date, -7));
        },
        ArrowDown: function ArrowDown() {
          return _this.moveToDay(utils.addDays(date, 7));
        },
        ArrowLeft: function ArrowLeft() {
          return _this.moveToDay(utils.addDays(date, theme.direction === 'ltr' ? -1 : 1));
        },
        ArrowRight: function ArrowRight() {
          return _this.moveToDay(utils.addDays(date, theme.direction === 'ltr' ? 1 : -1));
        }
      });
    };

    _this.renderWeeks = function () {
      var _this$props6 = _this.props,
          utils = _this$props6.utils,
          classes = _this$props6.classes;
      var weeks = utils.getWeekArray(_this.state.currentMonth);
      return weeks.map(function (week) {
        return React.createElement("div", {
          key: "week-".concat(week[0].toString()),
          className: classes.week
        }, _this.renderDays(week));
      });
    };

    _this.renderDays = function (week) {
      var _this$props7 = _this.props,
          date = _this$props7.date,
          renderDay = _this$props7.renderDay,
          utils = _this$props7.utils;
      var now = utils.date();
      var selectedDate = utils.startOfDay(date);
      var currentMonthNumber = utils.getMonth(_this.state.currentMonth);
      return week.map(function (day) {
        var disabled = _this.shouldDisableDate(day);

        var isDayInCurrentMonth = utils.getMonth(day) === currentMonthNumber;
        var dayComponent = React.createElement(Day, {
          disabled: disabled,
          current: utils.isSameDay(day, now),
          hidden: !isDayInCurrentMonth,
          selected: utils.isSameDay(selectedDate, day)
        }, utils.getDayText(day));

        if (renderDay) {
          dayComponent = renderDay(day, selectedDate, isDayInCurrentMonth, dayComponent);
        }

        return React.createElement(DayWrapper, {
          value: day,
          key: day.toString(),
          disabled: disabled,
          dayInCurrentMonth: isDayInCurrentMonth,
          onSelect: _this.handleDaySelect
        }, dayComponent);
      });
    };

    return _this;
  }

  _createClass(Calendar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props8 = this.props,
          date = _this$props8.date,
          minDate = _this$props8.minDate,
          maxDate = _this$props8.maxDate,
          utils = _this$props8.utils,
          disablePast = _this$props8.disablePast,
          disableFuture = _this$props8.disableFuture;

      if (this.shouldDisableDate(date)) {
        var closestEnabledDate = findClosestEnabledDate({
          date: date,
          utils: utils,
          minDate: utils.date(minDate),
          maxDate: utils.date(maxDate),
          disablePast: Boolean(disablePast),
          disableFuture: Boolean(disableFuture),
          shouldDisableDate: this.shouldDisableDate
        });
        this.handleDaySelect(closestEnabledDate, false);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          currentMonth = _this$state.currentMonth,
          slideDirection = _this$state.slideDirection;
      var _this$props9 = this.props,
          classes = _this$props9.classes,
          allowKeyboardControl = _this$props9.allowKeyboardControl,
          leftArrowButtonProps = _this$props9.leftArrowButtonProps,
          leftArrowIcon = _this$props9.leftArrowIcon,
          rightArrowButtonProps = _this$props9.rightArrowButtonProps,
          rightArrowIcon = _this$props9.rightArrowIcon,
          loadingIndicator = _this$props9.loadingIndicator;
      var loadingElement = loadingIndicator ? loadingIndicator : React.createElement(CircularProgress, null);
      return React.createElement(React.Fragment, null, allowKeyboardControl && this.context !== 'static' && React.createElement(KeyDownListener, {
        onKeyDown: this.handleKeyDown
      }), React.createElement(CalendarHeader, {
        currentMonth: currentMonth,
        slideDirection: slideDirection,
        onMonthChange: this.handleChangeMonth,
        leftArrowIcon: leftArrowIcon,
        leftArrowButtonProps: leftArrowButtonProps,
        rightArrowIcon: rightArrowIcon,
        rightArrowButtonProps: rightArrowButtonProps,
        disablePrevMonth: this.shouldDisablePrevMonth(),
        disableNextMonth: this.shouldDisableNextMonth()
      }), React.createElement(SlideTransition, {
        slideDirection: slideDirection,
        transKey: currentMonth.toString(),
        className: classes.transitionContainer
      }, React.createElement(React.Fragment, null, this.state.loadingQueue > 0 && React.createElement("div", {
        className: classes.progressContainer
      }, loadingElement) || React.createElement("div", null, this.renderWeeks()))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      var utils = nextProps.utils,
          nextDate = nextProps.date;

      if (!utils.isEqual(nextDate, state.lastDate)) {
        var nextMonth = utils.getMonth(nextDate);
        var lastDate = state.lastDate || nextDate;
        var lastMonth = utils.getMonth(lastDate);
        return {
          lastDate: nextDate,
          currentMonth: nextProps.utils.startOfMonth(nextDate),
          // prettier-ignore
          slideDirection: nextMonth === lastMonth ? state.slideDirection : utils.isAfterDay(nextDate, lastDate) ? 'left' : 'right'
        };
      }

      return null;
    }
  }]);

  return Calendar;
}(React.Component);
Calendar.contextType = VariantContext;
process.env.NODE_ENV !== "production" ? Calendar.propTypes = {
  renderDay: propTypes_3,
  shouldDisableDate: propTypes_3,
  allowKeyboardControl: propTypes_2
} : void 0;
Calendar.defaultProps = {
  minDate: new Date('1900-01-01'),
  maxDate: new Date('2100-01-01'),
  disablePast: false,
  disableFuture: false,
  allowKeyboardControl: true
};
var styles$1 = function styles(theme) {
  return {
    transitionContainer: {
      minHeight: 36 * 6,
      marginTop: theme.spacing(1.5)
    },
    progressContainer: {
      width: '100%',
      height: '100%',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    },
    week: {
      display: 'flex',
      justifyContent: 'center'
    }
  };
};
var Calendar$1 = styles$4.withStyles(styles$1, {
  name: 'MuiPickersCalendar',
  withTheme: true
})(withUtils()(Calendar));

var ClockType;

(function (ClockType) {
  ClockType["HOURS"] = "hours";
  ClockType["MINUTES"] = "minutes";
  ClockType["SECONDS"] = "seconds";
})(ClockType || (ClockType = {}));

var ClockType$1 = ClockType;

var ClockPointer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ClockPointer, _React$Component);

  function ClockPointer() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ClockPointer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ClockPointer)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      toAnimateTransform: false,
      previousType: undefined
    };

    _this.getAngleStyle = function () {
      var _this$props = _this.props,
          value = _this$props.value,
          isInner = _this$props.isInner,
          type = _this$props.type;
      var max = type === ClockType$1.HOURS ? 12 : 60;
      var angle = 360 / max * value;

      if (type === ClockType$1.HOURS && value > 12) {
        angle -= 360; // round up angle to max 360 degrees
      }

      return {
        height: isInner ? '26%' : '40%',
        transform: "rotateZ(".concat(angle, "deg)")
      };
    };

    return _this;
  }

  _createClass(ClockPointer, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          classes = _this$props2.classes,
          hasSelected = _this$props2.hasSelected;
      return React.createElement("div", {
        style: this.getAngleStyle(),
        className: clsx(classes.pointer, this.state.toAnimateTransform && classes.animateTransform)
      }, React.createElement("div", {
        className: clsx(classes.thumb, hasSelected && classes.noPoint)
      }));
    }
  }]);

  return ClockPointer;
}(React.Component);

ClockPointer.getDerivedStateFromProps = function (nextProps, state) {
  if (nextProps.type !== state.previousType) {
    return {
      toAnimateTransform: true,
      previousType: nextProps.type
    };
  }

  return {
    toAnimateTransform: false,
    previousType: nextProps.type
  };
};

var styles$2 = function styles(theme) {
  return styles$4.createStyles({
    pointer: {
      width: 2,
      backgroundColor: theme.palette.primary.main,
      position: 'absolute',
      left: 'calc(50% - 1px)',
      bottom: '50%',
      transformOrigin: 'center bottom 0px'
    },
    animateTransform: {
      transition: theme.transitions.create(['transform', 'height'])
    },
    thumb: {
      width: 4,
      height: 4,
      backgroundColor: theme.palette.primary.contrastText,
      borderRadius: '100%',
      position: 'absolute',
      top: -21,
      left: -15,
      border: "14px solid ".concat(theme.palette.primary.main),
      boxSizing: 'content-box'
    },
    noPoint: {
      backgroundColor: theme.palette.primary.main
    }
  });
};
var ClockPointer$1 = styles$4.withStyles(styles$2, {
  name: 'MuiPickersClockPointer'
})(ClockPointer);

var center = {
  x: 260 / 2,
  y: 260 / 2
};
var basePoint = {
  x: center.x,
  y: 0
};
var cx = basePoint.x - center.x;
var cy = basePoint.y - center.y;

var rad2deg = function rad2deg(rad) {
  return rad * 57.29577951308232;
};

var getAngleValue = function getAngleValue(step, offsetX, offsetY) {
  var x = offsetX - center.x;
  var y = offsetY - center.y;
  var atan = Math.atan2(cx, cy) - Math.atan2(x, y);
  var deg = rad2deg(atan);
  deg = Math.round(deg / step) * step;
  deg %= 360;
  var value = Math.floor(deg / step) || 0;
  var delta = Math.pow(x, 2) + Math.pow(y, 2);
  var distance = Math.sqrt(delta);
  return {
    value: value,
    distance: distance
  };
};

var getHours$1 = function getHours(offsetX, offsetY, ampm) {
  var _getAngleValue = getAngleValue(30, offsetX, offsetY),
      value = _getAngleValue.value,
      distance = _getAngleValue.distance;

  value = value || 12;

  if (!ampm) {
    if (distance < 90) {
      value += 12;
      value %= 24;
    }
  } else {
    value %= 12;
  }

  return value;
};
var getMinutes = function getMinutes(offsetX, offsetY) {
  var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var angleStep = step * 6;

  var _getAngleValue2 = getAngleValue(angleStep, offsetX, offsetY),
      value = _getAngleValue2.value;

  value = value * step % 60;
  return value;
};
var getMeridiem = function getMeridiem(date, utils) {
  return utils.getHours(date) >= 12 ? 'pm' : 'am';
};
var convertToMeridiem = function convertToMeridiem(time, meridiem, ampm, utils) {
  if (ampm) {
    var currentMeridiem = utils.getHours(time) >= 12 ? 'pm' : 'am';

    if (currentMeridiem !== meridiem) {
      var hours = meridiem === 'am' ? utils.getHours(time) - 12 : utils.getHours(time) + 12;
      return utils.setHours(time, hours);
    }
  }

  return time;
};

var Clock =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Clock, _React$Component);

  function Clock() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Clock);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Clock)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.isMoving = false;

    _this.handleTouchMove = function (e) {
      _this.isMoving = true;

      _this.setTime(e);
    };

    _this.handleTouchEnd = function (e) {
      if (_this.isMoving) {
        _this.setTime(e, true);

        _this.isMoving = false;
      }
    };

    _this.handleMove = function (e) {
      e.preventDefault();
      e.stopPropagation(); // MouseEvent.which is deprecated, but MouseEvent.buttons is not supported in Safari

      var isButtonPressed = typeof e.buttons === 'undefined' ? e.nativeEvent.which === 1 : e.buttons === 1;

      if (isButtonPressed) {
        _this.setTime(e.nativeEvent, false);
      }
    };

    _this.handleMouseUp = function (e) {
      if (_this.isMoving) {
        _this.isMoving = false;
      }

      _this.setTime(e.nativeEvent, true);
    };

    _this.hasSelected = function () {
      var _this$props = _this.props,
          type = _this$props.type,
          value = _this$props.value;

      if (type === ClockType$1.HOURS) {
        return true;
      }

      return value % 5 === 0;
    };

    return _this;
  }

  _createClass(Clock, [{
    key: "setTime",
    value: function setTime(e) {
      var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var offsetX = e.offsetX,
          offsetY = e.offsetY;

      if (typeof offsetX === 'undefined') {
        var rect = e.target.getBoundingClientRect();
        offsetX = e.changedTouches[0].clientX - rect.left;
        offsetY = e.changedTouches[0].clientY - rect.top;
      }

      var value = this.props.type === ClockType$1.SECONDS || this.props.type === ClockType$1.MINUTES ? getMinutes(offsetX, offsetY, this.props.minutesStep) : getHours$1(offsetX, offsetY, Boolean(this.props.ampm));
      this.props.onChange(value, isFinish);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          classes = _this$props2.classes,
          value = _this$props2.value,
          children = _this$props2.children,
          type = _this$props2.type,
          ampm = _this$props2.ampm;
      var isPointerInner = !ampm && type === ClockType$1.HOURS && (value < 1 || value > 12);
      return React.createElement("div", {
        className: classes.container
      }, React.createElement("div", {
        className: classes.clock
      }, React.createElement("div", {
        role: "menu",
        tabIndex: -1,
        className: classes.squareMask,
        onTouchMove: this.handleTouchMove,
        onTouchEnd: this.handleTouchEnd,
        onMouseUp: this.handleMouseUp,
        onMouseMove: this.handleMove
      }), React.createElement("div", {
        className: classes.pin
      }), React.createElement(ClockPointer$1, {
        type: type,
        value: value,
        isInner: isPointerInner,
        hasSelected: this.hasSelected()
      }), children));
    }
  }]);

  return Clock;
}(React.Component);
process.env.NODE_ENV !== "production" ? Clock.propTypes = {
  type: propTypes_15(Object.keys(ClockType$1).map(function (key) {
    return ClockType$1[key];
  })).isRequired,
  value: propTypes_4.isRequired,
  onChange: propTypes_3.isRequired,
  children: propTypes_9(propTypes_13).isRequired,
  ampm: propTypes_2,
  minutesStep: propTypes_4,
  innerRef: propTypes_8
} : void 0;
Clock.defaultProps = {
  ampm: false,
  minutesStep: 1
};
var styles$1$1 = function styles(theme) {
  return styles$4.createStyles({
    container: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'flex-end',
      margin: "".concat(theme.spacing(2), "px 0 ").concat(theme.spacing(1), "px")
    },
    clock: {
      backgroundColor: 'rgba(0,0,0,.07)',
      borderRadius: '50%',
      height: 260,
      width: 260,
      position: 'relative',
      pointerEvents: 'none'
    },
    squareMask: {
      width: '100%',
      height: '100%',
      position: 'absolute',
      pointerEvents: 'auto',
      outline: 'none',
      touchActions: 'none',
      userSelect: 'none',
      '&:active': {
        cursor: 'move'
      }
    },
    pin: {
      width: 6,
      height: 6,
      borderRadius: '50%',
      backgroundColor: theme.palette.primary.main,
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)'
    }
  });
};
var Clock$1 = styles$4.withStyles(styles$1$1, {
  name: 'MuiPickersClock'
})(Clock);

var positions = {
  0: [0, 40],
  1: [55, 19.6],
  2: [94.4, 59.5],
  3: [109, 114],
  4: [94.4, 168.5],
  5: [54.5, 208.4],
  6: [0, 223],
  7: [-54.5, 208.4],
  8: [-94.4, 168.5],
  9: [-109, 114],
  10: [-94.4, 59.5],
  11: [-54.5, 19.6],
  12: [0, 5],
  13: [36.9, 49.9],
  14: [64, 77],
  15: [74, 114],
  16: [64, 151],
  17: [37, 178],
  18: [0, 188],
  19: [-37, 178],
  20: [-64, 151],
  21: [-74, 114],
  22: [-64, 77],
  23: [-37, 50]
};
var useStyles$3 = styles$4.makeStyles(function (theme) {
  var size = theme.spacing(4);
  return {
    clockNumber: {
      width: size,
      height: 32,
      userSelect: 'none',
      position: 'absolute',
      left: "calc((100% - ".concat(typeof size === 'number' ? "".concat(size, "px") : size, ") / 2)"),
      display: 'inline-flex',
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: '50%',
      color: theme.palette.type === 'light' ? theme.palette.text.primary : theme.palette.text.hint
    },
    clockNumberSelected: {
      color: theme.palette.primary.contrastText
    }
  };
}, {
  name: 'MuiPickersClockNumber'
});
var ClockNumber = function ClockNumber(_ref) {
  var selected = _ref.selected,
      label = _ref.label,
      index = _ref.index,
      isInner = _ref.isInner;
  var classes = useStyles$3();
  var className = clsx(classes.clockNumber, selected && classes.clockNumberSelected);
  var transformStyle = React.useMemo(function () {
    var position = positions[index];
    return {
      transform: "translate(".concat(position[0], "px, ").concat(position[1], "px")
    };
  }, [index]);
  return React.createElement(Typography, {
    component: "span",
    className: className,
    variant: isInner ? 'body2' : 'body1',
    style: transformStyle,
    children: label
  });
};

var getHourNumbers = function getHourNumbers(_ref) {
  var ampm = _ref.ampm,
      utils = _ref.utils,
      date = _ref.date;
  var currentHours = utils.getHours(date);
  var hourNumbers = [];
  var startHour = ampm ? 1 : 0;
  var endHour = ampm ? 12 : 23;

  var isSelected = function isSelected(hour) {
    if (ampm) {
      if (hour === 12) {
        return currentHours === 12 || currentHours === 0;
      }

      return currentHours === hour || currentHours - 12 === hour;
    }

    return currentHours === hour;
  };

  for (var hour = startHour; hour <= endHour; hour += 1) {
    var label = hour.toString();

    if (hour === 0) {
      label = '00';
    }

    var props = {
      index: hour,
      label: utils.formatNumber(label),
      selected: isSelected(hour),
      isInner: !ampm && (hour === 0 || hour > 12)
    };
    hourNumbers.push(React.createElement(ClockNumber, _extends$1({
      key: hour
    }, props)));
  }

  return hourNumbers;
};
var getMinutesNumbers = function getMinutesNumbers(_ref2) {
  var value = _ref2.value,
      utils = _ref2.utils;
  var f = utils.formatNumber;
  return [React.createElement(ClockNumber, {
    label: f('00'),
    selected: value === 0,
    index: 12,
    key: 12
  }), React.createElement(ClockNumber, {
    label: f('05'),
    selected: value === 5,
    index: 1,
    key: 1
  }), React.createElement(ClockNumber, {
    label: f('10'),
    selected: value === 10,
    index: 2,
    key: 2
  }), React.createElement(ClockNumber, {
    label: f('15'),
    selected: value === 15,
    index: 3,
    key: 3
  }), React.createElement(ClockNumber, {
    label: f('20'),
    selected: value === 20,
    index: 4,
    key: 4
  }), React.createElement(ClockNumber, {
    label: f('25'),
    selected: value === 25,
    index: 5,
    key: 5
  }), React.createElement(ClockNumber, {
    label: f('30'),
    selected: value === 30,
    index: 6,
    key: 6
  }), React.createElement(ClockNumber, {
    label: f('35'),
    selected: value === 35,
    index: 7,
    key: 7
  }), React.createElement(ClockNumber, {
    label: f('40'),
    selected: value === 40,
    index: 8,
    key: 8
  }), React.createElement(ClockNumber, {
    label: f('45'),
    selected: value === 45,
    index: 9,
    key: 9
  }), React.createElement(ClockNumber, {
    label: f('50'),
    selected: value === 50,
    index: 10,
    key: 10
  }), React.createElement(ClockNumber, {
    label: f('55'),
    selected: value === 55,
    index: 11,
    key: 11
  })];
};

var ClockView = function ClockView(_ref) {
  var type = _ref.type,
      onHourChange = _ref.onHourChange,
      onMinutesChange = _ref.onMinutesChange,
      onSecondsChange = _ref.onSecondsChange,
      ampm = _ref.ampm,
      date = _ref.date,
      minutesStep = _ref.minutesStep;
  var utils = useUtils();
  var viewProps = React.useMemo(function () {
    switch (type) {
      case ClockType$1.HOURS:
        return {
          value: utils.getHours(date),
          children: getHourNumbers({
            date: date,
            utils: utils,
            ampm: Boolean(ampm)
          }),
          onChange: function onChange(value, isFinish) {
            var currentMeridiem = getMeridiem(date, utils);
            var updatedTimeWithMeridiem = convertToMeridiem(utils.setHours(date, value), currentMeridiem, Boolean(ampm), utils);
            onHourChange(updatedTimeWithMeridiem, isFinish);
          }
        };

      case ClockType$1.MINUTES:
        var minutesValue = utils.getMinutes(date);
        return {
          value: minutesValue,
          children: getMinutesNumbers({
            value: minutesValue,
            utils: utils
          }),
          onChange: function onChange(value, isFinish) {
            var updatedTime = utils.setMinutes(date, value);
            onMinutesChange(updatedTime, isFinish);
          }
        };

      case ClockType$1.SECONDS:
        var secondsValue = utils.getSeconds(date);
        return {
          value: secondsValue,
          children: getMinutesNumbers({
            value: secondsValue,
            utils: utils
          }),
          onChange: function onChange(value, isFinish) {
            var updatedTime = utils.setSeconds(date, value);
            onSecondsChange(updatedTime, isFinish);
          }
        };

      default:
        throw new Error('You must provide the type for TimePickerView');
    }
  }, [ampm, date, onHourChange, onMinutesChange, onSecondsChange, type, utils]);
  return React.createElement(Clock$1, _extends$1({
    type: type,
    ampm: ampm,
    minutesStep: minutesStep
  }, viewProps));
};
ClockView.displayName = 'TimePickerView';
process.env.NODE_ENV !== "production" ? ClockView.propTypes = {
  date: propTypes_5.isRequired,
  onHourChange: propTypes_3.isRequired,
  onMinutesChange: propTypes_3.isRequired,
  onSecondsChange: propTypes_3.isRequired,
  ampm: propTypes_2,
  minutesStep: propTypes_4,
  type: propTypes_15(Object.keys(ClockType$1).map(function (key) {
    return ClockType$1[key];
  })).isRequired
} : void 0;
ClockView.defaultProps = {
  ampm: true,
  minutesStep: 1
};
var ClockView$1 = React.memo(ClockView);

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(source, true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var date = propTypes_16([propTypes_5, propTypes_6, propTypes_4, propTypes_12(Date)]);
var datePickerView = propTypes_15(['year', 'month', 'day']);
/* eslint-disable @typescript-eslint/no-object-literal-type-assertion */

var timePickerDefaultProps = {
  ampm: true,
  invalidDateMessage: 'Invalid Time Format'
};
var datePickerDefaultProps = {
  minDate: new Date('1900-01-01'),
  maxDate: new Date('2100-01-01'),
  invalidDateMessage: 'Invalid Date Format',
  minDateMessage: 'Date should not be before minimal date',
  maxDateMessage: 'Date should not be after maximal date',
  allowKeyboardControl: true
};
var dateTimePickerDefaultProps = _objectSpread({}, timePickerDefaultProps, {}, datePickerDefaultProps, {
  showTabs: true
});

function useViews(views, openTo, onChange) {
  var _React$useState = React.useState(openTo && arrayIncludes(views, openTo) ? openTo : views[0]),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      openView = _React$useState2[0],
      setOpenView = _React$useState2[1];

  var handleChangeAndOpenNext = React.useCallback(function (date, isFinish) {
    var nextViewToOpen = views[views.indexOf(openView) + 1];

    if (isFinish && nextViewToOpen) {
      // do not close picker if needs to show next view
      onChange(date, false);
      setOpenView(nextViewToOpen);
      return;
    }

    onChange(date, Boolean(isFinish));
  }, [onChange, openView, views]);
  return {
    handleChangeAndOpenNext: handleChangeAndOpenNext,
    openView: openView,
    setOpenView: setOpenView
  };
}

var useStyles$4 = styles$4.makeStyles(function (theme) {
  return {
    root: {
      height: 40,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      cursor: 'pointer',
      outline: 'none',
      '&:focus': {
        color: theme.palette.primary.main,
        fontWeight: theme.typography.fontWeightMedium
      }
    },
    yearSelected: {
      margin: '10px 0',
      fontWeight: theme.typography.fontWeightMedium
    },
    yearDisabled: {
      pointerEvents: 'none',
      color: theme.palette.text.hint
    }
  };
}, {
  name: 'MuiPickersYear'
});
var Year = function Year(_ref) {
  var onSelect = _ref.onSelect,
      forwardedRef = _ref.forwardedRef,
      value = _ref.value,
      selected = _ref.selected,
      disabled = _ref.disabled,
      children = _ref.children,
      other = _objectWithoutProperties$1(_ref, ["onSelect", "forwardedRef", "value", "selected", "disabled", "children"]);

  var classes = useStyles$4();
  var handleClick = React.useCallback(function () {
    return onSelect(value);
  }, [onSelect, value]);
  return React.createElement(Typography, _extends$1({
    role: "button",
    component: "div",
    tabIndex: disabled ? -1 : 0,
    onClick: handleClick,
    onKeyPress: handleClick,
    color: selected ? 'primary' : undefined,
    variant: selected ? 'h5' : 'subtitle1',
    children: children,
    ref: forwardedRef,
    className: clsx(classes.root, selected && classes.yearSelected, disabled && classes.yearDisabled)
  }, other));
};
Year.displayName = 'Year';
var Year$1 = React.forwardRef(function (props, ref) {
  return React.createElement(Year, _extends$1({}, props, {
    forwardedRef: ref
  }));
});

var useStyles$1$2 = styles$4.makeStyles({
  container: {
    height: 300,
    overflowY: 'auto'
  }
}, {
  name: 'MuiPickersYearSelection'
});
var YearSelection = function YearSelection(_ref) {
  var date = _ref.date,
      onChange = _ref.onChange,
      onYearChange = _ref.onYearChange,
      minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      disablePast = _ref.disablePast,
      disableFuture = _ref.disableFuture,
      animateYearScrolling = _ref.animateYearScrolling;
  var utils = useUtils();
  var classes = useStyles$1$2();
  var currentVariant = React.useContext(VariantContext);
  var selectedYearRef = React.useRef(null);
  React.useEffect(function () {
    if (selectedYearRef.current && selectedYearRef.current.scrollIntoView) {
      try {
        selectedYearRef.current.scrollIntoView({
          block: currentVariant === 'static' ? 'nearest' : 'center',
          behavior: animateYearScrolling ? 'smooth' : 'auto'
        });
      } catch (e) {
        // call without arguments in case when scrollIntoView works improperly (e.g. Firefox 52-57)
        selectedYearRef.current.scrollIntoView();
      }
    }
  }, []); // eslint-disable-line

  var currentYear = utils.getYear(date);
  var onYearSelect = React.useCallback(function (year) {
    var newDate = utils.setYear(date, year);

    if (onYearChange) {
      onYearChange(newDate);
    }

    onChange(newDate, true);
  }, [date, onChange, onYearChange, utils]);
  return React.createElement("div", {
    className: classes.container
  }, utils.getYearRange(minDate, maxDate).map(function (year) {
    var yearNumber = utils.getYear(year);
    var selected = yearNumber === currentYear;
    return React.createElement(Year$1, {
      key: utils.getYearText(year),
      selected: selected,
      value: yearNumber,
      onSelect: onYearSelect,
      ref: selected ? selectedYearRef : undefined,
      disabled: Boolean(disablePast && utils.isBeforeYear(year, utils.date()) || disableFuture && utils.isAfterYear(year, utils.date()))
    }, utils.getYearText(year));
  }));
};

var useStyles$2$1 = styles$4.makeStyles(function (theme) {
  return {
    root: {
      flex: '1 0 33.33%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      cursor: 'pointer',
      outline: 'none',
      height: 75,
      transition: theme.transitions.create('font-size', {
        duration: '100ms'
      }),
      '&:focus': {
        color: theme.palette.primary.main,
        fontWeight: theme.typography.fontWeightMedium
      }
    },
    monthSelected: {
      color: theme.palette.primary.main,
      fontWeight: theme.typography.fontWeightMedium
    },
    monthDisabled: {
      pointerEvents: 'none',
      color: theme.palette.text.hint
    }
  };
}, {
  name: 'MuiPickersMonth'
});
var Month = function Month(_ref) {
  var selected = _ref.selected,
      onSelect = _ref.onSelect,
      disabled = _ref.disabled,
      value = _ref.value,
      children = _ref.children,
      other = _objectWithoutProperties$1(_ref, ["selected", "onSelect", "disabled", "value", "children"]);

  var classes = useStyles$2$1();
  var handleSelection = React.useCallback(function () {
    onSelect(value);
  }, [onSelect, value]);
  return React.createElement(Typography, _extends$1({
    role: "button",
    component: "div",
    className: clsx(classes.root, selected && classes.monthSelected, disabled && classes.monthDisabled),
    tabIndex: disabled ? -1 : 0,
    onClick: handleSelection,
    onKeyPress: handleSelection,
    color: selected ? 'primary' : undefined,
    variant: selected ? 'h5' : 'subtitle1',
    children: children
  }, other));
};
Month.displayName = 'Month';

var useStyles$3$1 = styles$4.makeStyles({
  container: {
    width: 310,
    display: 'flex',
    flexWrap: 'wrap',
    alignContent: 'stretch'
  }
}, {
  name: 'MuiPickersMonthSelection'
});
var MonthSelection = function MonthSelection(_ref) {
  var disablePast = _ref.disablePast,
      disableFuture = _ref.disableFuture,
      minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      date = _ref.date,
      onMonthChange = _ref.onMonthChange,
      onChange = _ref.onChange;
  var utils = useUtils();
  var classes = useStyles$3$1();
  var currentMonth = utils.getMonth(date);

  var shouldDisableMonth = function shouldDisableMonth(month) {
    var now = utils.date();
    var utilMinDate = utils.date(minDate);
    var utilMaxDate = utils.date(maxDate);
    var firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, utilMinDate) ? now : utilMinDate);
    var lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, utilMaxDate) ? now : utilMaxDate);
    var isBeforeFirstEnabled = utils.isBefore(month, firstEnabledMonth);
    var isAfterLastEnabled = utils.isAfter(month, lastEnabledMonth);
    return isBeforeFirstEnabled || isAfterLastEnabled;
  };

  var onMonthSelect = React.useCallback(function (month) {
    var newDate = utils.setMonth(date, month);
    onChange(newDate, true);

    if (onMonthChange) {
      onMonthChange(newDate);
    }
  }, [date, onChange, onMonthChange, utils]);
  return React.createElement("div", {
    className: classes.container
  }, utils.getMonthArray(date).map(function (month) {
    var monthNumber = utils.getMonth(month);
    var monthText = utils.format(month, 'MMM');
    return React.createElement(Month, {
      key: monthText,
      value: monthNumber,
      selected: monthNumber === currentMonth,
      onSelect: onMonthSelect,
      disabled: shouldDisableMonth(month)
    }, monthText);
  }));
};

var getOrientation = function getOrientation() {
  if (typeof window === 'undefined') {
    return 'portrait';
  }

  if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
    return Math.abs(window.screen.orientation.angle) === 90 ? 'landscape' : 'portrait';
  } // Support IOS safari


  if (window.orientation) {
    return Math.abs(Number(window.orientation)) === 90 ? 'landscape' : 'portrait';
  }

  return 'portrait';
};

function useIsLandscape(customOrientation) {
  var _React$useState = React.useState(getOrientation()),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      orientation = _React$useState2[0],
      setOrientation = _React$useState2[1];

  var eventHandler = React.useCallback(function () {
    return setOrientation(getOrientation());
  }, []);
  useIsomorphicEffect(function () {
    window.addEventListener('orientationchange', eventHandler);
    return function () {
      return window.removeEventListener('orientationchange', eventHandler);
    };
  }, [eventHandler]);
  var orientationToUse = customOrientation || orientation;
  return orientationToUse === 'landscape';
}

function ownKeys$1$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1$1(source, true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var viewsMap = {
  year: YearSelection,
  month: MonthSelection,
  date: Calendar$1,
  hours: ClockView,
  minutes: ClockView,
  seconds: ClockView
};
var useStyles$4$1 = styles$4.makeStyles({
  container: {
    display: 'flex',
    flexDirection: 'column'
  },
  containerLandscape: {
    flexDirection: 'row'
  },
  pickerView: {
    overflowX: 'hidden',
    minHeight: VIEW_HEIGHT,
    minWidth: DIALOG_WIDTH,
    maxWidth: DIALOG_WIDTH_WIDER,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center'
  },
  pickerViewLandscape: {
    padding: '0 8px'
  }
}, {
  name: 'MuiPickersBasePicker'
});
var Picker = function Picker(_ref) {
  var date = _ref.date,
      views = _ref.views,
      disableToolbar = _ref.disableToolbar,
      onChange = _ref.onChange,
      openTo = _ref.openTo,
      unparsedMinDate = _ref.minDate,
      unparsedMaxDate = _ref.maxDate,
      ToolbarComponent = _ref.ToolbarComponent,
      orientation = _ref.orientation,
      rest = _objectWithoutProperties$1(_ref, ["date", "views", "disableToolbar", "onChange", "openTo", "minDate", "maxDate", "ToolbarComponent", "orientation"]);

  var utils = useUtils();
  var classes = useStyles$4$1();
  var isLandscape = useIsLandscape(orientation);

  var _useViews = useViews(views, openTo, onChange),
      openView = _useViews.openView,
      setOpenView = _useViews.setOpenView,
      handleChangeAndOpenNext = _useViews.handleChangeAndOpenNext;

  var minDate = React.useMemo(function () {
    return utils.date(unparsedMinDate);
  }, [unparsedMinDate, utils]);
  var maxDate = React.useMemo(function () {
    return utils.date(unparsedMaxDate);
  }, [unparsedMaxDate, utils]);
  return React.createElement("div", {
    className: clsx(classes.container, isLandscape && classes.containerLandscape)
  }, !disableToolbar && React.createElement(ToolbarComponent, _extends$1({}, rest, {
    views: views,
    isLandscape: isLandscape,
    date: date,
    onChange: onChange,
    setOpenView: setOpenView,
    openView: openView
  })), React.createElement("div", {
    className: clsx(classes.pickerView, isLandscape && classes.pickerViewLandscape)
  }, openView === 'year' && React.createElement(YearSelection, _extends$1({}, rest, {
    date: date,
    onChange: handleChangeAndOpenNext,
    minDate: minDate,
    maxDate: maxDate
  })), openView === 'month' && React.createElement(MonthSelection, _extends$1({}, rest, {
    date: date,
    onChange: handleChangeAndOpenNext,
    minDate: minDate,
    maxDate: maxDate
  })), openView === 'date' && React.createElement(Calendar$1, _extends$1({}, rest, {
    date: date,
    onChange: handleChangeAndOpenNext,
    minDate: minDate,
    maxDate: maxDate
  })), (openView === 'hours' || openView === 'minutes' || openView === 'seconds') && React.createElement(ClockView, _extends$1({}, rest, {
    date: date,
    type: openView,
    onHourChange: handleChangeAndOpenNext,
    onMinutesChange: handleChangeAndOpenNext,
    onSecondsChange: handleChangeAndOpenNext
  }))));
};
Picker.defaultProps = _objectSpread$1({}, datePickerDefaultProps, {
  views: Object.keys(viewsMap)
});

var useStyles$5 = styles$4.makeStyles(function (theme) {
  var textColor = theme.palette.type === 'light' ? theme.palette.primary.contrastText : theme.palette.getContrastText(theme.palette.background["default"]);
  return {
    toolbarTxt: {
      color: styles$4.fade(textColor, 0.54)
    },
    toolbarBtnSelected: {
      color: textColor
    }
  };
}, {
  name: 'MuiPickersToolbarText'
});

var ToolbarText = function ToolbarText(_ref) {
  var selected = _ref.selected,
      label = _ref.label,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? null : _ref$className,
      other = _objectWithoutProperties$1(_ref, ["selected", "label", "className"]);

  var classes = useStyles$5();
  return React.createElement(Typography, _extends$1({
    children: label,
    className: clsx(classes.toolbarTxt, className, selected && classes.toolbarBtnSelected)
  }, other));
};

var ToolbarButton = function ToolbarButton(_ref) {
  var classes = _ref.classes,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? null : _ref$className,
      label = _ref.label,
      selected = _ref.selected,
      variant = _ref.variant,
      align = _ref.align,
      typographyClassName = _ref.typographyClassName,
      other = _objectWithoutProperties$1(_ref, ["classes", "className", "label", "selected", "variant", "align", "typographyClassName"]);

  return React.createElement(Button$2, _extends$1({
    variant: "text",
    className: clsx(classes.toolbarBtn, className)
  }, other), React.createElement(ToolbarText, {
    align: align,
    className: typographyClassName,
    variant: variant,
    label: label,
    selected: selected
  }));
};

process.env.NODE_ENV !== "production" ? ToolbarButton.propTypes = {
  selected: propTypes_2.isRequired,
  label: propTypes_6.isRequired,
  classes: propTypes_8.isRequired,
  className: propTypes_6,
  innerRef: propTypes_8
} : void 0;
ToolbarButton.defaultProps = {
  className: ''
};
var styles$3 = styles$4.createStyles({
  toolbarBtn: {
    padding: 0,
    minWidth: '16px',
    textTransform: 'none'
  }
});
var ToolbarButton$1 = styles$4.withStyles(styles$3, {
  name: 'MuiPickersToolbarButton'
})(ToolbarButton);

var useStyles$1$3 = styles$4.makeStyles(function (theme) {
  return {
    toolbar: {
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      height: 100,
      backgroundColor: theme.palette.type === 'light' ? theme.palette.primary.main : theme.palette.background["default"]
    },
    toolbarLandscape: {
      height: 'auto',
      maxWidth: 150,
      padding: 8,
      justifyContent: 'flex-start'
    }
  };
}, {
  name: 'MuiPickersToolbar'
});

var PickerToolbar = function PickerToolbar(_ref) {
  var children = _ref.children,
      isLandscape = _ref.isLandscape,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? null : _ref$className,
      other = _objectWithoutProperties$1(_ref, ["children", "isLandscape", "className"]);

  var classes = useStyles$1$3();
  return React.createElement(Toolbar, _extends$1({
    className: clsx(classes.toolbar, className, isLandscape && classes.toolbarLandscape)
  }, other), children);
};

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(source, true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var PureDateInput = function PureDateInput(_ref) {
  var inputValue = _ref.inputValue,
      inputVariant = _ref.inputVariant,
      validationError = _ref.validationError,
      InputProps = _ref.InputProps,
      onOpen = _ref.openPicker,
      _ref$TextFieldCompone = _ref.TextFieldComponent,
      TextFieldComponent = _ref$TextFieldCompone === void 0 ? TextField : _ref$TextFieldCompone,
      other = _objectWithoutProperties$1(_ref, ["inputValue", "inputVariant", "validationError", "InputProps", "openPicker", "TextFieldComponent"]);

  var PureDateInputProps = React.useMemo(function () {
    return _objectSpread$2({}, InputProps, {
      readOnly: true
    });
  }, [InputProps]);
  return React.createElement(TextFieldComponent, _extends$1({
    error: Boolean(validationError),
    helperText: validationError
  }, other, {
    // do not overridable
    onClick: onOpen,
    value: inputValue,
    variant: inputVariant,
    InputProps: PureDateInputProps,
    onKeyDown: function onKeyDown(e) {
      // space
      if (e.keyCode === 32) {
        e.stopPropagation();
        onOpen();
      }
    }
  }));
};
PureDateInput.displayName = 'PureDateInput';

var KeyboardIcon = function KeyboardIcon(props) {
  return React__default.createElement(SvgIcon, props, React__default.createElement("path", {
    d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
  }), React__default.createElement("path", {
    fill: "none",
    d: "M0 0h24v24H0z"
  }));
};

var getDisplayDate = function getDisplayDate(value, format, utils, isEmpty, _ref) {
  var invalidLabel = _ref.invalidLabel,
      emptyLabel = _ref.emptyLabel,
      labelFunc = _ref.labelFunc;
  var date = utils.date(value);

  if (labelFunc) {
    return labelFunc(isEmpty ? null : date, invalidLabel);
  }

  if (isEmpty) {
    return emptyLabel || '';
  }

  return utils.isValid(date) ? utils.format(date, format) : invalidLabel;
};

var getComparisonMaxDate = function getComparisonMaxDate(utils, strictCompareDates, date) {
  if (strictCompareDates) {
    return date;
  }

  return utils.endOfDay(date);
};

var getComparisonMinDate = function getComparisonMinDate(utils, strictCompareDates, date) {
  if (strictCompareDates) {
    return date;
  }

  return utils.startOfDay(date);
};

var validate = function validate(value, utils, _ref2) {
  var maxDate = _ref2.maxDate,
      minDate = _ref2.minDate,
      disablePast = _ref2.disablePast,
      disableFuture = _ref2.disableFuture,
      maxDateMessage = _ref2.maxDateMessage,
      minDateMessage = _ref2.minDateMessage,
      invalidDateMessage = _ref2.invalidDateMessage,
      strictCompareDates = _ref2.strictCompareDates;
  var parsedValue = utils.date(value); // if null - do not show error

  if (value === null) {
    return '';
  }

  if (!utils.isValid(value)) {
    return invalidDateMessage;
  }

  if (maxDate && utils.isAfter(parsedValue, getComparisonMaxDate(utils, !!strictCompareDates, utils.date(maxDate)))) {
    return maxDateMessage;
  }

  if (disableFuture && utils.isAfter(parsedValue, getComparisonMaxDate(utils, !!strictCompareDates, utils.date()))) {
    return maxDateMessage;
  }

  if (minDate && utils.isBefore(parsedValue, getComparisonMinDate(utils, !!strictCompareDates, utils.date(minDate)))) {
    return minDateMessage;
  }

  if (disablePast && utils.isBefore(parsedValue, getComparisonMinDate(utils, !!strictCompareDates, utils.date()))) {
    return minDateMessage;
  }

  return '';
};
function makeMaskFromFormat(format, numberMaskChar) {
  return format.replace(/[a-z]/gi, numberMaskChar);
}
var maskedDateFormatter = function maskedDateFormatter(mask, numberMaskChar, refuse) {
  return function (value) {
    var result = '';
    var parsed = value.replace(refuse, '');

    if (parsed === '') {
      return parsed;
    }

    var i = 0;
    var n = 0;

    while (i < mask.length) {
      var maskChar = mask[i];

      if (maskChar === numberMaskChar && n < parsed.length) {
        var parsedChar = parsed[n];
        result += parsedChar;
        n += 1;
      } else {
        result += maskChar;
      }

      i += 1;
    }

    return result;
  };
};

function ownKeys$1$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1$2(source, true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1$2(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var KeyboardDateInput = function KeyboardDateInput(_ref) {
  var inputValue = _ref.inputValue,
      inputVariant = _ref.inputVariant,
      validationError = _ref.validationError,
      KeyboardButtonProps = _ref.KeyboardButtonProps,
      InputAdornmentProps = _ref.InputAdornmentProps,
      onOpen = _ref.openPicker,
      onChange = _ref.onChange,
      InputProps = _ref.InputProps,
      mask = _ref.mask,
      _ref$maskChar = _ref.maskChar,
      maskChar = _ref$maskChar === void 0 ? '_' : _ref$maskChar,
      _ref$refuse = _ref.refuse,
      refuse = _ref$refuse === void 0 ? /[^\d]+/gi : _ref$refuse,
      format = _ref.format,
      keyboardIcon = _ref.keyboardIcon,
      disabled = _ref.disabled,
      rifmFormatter = _ref.rifmFormatter,
      _ref$TextFieldCompone = _ref.TextFieldComponent,
      TextFieldComponent = _ref$TextFieldCompone === void 0 ? TextField : _ref$TextFieldCompone,
      other = _objectWithoutProperties$1(_ref, ["inputValue", "inputVariant", "validationError", "KeyboardButtonProps", "InputAdornmentProps", "openPicker", "onChange", "InputProps", "mask", "maskChar", "refuse", "format", "keyboardIcon", "disabled", "rifmFormatter", "TextFieldComponent"]);

  var inputMask = mask || makeMaskFromFormat(format, maskChar); // prettier-ignore

  var formatter = React.useMemo(function () {
    return maskedDateFormatter(inputMask, maskChar, refuse);
  }, [inputMask, maskChar, refuse]);
  var position = InputAdornmentProps && InputAdornmentProps.position ? InputAdornmentProps.position : 'end';

  var handleChange = function handleChange(text) {
    var finalString = text === '' || text === inputMask ? null : text;
    onChange(finalString);
  };

  return React.createElement(Rifm, {
    key: inputMask,
    value: inputValue,
    onChange: handleChange,
    refuse: refuse,
    format: rifmFormatter || formatter
  }, function (_ref2) {
    var onChange = _ref2.onChange,
        value = _ref2.value;
    return React.createElement(TextFieldComponent, _extends$1({
      disabled: disabled,
      error: Boolean(validationError),
      helperText: validationError
    }, other, {
      value: value,
      onChange: onChange,
      variant: inputVariant,
      InputProps: _objectSpread$1$1({}, InputProps, _defineProperty$1({}, "".concat(position, "Adornment"), React.createElement(InputAdornment, _extends$1({
        position: position
      }, InputAdornmentProps), React.createElement(IconButton, _extends$1({
        disabled: disabled
      }, KeyboardButtonProps, {
        onClick: onOpen
      }), keyboardIcon))))
    }));
  });
};
KeyboardDateInput.defaultProps = {
  keyboardIcon: React.createElement(KeyboardIcon, null)
};

function useOpenState(_ref) {
  var open = _ref.open,
      onOpen = _ref.onOpen,
      onClose = _ref.onClose;
  var setIsOpenState = null;

  if (open === undefined || open === null) {
    // The component is uncontrolled, so we need to give it its own state.
    var _useState = React.useState(false);

    var _useState2 = _slicedToArray$1(_useState, 2);

    open = _useState2[0];
    setIsOpenState = _useState2[1];
  } // prettier-ignore


  var setIsOpen = React.useCallback(function (newIsOpen) {
    setIsOpenState && setIsOpenState(newIsOpen);
    return newIsOpen ? onOpen && onOpen() : onClose && onClose();
  }, [onOpen, onClose, setIsOpenState]);
  return {
    isOpen: open,
    setIsOpen: setIsOpen
  };
}

var useValueToDate = function useValueToDate(utils, _ref) {
  var value = _ref.value,
      initialFocusedDate = _ref.initialFocusedDate;
  var nowRef = React.useRef(utils.date());
  var date = utils.date(value || initialFocusedDate || nowRef.current);
  return date && utils.isValid(date) ? date : nowRef.current;
};

function useDateValues(props, options) {
  var utils = useUtils();
  var date = useValueToDate(utils, props);
  var format = props.format || options.getDefaultFormat();
  return {
    date: date,
    format: format
  };
}

function usePickerState(props, options) {
  var autoOk = props.autoOk,
      disabled = props.disabled,
      readOnly = props.readOnly,
      onAccept = props.onAccept,
      _onChange = props.onChange,
      onError = props.onError,
      value = props.value,
      variant = props.variant;
  var utils = useUtils();

  var _useOpenState = useOpenState(props),
      isOpen = _useOpenState.isOpen,
      setIsOpen = _useOpenState.setIsOpen;

  var _useDateValues = useDateValues(props, options),
      date = _useDateValues.date,
      format = _useDateValues.format;

  var _useState = React.useState(date),
      _useState2 = _slicedToArray$1(_useState, 2),
      pickerDate = _useState2[0],
      setPickerDate = _useState2[1];

  React.useEffect(function () {
    // if value was changed in closed state - treat it as accepted
    if (!isOpen && !utils.isEqual(pickerDate, date)) {
      setPickerDate(date);
    }
  }, [date, isOpen, pickerDate, utils]);
  var acceptDate = React.useCallback(function (acceptedDate) {
    _onChange(acceptedDate);

    if (onAccept) {
      onAccept(acceptedDate);
    }

    setIsOpen(false);
  }, [onAccept, _onChange, setIsOpen]);
  var wrapperProps = React.useMemo(function () {
    return {
      format: format,
      open: isOpen,
      onClear: function onClear() {
        return acceptDate(null);
      },
      onAccept: function onAccept() {
        return acceptDate(pickerDate);
      },
      onSetToday: function onSetToday() {
        return setPickerDate(utils.date());
      },
      onDismiss: function onDismiss() {
        setIsOpen(false);
      }
    };
  }, [acceptDate, format, isOpen, pickerDate, setIsOpen, utils]);
  var pickerProps = React.useMemo(function () {
    return {
      date: pickerDate,
      onChange: function onChange(newDate) {
        var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        setPickerDate(newDate);

        if (isFinish && autoOk) {
          acceptDate(newDate);
          return;
        } // simulate autoOk, but do not close the modal


        if (variant === 'inline' || variant === 'static') {
          _onChange(newDate);

          onAccept && onAccept(newDate);
        }
      }
    };
  }, [acceptDate, autoOk, onAccept, _onChange, pickerDate, variant]);
  var validationError = validate(value, utils, props);
  React.useEffect(function () {
    if (onError) {
      onError(validationError, value);
    }
  }, [onError, validationError, value]);
  var inputValue = getDisplayDate(date, format, utils, value === null, props);
  var inputProps = React.useMemo(function () {
    return {
      inputValue: inputValue,
      validationError: validationError,
      openPicker: function openPicker() {
        return !readOnly && !disabled && setIsOpen(true);
      }
    };
  }, [disabled, inputValue, readOnly, setIsOpen, validationError]);
  var pickerState = {
    pickerProps: pickerProps,
    inputProps: inputProps,
    wrapperProps: wrapperProps
  };
  React.useDebugValue(pickerState);
  return pickerState;
}

function ownKeys$2$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2$1(source, true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function parseInputString(value, utils, format) {
  try {
    return utils.parse(value, format);
  } catch (_unused) {
    return null;
  }
}

function useKeyboardPickerState(props, options) {
  var _props$format = props.format,
      format = _props$format === void 0 ? options.getDefaultFormat() : _props$format,
      inputValue = props.inputValue,
      _onChange = props.onChange,
      value = props.value;
  var utils = useUtils();
  var displayDate = getDisplayDate(value, format, utils, value === null, props);

  var _useState = React.useState(displayDate),
      _useState2 = _slicedToArray$1(_useState, 2),
      innerInputValue = _useState2[0],
      setInnerInputValue = _useState2[1];

  var dateValue = inputValue ? parseInputString(inputValue, utils, format) : value;
  React.useEffect(function () {
    if (value === null || utils.isValid(value)) {
      setInnerInputValue(displayDate);
    }
  }, [displayDate, setInnerInputValue, utils, value]);
  var handleKeyboardChange = React.useCallback(function (date) {
    _onChange(date, date === null ? null : utils.format(date, format));
  }, [format, _onChange, utils]);

  var _usePickerState = usePickerState( // Extend props interface
  _objectSpread$2$1({}, props, {
    value: dateValue,
    onChange: handleKeyboardChange
  }), options),
      innerInputProps = _usePickerState.inputProps,
      wrapperProps = _usePickerState.wrapperProps,
      pickerProps = _usePickerState.pickerProps;

  var inputProps = React.useMemo(function () {
    return _objectSpread$2$1({}, innerInputProps, {
      // reuse validation and open/close logic
      format: wrapperProps.format,
      inputValue: inputValue || innerInputValue,
      onChange: function onChange(value) {
        setInnerInputValue(value || '');
        var date = value === null ? null : utils.parse(value, wrapperProps.format);

        _onChange(date, value);
      }
    });
  }, [innerInputProps, innerInputValue, inputValue, _onChange, utils, wrapperProps.format]);
  return {
    inputProps: inputProps,
    wrapperProps: wrapperProps,
    pickerProps: pickerProps
  };
}

function makePickerWithState(_ref) {
  var Input = _ref.Input,
      useState = _ref.useState,
      useOptions = _ref.useOptions,
      getCustomProps = _ref.getCustomProps,
      DefaultToolbarComponent = _ref.DefaultToolbarComponent;

  function PickerWithState(props) {
    var allowKeyboardControl = props.allowKeyboardControl,
        ampm = props.ampm,
        animateYearScrolling = props.animateYearScrolling,
        autoOk = props.autoOk,
        dateRangeIcon = props.dateRangeIcon,
        disableFuture = props.disableFuture,
        disablePast = props.disablePast,
        disableToolbar = props.disableToolbar,
        emptyLabel = props.emptyLabel,
        format = props.format,
        forwardedRef = props.forwardedRef,
        hideTabs = props.hideTabs,
        initialFocusedDate = props.initialFocusedDate,
        invalidDateMessage = props.invalidDateMessage,
        invalidLabel = props.invalidLabel,
        labelFunc = props.labelFunc,
        leftArrowButtonProps = props.leftArrowButtonProps,
        leftArrowIcon = props.leftArrowIcon,
        loadingIndicator = props.loadingIndicator,
        maxDate = props.maxDate,
        maxDateMessage = props.maxDateMessage,
        minDate = props.minDate,
        minDateMessage = props.minDateMessage,
        minutesStep = props.minutesStep,
        onAccept = props.onAccept,
        onChange = props.onChange,
        onClose = props.onClose,
        onMonthChange = props.onMonthChange,
        onOpen = props.onOpen,
        onYearChange = props.onYearChange,
        openTo = props.openTo,
        orientation = props.orientation,
        renderDay = props.renderDay,
        rightArrowButtonProps = props.rightArrowButtonProps,
        rightArrowIcon = props.rightArrowIcon,
        shouldDisableDate = props.shouldDisableDate,
        strictCompareDates = props.strictCompareDates,
        timeIcon = props.timeIcon,
        _props$ToolbarCompone = props.ToolbarComponent,
        ToolbarComponent = _props$ToolbarCompone === void 0 ? DefaultToolbarComponent : _props$ToolbarCompone,
        value = props.value,
        variant = props.variant,
        views = props.views,
        other = _objectWithoutProperties$1(props, ["allowKeyboardControl", "ampm", "animateYearScrolling", "autoOk", "dateRangeIcon", "disableFuture", "disablePast", "disableToolbar", "emptyLabel", "format", "forwardedRef", "hideTabs", "initialFocusedDate", "invalidDateMessage", "invalidLabel", "labelFunc", "leftArrowButtonProps", "leftArrowIcon", "loadingIndicator", "maxDate", "maxDateMessage", "minDate", "minDateMessage", "minutesStep", "onAccept", "onChange", "onClose", "onMonthChange", "onOpen", "onYearChange", "openTo", "orientation", "renderDay", "rightArrowButtonProps", "rightArrowIcon", "shouldDisableDate", "strictCompareDates", "timeIcon", "ToolbarComponent", "value", "variant", "views"]);

    var injectedProps = getCustomProps ? getCustomProps(props) : {};
    var options = useOptions(props);

    var _useState = useState(props, options),
        pickerProps = _useState.pickerProps,
        inputProps = _useState.inputProps,
        wrapperProps = _useState.wrapperProps;

    return React.createElement(Wrapper, _extends$1({
      variant: variant,
      InputComponent: Input,
      DateInputProps: inputProps
    }, injectedProps, wrapperProps, other), React.createElement(Picker, _extends$1({}, pickerProps, {
      allowKeyboardControl: allowKeyboardControl,
      ampm: ampm,
      animateYearScrolling: animateYearScrolling,
      dateRangeIcon: dateRangeIcon,
      disableFuture: disableFuture,
      disablePast: disablePast,
      disableToolbar: disableToolbar,
      hideTabs: hideTabs,
      leftArrowButtonProps: leftArrowButtonProps,
      leftArrowIcon: leftArrowIcon,
      loadingIndicator: loadingIndicator,
      maxDate: maxDate,
      minDate: minDate,
      minutesStep: minutesStep,
      onMonthChange: onMonthChange,
      onYearChange: onYearChange,
      openTo: openTo,
      orientation: orientation,
      renderDay: renderDay,
      rightArrowButtonProps: rightArrowButtonProps,
      rightArrowIcon: rightArrowIcon,
      shouldDisableDate: shouldDisableDate,
      strictCompareDates: strictCompareDates,
      timeIcon: timeIcon,
      ToolbarComponent: ToolbarComponent,
      views: views
    })));
  }

  return PickerWithState;
}

var useStyles$6 = styles$4.makeStyles({
  toolbar: {
    flexDirection: 'column',
    alignItems: 'flex-start'
  },
  toolbarLandscape: {
    padding: 16
  },
  dateLandscape: {
    marginRight: 16
  }
}, {
  name: 'MuiPickersDatePickerRoot'
});
var DatePickerToolbar = function DatePickerToolbar(_ref) {
  var date = _ref.date,
      views = _ref.views,
      setOpenView = _ref.setOpenView,
      isLandscape = _ref.isLandscape,
      openView = _ref.openView;
  var utils = useUtils();
  var classes = useStyles$6();
  var isYearOnly = React.useMemo(function () {
    return isYearOnlyView(views);
  }, [views]);
  var isYearAndMonth = React.useMemo(function () {
    return isYearAndMonthViews(views);
  }, [views]);
  return React.createElement(PickerToolbar, {
    isLandscape: isLandscape,
    className: clsx(!isYearOnly && classes.toolbar, isLandscape && classes.toolbarLandscape)
  }, React.createElement(ToolbarButton$1, {
    variant: isYearOnly ? 'h3' : 'subtitle1',
    onClick: function onClick() {
      return setOpenView('year');
    },
    selected: openView === 'year',
    label: utils.getYearText(date)
  }), !isYearOnly && !isYearAndMonth && React.createElement(ToolbarButton$1, {
    variant: "h4",
    selected: openView === 'date',
    onClick: function onClick() {
      return setOpenView('date');
    },
    align: isLandscape ? 'left' : 'center',
    label: utils.getDatePickerHeaderText(date),
    className: clsx(isLandscape && classes.dateLandscape)
  }), isYearAndMonth && React.createElement(ToolbarButton$1, {
    variant: "h4",
    onClick: function onClick() {
      return setOpenView('month');
    },
    selected: openView === 'month',
    label: utils.getMonthText(date)
  }));
};

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(source, true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultProps = _objectSpread$3({}, datePickerDefaultProps, {
  openTo: 'date',
  views: ['year', 'date']
});

function useOptions(props) {
  var utils = useUtils();
  return {
    getDefaultFormat: function getDefaultFormat() {
      return getFormatByViews(props.views, utils);
    }
  };
}

var DatePicker = makePickerWithState({
  useOptions: useOptions,
  Input: PureDateInput,
  useState: usePickerState,
  DefaultToolbarComponent: DatePickerToolbar
});
var KeyboardDatePicker = makePickerWithState({
  useOptions: useOptions,
  Input: KeyboardDateInput,
  useState: useKeyboardPickerState,
  DefaultToolbarComponent: DatePickerToolbar
});
DatePicker.defaultProps = defaultProps;
KeyboardDatePicker.defaultProps = defaultProps;

function _templateObject$A() {
  var data = _taggedTemplateLiteral(["\n\t& > .inputRow h5 {\n\t\tmargin-top:0;\n\t\tmargin-bottom: 0;\n\t}\n\n\t& > .inputRow {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t& > .inputRow div.startRange {\n\t\tmargin-right: 10px;\n\t}\n\n\t& .errorMessage h5 {\n\t\tmargin-top: 0;\n\t\tmargin-bottom: 0;\n\t\tcolor: ", ";\n\t}\n"]);

  _templateObject$A = function _templateObject() {
    return data;
  };

  return data;
}
var StyledContents$1 = styled.div(_templateObject$A(), theme.colors.red);
function FilterDateDropdownContent(props) {
  var _useState = React.useState({
    rangeStart: props.rangeStart,
    rangeEnd: props.rangeEnd
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  var errorMessage;

  if (state.rangeStart !== undefined && state.rangeEnd !== undefined && state.rangeEnd < state.rangeStart) {
    errorMessage = "End of range cannot be before start of range.";
  }

  var hasError = errorMessage !== undefined;

  var onApply = function onApply() {
    props.onChange({
      rangeStart: state.rangeStart,
      rangeEnd: state.rangeEnd
    });
    props.onClose();
  };

  var onClear = function onClear() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      rangeStart: undefined,
      rangeEnd: undefined
    }));
  };

  var getOnChange = function getOnChange(name) {
    return function (date) {
      if (date !== null) {
        if (name === "rangeStart") {
          // date start should be set to 00:00
          date.setHours(0);
          date.setMinutes(0);
          date.setSeconds(0);
        } else {
          // date end should be set to 23:59
          date.setHours(23);
          date.setMinutes(59);
          date.setSeconds(59);
        }
      }

      setState(_objectSpread2(_objectSpread2({}, state), {}, _defineProperty({}, name, date === null ? undefined : date)));
    };
  };

  var pickerArgs = {
    placeholder: t("mosaic:FilterDate.choose_a_date___"),
    clearable: true,
    format: "M/d/yyyy",
    inputVariant: "outlined",
    margin: "dense"
  };
  return /*#__PURE__*/React.createElement(StyledContents$1, null, /*#__PURE__*/React.createElement("div", {
    className: "inputRow"
  }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {
    utils: DateFnsUtils
  }, /*#__PURE__*/React.createElement("div", {
    className: "startRange"
  }, /*#__PURE__*/React.createElement("h5", null, t("mosaic:common.date_from")), /*#__PURE__*/React.createElement(DatePicker, _extends({}, pickerArgs, {
    value: state.rangeStart || null,
    onChange: getOnChange("rangeStart")
  }))), /*#__PURE__*/React.createElement("div", {
    className: "endRange"
  }, /*#__PURE__*/React.createElement("h5", null, t("mosaic:common.date_to")), /*#__PURE__*/React.createElement(DatePicker, _extends({}, pickerArgs, {
    value: state.rangeEnd || null,
    onChange: getOnChange("rangeEnd")
  }))))), hasError && /*#__PURE__*/React.createElement("div", {
    className: "errorMessage"
  }, /*#__PURE__*/React.createElement("h5", null, "Error: ", errorMessage)), /*#__PURE__*/React.createElement(DataViewFilterDropdownButtons, {
    onApply: onApply,
    onClear: onClear,
    onCancel: props.onClose,
    disableApply: hasError
  }));
}

function _templateObject$B() {
  var data = _taggedTemplateLiteral([""]);

  _templateObject$B = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$c = styled.span(_templateObject$B());

function isSame(dateLeft, dateRight) {
  return [isSameDay, isSameMonth, isSameYear].every(function (fn) {
    return fn(dateLeft, dateRight);
  });
}

var dateFormat = "M/d/yyyy";
function FilterDate(props) {
  var _useState = React.useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      anchorEl = _useState2[0],
      setAnchorEl = _useState2[1];

  var onClick = function onClick(evt) {
    setAnchorEl(evt.currentTarget);
  };

  var onClose = function onClose() {
    setAnchorEl(null);
  };

  var hasStart = props.data.rangeStart !== undefined;
  var hasEnd = props.data.rangeEnd !== undefined;
  var startFormat = hasStart ? format(props.data.rangeStart, dateFormat) : undefined;
  var endFormat = hasEnd ? format(props.data.rangeEnd, dateFormat) : undefined;
  var valueString = 'any';

  if (isSame(props.data.rangeStart, props.data.rangeEnd)) {
    valueString = startFormat;
  } else if (hasStart && hasEnd) {
    valueString = "".concat(startFormat, " - ").concat(endFormat);
  } else if (hasStart) {
    valueString = "from ".concat(startFormat);
  } else if (hasEnd) {
    valueString = "to ".concat(endFormat);
  }

  return /*#__PURE__*/React.createElement(StyledWrapper$c, null, /*#__PURE__*/React.createElement(DataViewPrimaryFilter, {
    label: props.label,
    value: valueString,
    type: props.type,
    onRemove: props.onRemove,
    onClick: onClick
  }), /*#__PURE__*/React.createElement(DataViewFilterDropdown, {
    anchorEl: anchorEl,
    onClose: onClose
  }, /*#__PURE__*/React.createElement(FilterDateDropdownContent, {
    onClose: onClose,
    onChange: props.onChange,
    rangeStart: props.data.rangeStart,
    rangeEnd: props.data.rangeEnd
  })));
}

var en$2 = {
	choose_a_date___: "Choose a date..."
};
var FilterDateLocales = {
	en: en$2
};

var localeData$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  en: en$2,
  'default': FilterDateLocales
});

addCoreResourceBundle({
  prefix: "FilterDate",
  bundle: localeData$1
});

function FilterSingleSelectContent(props) {
  return /*#__PURE__*/React.createElement(MenuBase, {
    anchorEl: props.anchorEl,
    open: Boolean(props.anchorEl),
    onClose: props.onClose
  }, props.children);
}

function _templateObject$C() {
  var data = _taggedTemplateLiteral([""]);

  _templateObject$C = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$d = styled.span(_templateObject$C());
function FilterSingleSelect(props) {
  var _useState = React.useState({
    anchorEl: null,
    selected: undefined,
    options: []
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var value = props.data.value;
  React.useEffect(function () {
    function fetchData() {
      return _fetchData.apply(this, arguments);
    }

    function _fetchData() {
      _fetchData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var selected, options;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return props.args.getSelected(value);

              case 2:
                selected = _context.sent;
                _context.next = 5;
                return props.args.getOptions();

              case 5:
                options = _context.sent;
                setState(_objectSpread2(_objectSpread2({}, state), {}, {
                  options: options.docs,
                  selected: selected
                }));

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _fetchData.apply(this, arguments);
    }

    fetchData();
  }, [props.data]);

  var onClick = function onClick(evt) {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      anchorEl: evt.currentTarget
    }));
  };

  var onClose = function onClose() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      anchorEl: null
    }));
  };

  var valueString;

  if (state.selected !== undefined) {
    valueString = state.selected.label;
  }

  var onChange = function onChange(value) {
    props.onChange({
      value: value === "" ? undefined : value
    });
    onClose();
  };

  return /*#__PURE__*/React.createElement(StyledWrapper$d, null, /*#__PURE__*/React.createElement(DataViewPrimaryFilter, {
    label: props.label,
    value: valueString,
    type: props.type,
    onRemove: props.onRemove,
    onClick: onClick
  }), /*#__PURE__*/React.createElement(FilterSingleSelectContent, {
    onClose: onClose,
    anchorEl: state.anchorEl
  }, /*#__PURE__*/React.createElement(MenuSelect, {
    placeholder: "Any...",
    value: value,
    options: state.options,
    onChange: onChange
  })));
}

var LeftNavContext = React.createContext(null);

var drawerProps = {
  anchor: "left",
  variant: "temporary",
  ModalProps: {
    disableEnforceFocus: true
  },
  PaperProps: {
    style: {
      borderRight: "0px",
      zIndex: "auto"
    }
  }
};

/** Renders the drawer used in all variants of the LeftNav. */
function LeftNavDrawer(props) {
  var leftNavContext = React.useContext(LeftNavContext);
  var drawerStyle = React.useMemo(function () {
    return {
      zIndex: leftNavContext.zIndex
    };
  }, [leftNavContext.zIndex]);
  return /*#__PURE__*/React.createElement(MUIDrawer, _extends({}, drawerProps, {
    open: props.open,
    onClose: props.onClose,
    style: drawerStyle
  }), props.children);
}

function _templateObject$D() {
  var data = _taggedTemplateLiteral(["\n\tbackground: #2e2e31;\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n"]);

  _templateObject$D = function _templateObject() {
    return data;
  };

  return data;
}
var LeftNavRoot = styled.div(_templateObject$D());

function _templateObject$E() {
  var data = _taggedTemplateLiteral(["\n\tcolor: ", ";\n\tpadding: 8px 16px;\n\tfont-family: ", ";\n\tmargin: 0;\n\ttext-transform: uppercase;\n\tletter-spacing: 1px;\n\tfont-size: 14px;\n\tfont-weight: normal;\n\tdisplay: flex;\n\talign-items: center;\n\tline-height: 24px;\n\n\t& > span {\n\t\twhite-space: nowrap;\n\t\ttext-overflow: ellipsis;\n\t\toverflow: hidden;\n\t}\n\n\t& > .icon {\n\t\tmargin-right: 16px;\n\t}\n"]);

  _templateObject$E = function _templateObject() {
    return data;
  };

  return data;
}
var StyledH3 = styled.h3(_templateObject$E(), theme.colors.gray400, theme.fontFamily);

function LeftNavTitle(props) {
  return /*#__PURE__*/React.createElement(StyledH3, {
    title: props.label
  }, props.mIcon && /*#__PURE__*/React.createElement(props.mIcon, {
    className: "icon"
  }), /*#__PURE__*/React.createElement("span", null, props.label));
}

function _templateObject$F() {
  var data = _taggedTemplateLiteral(["\n\tborder-top: 1px solid ", ";\n"]);

  _templateObject$F = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$7 = styled.div(_templateObject$F(), theme.colors.gray700);

function LeftNavGroup(props) {
  return /*#__PURE__*/React.createElement(StyledDiv$7, null, /*#__PURE__*/React.createElement(LeftNavTitle, {
    label: props.item.label,
    mIcon: props.item.mIcon
  }), /*#__PURE__*/React.createElement(LeftNavItems, {
    items: props.item.items,
    onOpen: props.onOpen,
    openName: props.openName
  }));
}

/** Renders an array of navigation items. */
function LeftNavItems(props) {
  var leftNavContext = React.useContext(LeftNavContext);
  return /*#__PURE__*/React.createElement(React.Fragment, null, props.items.map(function (val) {
    var Component = val.type === "group" ? LeftNavGroup : leftNavContext.ItemComponent;
    return /*#__PURE__*/React.createElement(Component, {
      key: val.name,
      item: val,
      showLabel: props.showLabel,
      openName: props.openName,
      onOpen: props.onOpen
    });
  }));
}

function _templateObject$G() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tpadding: 8px 16px;\n\tcolor: ", ";\n\tline-height: 24px;\n\tcursor: pointer;\n\ttext-decoration: none;\n\n\t&.hasItems > .right > .arrow {\n\t\tvisibility: visible;\n\t}\n\n\t&.active {\n\t\tbackground: ", ";\n\t\tcolor: white;\n\t}\n\n\t&.active:hover {\n\t\tbackground: ", ";\n\t}\n\n\t&:hover {\n\t\tbackground: #505057;\n\t}\n\n\t& > .left {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tflex: 1 0 0px;\n\t\tmin-width: 0;\n\t}\n\n\t&.showLabel > .left {\n\t\tmargin-right: 10px;\n\t}\n\n\t&.showLabel > .left > .icon {\n\t\tmargin-right: 16px;\n\t}\n\n\t& > .left > .navLabel {\n\t\tcolor: ", ";\n\t\tfont-size: 14px;\n\t\twhite-space: nowrap;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t}\n\n\t& > .right {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tflex: 0 0 auto;\n\t}\n\n\t& > .right > * {\n\t\tfont-size: 20px;\n\t\tvisibility: hidden;\n\t}\n"]);

  _templateObject$G = function _templateObject() {
    return data;
  };

  return data;
}
var StyledA = styled.a(_templateObject$G(), theme.colors.gray400, theme.colors.blue, theme.colors.blueHover, theme.colors.gray200);

function LeftNavItem(props, ref) {
  var item = props.item,
      _props$showLabel = props.showLabel,
      showLabel = _props$showLabel === void 0 ? true : _props$showLabel,
      _props$attrs = props.attrs,
      attrs = _props$attrs === void 0 ? {} : _props$attrs;
  var leftNavContext = React.useContext(LeftNavContext);
  var hasItems = item.items !== undefined; // if this item is active, or it has a child that is active

  var active = leftNavContext.active && (leftNavContext.active === item.name || leftNavContext.active.startsWith("".concat(item.name, "."))); // no icon and if we aren't showing the label, nothing to show

  if (!item.mIcon && !showLabel) {
    return null;
  }

  return /*#__PURE__*/React.createElement(StyledA, _extends({}, item.attrs, attrs, {
    ref: ref,
    className: "\n\t\t\t\t".concat(hasItems ? "hasItems" : "", "\n\t\t\t\t").concat(showLabel ? "showLabel" : "", "\n\t\t\t\t").concat(active ? "active" : "", "\n\t\t\t"),
    title: item.label
  }), /*#__PURE__*/React.createElement("span", {
    className: "left"
  }, item.mIcon && /*#__PURE__*/React.createElement(item.mIcon, {
    className: "icon"
  }), showLabel && /*#__PURE__*/React.createElement(BodyText, {
    className: "navLabel"
  }, item.label)), showLabel && /*#__PURE__*/React.createElement("span", {
    className: "right"
  }, /*#__PURE__*/React.createElement(ChevronRightIcon, {
    className: "arrow"
  })));
}

var LeftNavItem$1 = React.forwardRef(LeftNavItem);

function LeftNavItemMobile(props) {
  var item = props.item,
      onOpen = props.onOpen;
  var leftNavContext = React.useContext(LeftNavContext);
  var onClick = React.useCallback(function (event) {
    if (!item.items) {
      leftNavContext.onNav({
        item: item,
        event: event
      });
    } else {
      onOpen(item.name);
    }
  }, []);
  var attrs = {
    onClick: onClick
  };
  return /*#__PURE__*/React.createElement(LeftNavItem$1, _extends({}, props, {
    attrs: attrs
  }));
}

function _templateObject$H() {
  var data = _taggedTemplateLiteral(["\n\toverflow-y: auto;\n\n\t&::-webkit-scrollbar {\n\t\twidth: 12px;\n\t}\n\n\t&::-webkit-scrollbar-track {\n\t\tbackground-color: #26262a;\n\t}\n\n\t&::-webkit-scrollbar-thumb {\n\t\tbackground-color: #7a7a7d;\n\t}\n\n\t&::-webkit-scrollbar-thumb {\n\t\tbackground-color: #5b5b5d;\n\t}\n"]);

  _templateObject$H = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$8 = styled.div(_templateObject$H());

function LeftNavScroller(props) {
  var _props$attrs = props.attrs,
      attrs = _props$attrs === void 0 ? {} : _props$attrs;
  return /*#__PURE__*/React.createElement(StyledDiv$8, _extends({}, attrs, {
    className: props.className
  }), props.children);
}

function TridentIcon(props) {
  return /*#__PURE__*/React.createElement(SvgIcon, props, /*#__PURE__*/React.createElement("defs", null, /*#__PURE__*/React.createElement("path", {
    d: "M12.79 19.53c2.95 2.14 6.75 2.73 10.21 1.59-.73-3.58-3.15-6.6-6.5-8.08-.54 2.49-1.84 4.76-3.71 6.49z",
    id: "trident_svg__a"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M11.05 19.53c-1.88-1.73-3.18-4-3.72-6.49-3.35 1.49-5.77 4.5-6.5 8.09 3.47 1.14 7.27.54 10.22-1.6z",
    id: "trident_svg__b"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M11.92 18.58c1.68-1.55 2.84-3.59 3.32-5.82a10.94 10.94 0 00-6.65 0c.48 2.23 1.64 4.27 3.33 5.82z",
    id: "trident_svg__c"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M8.14 10.38c0 .38.02.77.06 1.15 2.42-.77 5.01-.77 7.43 0 .04-.38.07-.77.07-1.15 0-3.22-1.37-6.3-3.78-8.44a11.254 11.254 0 00-3.78 8.44z",
    id: "trident_svg__d"
  })), /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#trident_svg__a",
    fill: "#8dc63f"
  }), /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#trident_svg__a",
    fillOpacity: 0,
    stroke: "#000",
    strokeOpacity: 0
  }), /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#trident_svg__b",
    fill: "#00a4e4"
  }), /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#trident_svg__b",
    fillOpacity: 0,
    stroke: "#000",
    strokeOpacity: 0
  }), /*#__PURE__*/React.createElement("g", null, /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#trident_svg__c",
    fill: "#bebebe"
  }), /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#trident_svg__c",
    fillOpacity: 0,
    stroke: "#000",
    strokeOpacity: 0
  })), /*#__PURE__*/React.createElement("g", null, /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#trident_svg__d",
    fill: "#fdb924"
  }), /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#trident_svg__d",
    fillOpacity: 0,
    stroke: "#000",
    strokeOpacity: 0
  })));
}

function _templateObject$I() {
  var data = _taggedTemplateLiteral(["\n\twidth: 80vw;\n\tmax-width: 250px;\n\n\t& > .header {\n\t\tpadding: 8px 16px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tborder-bottom: 1px solid ", ";\n\t}\n\n\t& > .header > .closeIcon {\n\t\tcolor: ", ";\n\t\tcursor: pointer;\n\t}\n\n\t& > .backButton {\n\t\tpadding: 8px 16px;\n\t\tcolor: ", ";\n\t\tline-height: 24px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tborder-bottom: 1px solid ", ";\n\t\tcursor: pointer;\n\t}\n\n\t& > .backButton > .buttonLabel {\n\t\tmargin-left: 16px;\n\t\tcolor: white;\n\t}\n"]);

  _templateObject$I = function _templateObject() {
    return data;
  };

  return data;
}
var RootDiv = styled(LeftNavRoot)(_templateObject$I(), theme.colors.gray600, theme.colors.gray400, theme.colors.gray400, theme.colors.gray700);

function LeftNavMobile(props) {
  var mobileRoot = React.useMemo(function () {
    return {
      name: "root",
      label: "Main Menu",
      items: props.items
    };
  }, [props.items]);
  var defaultState = {
    history: [mobileRoot]
  };

  var _useState = React.useState(defaultState),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var leftNavContext = React.useContext(LeftNavContext);
  var current = state.history[state.history.length - 1];
  var previous = state.history.length > 1 ? state.history[state.history.length - 2] : undefined;

  var onClose = function onClose() {
    setState(defaultState);
    props.onClose();
  };

  var onNav = function onNav(args) {
    setState(defaultState);
    leftNavContext.onNav(args);
  };

  var onOpen = function onOpen(name) {
    var allItems = [].concat(_toConsumableArray(current.items), _toConsumableArray(current.items.filter(function (val) {
      return val.type === "group";
    }).map(function (val) {
      return val.items;
    }).flat()));
    var item = allItems.find(function (val) {
      return val.name === name;
    });
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      history: [].concat(_toConsumableArray(state.history), [item])
    }));
  };

  var onBack = function onBack() {
    var newHistory = state.history.slice(0, -1);
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      history: newHistory
    }));
  };

  var newContext = _objectSpread2(_objectSpread2({}, leftNavContext), {}, {
    onNav: onNav,
    ItemComponent: LeftNavItemMobile
  });

  return /*#__PURE__*/React.createElement(LeftNavDrawer, {
    open: props.open,
    onClose: onClose
  }, /*#__PURE__*/React.createElement(LeftNavContext.Provider, {
    value: newContext
  }, /*#__PURE__*/React.createElement(RootDiv, null, /*#__PURE__*/React.createElement("div", {
    className: "header"
  }, /*#__PURE__*/React.createElement(TridentIcon, null), /*#__PURE__*/React.createElement(CloseIcon, {
    onClick: onClose,
    className: "closeIcon"
  })), previous !== undefined && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "backButton",
    onClick: onBack
  }, /*#__PURE__*/React.createElement(KeyboardBackspaceIcon, null), /*#__PURE__*/React.createElement(BodyText, {
    className: "buttonLabel"
  }, previous.label)), /*#__PURE__*/React.createElement(LeftNavTitle, {
    label: current.label
  })), /*#__PURE__*/React.createElement(LeftNavScroller, null, /*#__PURE__*/React.createElement(LeftNavItems, {
    items: current.items,
    onOpen: onOpen
  })))));
}

function _templateObject$J() {
  var data = _taggedTemplateLiteral(["\n\t&.paper {\n\t\tbackground-color: #404045;\n\t\tmax-width: 250px;\n\t\tmax-height: 80vh;\n\t\tdisplay: flex;\n\t}\n"]);

  _templateObject$J = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$9 = styled.div(_templateObject$J()); // set aside the popperProps so they do not mutate between renders, cause the Popper system to go haywire and move the component around strangely

var popperProps = {
  open: true,
  placement: "right",
  modifiers: {
    preventOverflow: {
      enabled: true,
      boundariesElement: "viewport"
    },
    // this prevents popper from using translated3d which causes blurry
    // flyouts in Chrome, instead it will just use top/left positioning
    computeStyle: {
      enabled: true,
      gpuAcceleration: false
    }
  }
};

function LeftNavFlyout(props) {
  var _useState = React.useState({
    openName: undefined
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var leftNavContext = React.useContext(LeftNavContext);

  var onOpen = function onOpen(openName) {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      openName: openName
    }));
  };

  var onScroll = lodash.throttle(function (e) {
    // this scroll listener is being triggered when a scroll occurs within a child, which we don't want
    // so we only trigger if the scroll event happened on this specific flyout
    if (e.target !== e.currentTarget) {
      return;
    }

    if (state.openName === undefined) {
      return;
    }

    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      openName: undefined
    }));
  }, 100, {
    leading: true,
    trailing: false
  });
  var scrollerAttrs = {
    onScroll: onScroll
  };
  var style = React.useMemo(function () {
    return {
      zIndex: leftNavContext.zIndex + 1
    };
  }, [leftNavContext.zIndex]);
  return /*#__PURE__*/React.createElement(Popper, _extends({}, popperProps, {
    anchorEl: props.anchorEl,
    style: style
  }), /*#__PURE__*/React.createElement(Paper, {
    elevation: 3,
    component: StyledDiv$9,
    className: "paper"
  }, /*#__PURE__*/React.createElement(LeftNavScroller, {
    attrs: scrollerAttrs
  }, /*#__PURE__*/React.createElement(LeftNavTitle, {
    label: props.parent.label
  }), /*#__PURE__*/React.createElement(LeftNavItems, {
    items: props.parent.items,
    openName: state.openName,
    onOpen: onOpen
  }))));
}

function LeftNavItemDesktop(props) {
  var openName = props.openName,
      onOpen = props.onOpen,
      item = props.item;
  var leftNavContext = React.useContext(LeftNavContext);
  var aRef = React.useRef(null);
  var open = item.name === openName;
  var hasItems = item.items !== undefined && item.items.length > 0;
  var onNavClick = React.useCallback(function (event) {
    leftNavContext.onNav({
      item: item,
      event: event
    });
  }, [leftNavContext.onNav]);
  var onPointerMove = lodash.throttle(function () {
    if (openName === item.name) {
      // item already open, no need for action
      return;
    }

    onOpen(item.name);
  }, leftNavContext.enterTimeout, {
    leading: false,
    trailing: true
  }); // On a desktop device, a touch or swipe triggers onPointerEnter and possibly onClick if it lingers long enough
  // because of this we can cancel the onPointerMove, and rely on the onClick event picking it up.
  // On a mobile device, we're relying on onClick anyways, we can cancel the event without harm.

  var onTouchStart = function onTouchStart(e) {
    onPointerMove.cancel();
  };

  var onOpenChildrenClick = function onOpenChildrenClick(e) {
    onOpen(item.name);
  };

  var onPointerLeave = function onPointerLeave(e) {
    onPointerMove.cancel();
  }; // for browsers like Safari which do not support onPointerEnter/onPointerLeave, we are forced to use onMouseMove/onMouseLeave


  var onMouseMove = "PointerEvent" in window ? undefined : onPointerMove;
  var onMouseLeave = "PointerEvent" in window ? undefined : onPointerLeave; // If this item is unmounted we need to clear any lingering events

  React.useEffect(function () {
    return function cleanup() {
      onPointerMove.cancel();
    };
  }, [onPointerMove]);
  var attrs = {
    onPointerMove: onPointerMove,
    onPointerLeave: onPointerLeave,
    onTouchStart: onTouchStart,
    onMouseMove: onMouseMove,
    onMouseLeave: onMouseLeave,
    onClick: hasItems ? onOpenChildrenClick : onNavClick
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LeftNavItem$1, _extends({}, props, {
    ref: aRef,
    attrs: attrs
  })), item.items && open && /*#__PURE__*/React.createElement(LeftNavFlyout, {
    parent: item,
    anchorEl: aRef.current
  }));
}

function _templateObject$K() {
  var data = _taggedTemplateLiteral(["\n\tmax-width: 250px;\n\n\t& > .top {\n\t\tflex: 1 1 0;\n\t\toverflow-y: auto;\n\t}\n\n\t& > .bottom {\n\t\tflex: 0 0 auto;\n\t\tborder-top: 1px solid ", ";\n\t}\n"]);

  _templateObject$K = function _templateObject() {
    return data;
  };

  return data;
}
var RootDiv$1 = styled(LeftNavRoot)(_templateObject$K(), theme.colors.gray600);

function LeftNavDesktop(props) {
  var _useMosaicTranslation = useMosaicTranslation(),
      t = _useMosaicTranslation.t;

  var _useState = React.useState({
    openName: undefined
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var leftNavContext = React.useContext(LeftNavContext);

  var onOpen = function onOpen(openName) {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      openName: openName
    }));
  };

  var onClose = function onClose() {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      openName: undefined
    }));
    props.onClose();
  };

  var onNav = function onNav(args) {
    // when we nav we want to close any flyouts we have
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      openName: undefined
    }));

    if (args.item.name.startsWith("_internal.")) {
      // if the display switcher was used, we call onVariantChange
      var variant = args.item.name.match(/_internal.(.*)/)[1];
      props.onVariantChange(variant);
    } else {
      leftNavContext.onNav(args);
    }
  };

  var showLabel = props.variant === "icons_only" ? false : true;
  var allItems = props.variant === "icons_only" ? props.items.map(function (val) {
    return _objectSpread2(_objectSpread2({}, val), {}, {
      type: "item"
    });
  }) : props.items;
  var items = allItems.filter(function (_ref) {
    var pinned = _ref.pinned;
    return pinned === undefined;
  });
  var bottomItems = allItems.filter(function (_ref2) {
    var pinned = _ref2.pinned;
    return pinned === "bottom";
  });

  var activeLabel = function activeLabel(name) {
    if (name === props.variant) {
      return " (".concat(t("mosaic:LeftNav.active"), ")");
    } else {
      return "";
    }
  };

  var settingsItem = {
    name: "_internal",
    label: t("mosaic:LeftNav.nav_display"),
    type: "item",
    mIcon: SettingsIcon,
    items: [{
      name: "_internal.full",
      label: "".concat(t("mosaic:LeftNav.full")).concat(activeLabel("full"))
    }, {
      name: "_internal.icons_only",
      label: "".concat(t("mosaic:LeftNav.icons_only")).concat(activeLabel("icons_only"))
    }, {
      name: "_internal.hidden",
      label: "".concat(t("mosaic:LeftNav.hidden")).concat(activeLabel("hidden"))
    }]
  };
  bottomItems.push(settingsItem); // if the mouse leaves the component and it's children entirely, wait a duration to close

  var onMouseLeave = lodash.debounce(function () {
    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      openName: undefined
    }));
  }, leftNavContext.leaveTimeout);

  var onMouseEnter = function onMouseEnter() {
    onMouseLeave.cancel();
  };

  var onScroll = lodash.throttle(function (e) {
    // this scroll listener is being trigger when a flyout scrolls as well, which we don't want
    // so we only trigger if the scroll event happened on this specific element
    if (e.target !== e.currentTarget) {
      return;
    } // if the state is already undefined, no reason to re-render


    if (state.openName === undefined) {
      return;
    }

    setState(_objectSpread2(_objectSpread2({}, state), {}, {
      openName: undefined
    }));
  }, 100, {
    leading: true,
    trailing: false
  });
  var scrollerAttrs = {
    onScroll: onScroll
  };
  React.useEffect(function () {
    // cleanup the timeout that may have been set due to enter/leave mechanics
    return function cleanup() {
      onMouseLeave.cancel();
    };
  }, [onMouseLeave]);

  var newContext = _objectSpread2(_objectSpread2({}, leftNavContext), {}, {
    onNav: onNav,
    ItemComponent: LeftNavItemDesktop
  });

  var navContent = /*#__PURE__*/React.createElement(RootDiv$1, {
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, /*#__PURE__*/React.createElement(LeftNavContext.Provider, {
    value: newContext
  }, /*#__PURE__*/React.createElement(LeftNavScroller, {
    className: "top",
    attrs: scrollerAttrs
  }, /*#__PURE__*/React.createElement(LeftNavItems, {
    items: items,
    showLabel: showLabel,
    onOpen: onOpen,
    openName: state.openName
  })), /*#__PURE__*/React.createElement("div", {
    className: "bottom"
  }, /*#__PURE__*/React.createElement(LeftNavItems, {
    items: bottomItems,
    showLabel: showLabel,
    onOpen: onOpen,
    openName: state.openName
  }))));
  var drawerContent = /*#__PURE__*/React.createElement(LeftNavDrawer, {
    open: props.open,
    onClose: onClose
  }, navContent);

  if (["icons_only", "full"].includes(props.variant)) {
    return navContent;
  } else {
    return drawerContent;
  }
}

var leaveTimeout = 300; // how long to wait onMouseEnter to show the navigation

var enterTimeout = 100; // the default z-index to use for the drawer system

var defaultZIndex = 100;

function LeftNav(props) {
  var _props$zIndex;

  var _iterator = _createForOfIteratorHelper(props.items),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var val = _step.value;

      if (val.mIcon === undefined) {
        throw new Error("All top-level navigation items require a mIcon for proper display. '".concat(val.name, "' lacks an icon."));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var zIndex = (_props$zIndex = props.zIndex) !== null && _props$zIndex !== void 0 ? _props$zIndex : defaultZIndex;
  var Component = props.variant === "mobile" ? LeftNavMobile : LeftNavDesktop;
  var onNav = React.useCallback(function (args) {
    var _args$item, _args$item$attrs;

    // if the handler has onNav false, let the browser handle
    if (args.item.onNav === false) {
      return;
    } // if we have an href and it was a ctrl click (win) or command + click (mac) then let the browser handle it


    if (((_args$item = args.item) === null || _args$item === void 0 ? void 0 : (_args$item$attrs = _args$item.attrs) === null || _args$item$attrs === void 0 ? void 0 : _args$item$attrs.href) !== undefined && (args.event.ctrlKey || args.event.metaKey)) {
      // let the default browser handler take care of it
      return;
    } // we have determined we will handle it, so preventDefault to prevent the browser from taking over


    args.event.preventDefault();

    if (typeof args.item.onNav === "function") {
      // if the nav item has it's own onNav function
      args.item.onNav(args);
      props.onClose();
    } else {
      // else we all onNav for the main app to navigate
      props.onNav(args);
    }
  }, [props.onNav]);
  var contextValue = React.useMemo(function () {
    var context = {
      active: props.active,
      variant: props.variant,
      zIndex: zIndex,
      leaveTimeout: leaveTimeout,
      enterTimeout: enterTimeout,
      onNav: onNav
    };
    return context;
  }, [props.variant, zIndex, props.active]);
  return /*#__PURE__*/React.createElement(LeftNavContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/React.createElement(Component, props));
}

var en$3 = {
	nav_display: "Nav Display",
	full: "Full",
	icons_only: "Icons Only",
	hidden: "Hidden",
	active: "Active"
};
var LeftNavLocales = {
	en: en$3
};

var localeData$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  en: en$3,
  'default': LeftNavLocales
});

addCoreResourceBundle({
  prefix: "LeftNav",
  bundle: localeData$2
});

function useMosaicSettings() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$i18nNamespace = _ref.i18nNamespace,
      i18nNamespace = _ref$i18nNamespace === void 0 ? "app" : _ref$i18nNamespace,
      _ref$i18nInitialLocal = _ref.i18nInitialLocale,
      i18nInitialLocale = _ref$i18nInitialLocal === void 0 ? "en" : _ref$i18nInitialLocal;

  var ns = React.useMemo(function () {
    return [i18nNamespace, "mosaic"];
  }, []); // due to glitches in react-i18next we cannot spin a new instance when deps change, it cause all sorts of systems to get out of whack

  var i18n = React.useMemo(function () {
    var i18n = defaulti18n.cloneInstance({
      lng: i18nInitialLocale,
      ns: ns,
      defaultNS: i18nNamespace
    });
    return i18n;
  }, []);
  var returnObj = React.useMemo(function () {
    return {
      i18n: i18n
    };
  }, [i18n]);
  return returnObj;
}

exports.BodyText = BodyText;
exports.Button = Button$1;
exports.ButtonPopoverContext = ButtonPopoverContext;
exports.ButtonRow = ButtonRow$1;
exports.Checkbox = Checkbox$1;
exports.CheckboxList = CheckboxList;
exports.DataView = DataView;
exports.DataViewFilterDropdown = DataViewFilterDropdown;
exports.DataViewFilterDropdownButtons = DataViewFilterDropdownButtons;
exports.DataViewFilterMultiselect = DataViewFilterMultiselect;
exports.DataViewFilterText = DataViewFilterText;
exports.DataViewPrimaryFilter = DataViewPrimaryFilter;
exports.Dialog = Dialog;
exports.Drawer = Drawer;
exports.DrawerContent = DrawerContent$1;
exports.FilterDate = FilterDate;
exports.FilterSingleSelect = FilterSingleSelect;
exports.Grid = DataView;
exports.GridFilterDropdown = DataViewFilterDropdown;
exports.GridFilterDropdownButtons = DataViewFilterDropdownButtons;
exports.GridFilterMultiselect = DataViewFilterMultiselect;
exports.GridFilterText = DataViewFilterText;
exports.GridPrimaryFilter = DataViewPrimaryFilter;
exports.H1 = H1;
exports.H3 = H3;
exports.LeftNav = LeftNav;
exports.LeftNavContext = LeftNavContext;
exports.Menu = Menu;
exports.MenuBase = MenuBase;
exports.MenuBaseContext = MenuBaseContext;
exports.MenuItem = MenuItem;
exports.MenuSelect = MenuSelect;
exports.MosaicContext = MosaicContext;
exports.P = P;
exports.Spinner = Spinner;
exports.TridentIcon = TridentIcon;
exports.addCoreResourceBundle = addCoreResourceBundle;
exports.defaulti18n = defaulti18n;
exports.theme = theme;
exports.transform_boolean = transform_boolean;
exports.transform_dateFormat = transform_dateFormat;
exports.transform_get = transform_get;
exports.transform_join = transform_join;
exports.transform_mapGet = transform_mapGet;
exports.transform_thumbnail = transform_thumbnail;
exports.useMosaicSettings = useMosaicSettings;
exports.useMosaicTranslation = useMosaicTranslation;
