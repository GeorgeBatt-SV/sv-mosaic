import { expect, Page, Locator } from "@playwright/test";
import { url, urlWithKnobs } from "../utils/formUrls";
import { generateRandomId, rgbToHex } from "../utils/helpers/helper";

export class BasePage {

	readonly page: Page;
	readonly loading: Locator;
	readonly title: Locator;
	readonly description: Locator;
	readonly applyBtn: Locator;
	readonly clearBtn: Locator;
	readonly cancelBtn: Locator;
	readonly saveBtn: Locator;
	readonly table: Locator;
	readonly errorMessage: Locator;
	readonly latitude: Locator;
	readonly longitude: Locator;
	readonly saveCoordinatesButton: Locator;
	readonly drawerSaveButton: Locator;
	readonly drawerCancelButton: Locator;
	readonly error: Locator;
	readonly errorIcon: Locator;
	readonly checkboxTestIdLocator: Locator;
	readonly tooltip: Locator;
	readonly checkboxLabel: Locator;
	readonly drawerTitle: Locator;
	readonly showStateLocator: Locator;
	readonly menuItem: Locator;
	readonly checkboxInputString: string;
	readonly chipTestIDLocator: Locator;
	readonly formTestID: Locator;

	constructor(page: Page) {
		this.page = page;
		this.loading = page.locator("div.loading");
		this.title = page.locator("text=Form Title");
		this.description = page.locator("//*[@id='root']/div/div/form/div[1]/div/div[1]/span[2]");
		this.applyBtn = page.locator("text=Apply");
		this.clearBtn = page.locator("text=Clear");
		this.cancelBtn = page.locator("button:has-text('Cancel')");
		this.saveBtn = page.locator("text=Save");
		this.table = page.locator("table");
		this.errorMessage = page.locator("p.Mui-error");
		this.formTestID = page.locator("[data-testid='form-test-id']");
		this.latitude = page.locator("input#lat");
		this.longitude = page.locator("input#lng");
		this.saveCoordinatesButton = this.formTestID.nth(1).locator("button", { hasText: "Save Coordinates" });
		this.drawerSaveButton = page.locator("//html/body/div[5]/div[3]/div/div/div/form/div[1]/div/span[2]/button");
		this.drawerCancelButton = page.locator("//html/body/div[5]/div[3]/div/div/div/form/div[1]/div/span[1]/button");
		this.error = page.locator(".Mui-error.MuiFormHelperText-root");
		this.errorIcon = page.locator("[data-testid='error-icon-test-id']");
		this.checkboxTestIdLocator = page.locator("[data-testid='checkbox-test-id'] input");
		this.tooltip = page.locator("[role='tooltip']");
		this.checkboxLabel = page.locator("[data-testid='label-test-id']");
		this.drawerTitle = page.locator("[data-testid='drawer-title-test-id']");
		this.showStateLocator = page.locator("#root pre");
		this.menuItem = page.locator("[role='menuitem']");
		this.checkboxInputString = "input[type='checkbox']";
		this.chipTestIDLocator = page.locator("[data-testid='chip-testid']");
	}

	async visit(page_path: string, element: Locator, knobs?: string[]): Promise<void> {
		if (knobs) {
			await this.page.goto(urlWithKnobs(page_path, knobs), { timeout: 900000 });
		} else {
			await this.page.goto(url(page_path), { timeout: 900000 });
		}
		await element.waitFor();
	}

	async visitWithKnobs(page_path: string, element: Locator, knobs: string[]): Promise<void> {
		await this.page.goto(urlWithKnobs(page_path, knobs), { timeout: 900000 });
		await element.waitFor();
	}

	async validateSnapshot(component: Locator, name: string): Promise<void> {
		await component.waitFor({ state: "visible" });
		await component.waitFor({ state: "attached" });
		await this.loading.waitFor({ state: "detached" });
		expect(await component.screenshot()).toMatchSnapshot("dataview-" + name + ".png", { threshold: 0.3, maxDiffPixelRatio: 0.3 })
	}

	async setDialogValidationListener(_message: string): Promise<void> {
		this.page.once("dialog", async dialog => {
			expect(dialog.message()).toContain(_message);
			await dialog.accept();
		});
	}

	async wait(timeout = 500): Promise<void> {
		await this.page.waitForTimeout(timeout);
	}

	async waitForElementLoad(): Promise<void> {
		await this.loading.waitFor({ state: "detached" });
	}

	async clearAllValuesFromField(locator: Locator): Promise<void> {
		await locator.click();
		await this.page.keyboard.press("Home");
		await this.page.keyboard.down("Shift");
		await this.page.keyboard.press("End");
		await this.page.keyboard.up("Shift");
		await this.page.keyboard.press("Backspace");
		await locator.waitFor();
	}

	async getElementWidth(element:Locator):Promise<number> {
		await element.waitFor({ state: "visible" });
		const width = (await ((element).evaluate(el => getComputedStyle(el).width))).split("px")[0];
		const leftPadding = ((await ((element).evaluate(el => getComputedStyle(el).paddingLeft))).split("px")[0]);
		const rightPadding = ((await ((element).evaluate(el => getComputedStyle(el).paddingRight))).split("px")[0]);
		return Number(width) + Number(leftPadding) + Number(rightPadding);
	}

	async getAutogeneratedText(length: number): Promise<string> {
		return generateRandomId(length);
	}

	async getLimitOfMaxChar(locator: Locator): Promise<number> {
		const textContent = await locator.textContent();
		return Number(textContent?.split("/")[1]);
	}

	async getNumberOfCharactersInMaxCharField(locator: Locator): Promise<number> {
		const textContent = await locator.textContent();
		return Number(textContent?.split("/")[0]);
	}

	async selectOptionFromDropdown(dropdown: Locator, option:string): Promise<void> {
		await dropdown.click({force: true});
		await this.page.locator("text=" + option).nth(0).click();
	}

	async validateFontColorFromElement(element: Locator, expectedValue: string, isHex: boolean): Promise<void> {
		let elementFontColor = (await ((element).evaluate(el => getComputedStyle(el).color))).split("rgb")[1];
		if (isHex) {
			const color = elementFontColor.slice(1, -1);
			const hex = rgbToHex(Number(color.split(",")[0]), Number(color.split(",")[1]), Number(color.split(",")[2]));
			elementFontColor = hex;
		}
		expect(elementFontColor).toBe(expectedValue);
	}

	async isFontBold(element: Locator): Promise<boolean> {
		const fontWeight = (await ((element).evaluate(el => getComputedStyle(el).fontWeight)));
		if (Number(fontWeight) > 400 || fontWeight === "bold" || fontWeight === "bolder") {
			return true;
		}
		return false;
	}

	async selectAndDeleteText(stringLenght:number): Promise<void> {
		await this.page.keyboard.press("ArrowRight");
		await this.page.keyboard.down("Shift");
		for (let i = 0; i < stringLenght; i++) {
			await this.page.keyboard.press("ArrowLeft");
		}
		await this.page.keyboard.up("Shift");
		await this.page.keyboard.press("Backspace");
	}

	async getFontWeightFromElement(element: Locator): Promise<string> {
		return await ((element).evaluate(el => getComputedStyle(el).fontWeight));
	}

	async validateMarginValueFromElement(element: Locator, expectedValue: string, isRight: boolean): Promise<void> {
		let elementMargin: string;
		if (isRight) {
			elementMargin = await ((element).evaluate(el => getComputedStyle(el).marginLeft));
		} else {
			elementMargin = await ((element).evaluate(el => getComputedStyle(el).marginRight));
		}
		expect(elementMargin).toBe(expectedValue);
	}

	async getSpecificMarginFromElement(element: Locator, margin: "top"|"bottom"|"right"|"left"): Promise<string> {
		switch (margin) {
		case "top":
			return await ((element).evaluate(el => getComputedStyle(el).marginTop));
		case "bottom":
			return await ((element).evaluate(el => getComputedStyle(el).marginBottom));
		case "right":
			return await ((element).evaluate(el => getComputedStyle(el).marginRight));
		case "left":
			return await ((element).evaluate(el => getComputedStyle(el).marginLeft));
		}
	}

	async getFontFamilyFromElement(element: Locator): Promise<string> {
		return await ((element).evaluate(el => getComputedStyle(el).fontFamily));
	}

	async getHeightFromElement(element: Locator): Promise<string> {
		return await ((element).evaluate(el => getComputedStyle(el).height));
	}

	async getBackgroundColorFromElement(element: Locator): Promise<string> {
		return await ((element).evaluate(el => getComputedStyle(el).backgroundColor));
	}

	async getColorFromElement(element: Locator): Promise<string> {
		return await ((element).evaluate(el => getComputedStyle(el).color));
	}

	async getOnlyStringWithLetters(text:string): Promise<string> {
		return (text.replace(/[^a-zA-Z ]+/g, "")).trim();
	}

	async getSpecificPaddingFromElement(element: Locator, section?: "all"|"top"|"bottom"|"right"|"left"): Promise<string> {
		switch (section) {
		case "all":
			return await ((element).evaluate(el => getComputedStyle(el).padding));
		case "top":
			return await ((element).evaluate(el => getComputedStyle(el).paddingTop));
		case "bottom":
			return await ((element).evaluate(el => getComputedStyle(el).paddingBottom));
		case "right":
			return await ((element).evaluate(el => getComputedStyle(el).paddingRight));
		case "left":
			return await ((element).evaluate(el => getComputedStyle(el).paddingLeft));
		default:
			return await ((element).evaluate(el => getComputedStyle(el).padding));
		}
	}

	async getGapFromElement(element: Locator): Promise<string> {
		return await ((element).evaluate(el => getComputedStyle(el).gap));
	}

	async getSpecificBorderFromElement(element: Locator, section?: "all"|"right"|"left"|"top"|"bottom"): Promise<string> {
		switch (section) {
		case "all":
			return await ((element).evaluate(el => getComputedStyle(el).border));
		case "right":
			return await ((element).evaluate(el => getComputedStyle(el).borderRight));
		case "left":
			return await ((element).evaluate(el => getComputedStyle(el).borderLeft));
		case "top":
			return await ((element).evaluate(el => getComputedStyle(el).borderTop));
		case "bottom":
			return await ((element).evaluate(el => getComputedStyle(el).borderBottom));
		default:
			return await ((element).evaluate(el => getComputedStyle(el).border));
		}
	}
}
